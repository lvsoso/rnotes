(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{425:function(v,_,l){"use strict";l.r(_);var t=l(5),i=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"base"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[v._v("#")]),v._v(" base")]),v._v(" "),_("p",[v._v("分类：依靠特征进行区分，类别越多，需要的特征越多；")]),v._v(" "),_("p",[v._v("向量：一组数字，一组特征就可以组成向量；")]),v._v(" "),_("p",[v._v("坐标：向量的特征值，指向了一个特定的事物；")]),v._v(" "),_("p",[v._v("相似搜索：搜索一组坐标相差不大的值；")]),v._v(" "),_("p",[v._v("对这些特定事物进行划分、归类 -> 分类")]),v._v(" "),_("h4",{attrs:{id:"向量查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向量查询"}},[v._v("#")]),v._v(" 向量查询")]),v._v(" "),_("p",[v._v("速度、质量、内存")]),v._v(" "),_("p",[v._v("最近邻算法、近似最近邻算法")]),v._v(" "),_("p",[v._v("速度 和 质量成反比")]),v._v(" "),_("p",[v._v("全量比较：")]),v._v(" "),_("ul",[_("li",[v._v("余弦")]),v._v(" "),_("li",[v._v("欧氏距离")])]),v._v(" "),_("p",[v._v("分范围查找：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("kmeans")]),v._v(" "),_("ul",[_("li",[v._v("最终计算出分类的中心点；")]),v._v(" "),_("li",[v._v("搜索时在相似的中心点范围内查找；")]),v._v(" "),_("li",[v._v("通过增加分类数量减少遗漏；")]),v._v(" "),_("li",[v._v("搜索相邻几个分类减少遗漏；")])])]),v._v(" "),_("li",[_("p",[v._v("位置敏感hash：")]),v._v(" "),_("ul",[_("li",[v._v("通过hash来对向量分类，碰撞率高，分出多个bucket，按bucket查找")]),v._v(" "),_("li",[v._v("计算方式：\n"),_("ul",[_("li",[v._v("随机多个向量对数据进行二分，构造多位这样的0，1组合")]),v._v(" "),_("li",[v._v("相较于全匹配比较hash，可以通过对hash分段，按照段的匹配度来合理的找到范围")])])])])])]),v._v(" "),_("h4",{attrs:{id:"向量存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#向量存储"}},[v._v("#")]),v._v(" 向量存储")]),v._v(" "),_("p",[v._v("128 * 32 bit * 10000000= 4096 bit * 10000000 = 512 byte * 10000000 ～= 4.77GB")]),v._v(" "),_("p",[v._v("乘积量化（PQ）")]),v._v(" "),_("ul",[_("li",[v._v("横向切分，找出代表性的点。")]),v._v(" "),_("li",[v._v("查找：向量-> 编码代号 -> 向量值\n"),_("ul",[_("li",[v._v("码本：编码代号 -> 向量值\n"),_("ul",[_("li",[v._v("维度多的情况下，码本也占空间 -> 维度灾难")])])]),v._v(" "),_("li",[v._v("降维：\n"),_("ul",[_("li",[v._v("分成多个子向量空间")]),v._v(" "),_("li",[v._v("存在一组低维的码本")]),v._v(" "),_("li",[v._v("一个向量计算出8个低维度子向量值分别进行查找")]),v._v(" "),_("li",[v._v("128 维度 ->  8 * 16 维  -> 8个子码本")]),v._v(" "),_("li",[v._v("10000000  * 8 byte ～= 76MB")])])])])])]),v._v(" "),_("p",[v._v("分层导航小世界（HNSW）")]),v._v(" "),_("p",[v._v("德劳内三角剖分法：")]),v._v(" "),_("ul",[_("li",[v._v("每个点都有直接连接友节点")]),v._v(" "),_("li",[v._v("如果两个点之间的距离到达一定程度，一定要连起来形成友好节点的关系")]),v._v(" "),_("li",[v._v("在这个基础上保持连线最少")])]),v._v(" "),_("p",[v._v("NSW： 依次给每个点进行创建连接，搜索先粗快，后细慢")]),v._v(" "),_("p",[v._v("HNSW：立体跳表？占内存")])])}),[],!1,null,null,null);_.default=i.exports}}]);