/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TopicName TopicName a list of repo topic names
type TopicName struct {
	Topics *[]string `json:"topics,omitempty"`
}

// NewTopicName instantiates a new TopicName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicName() *TopicName {
	this := TopicName{}
	return &this
}

// NewTopicNameWithDefaults instantiates a new TopicName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicNameWithDefaults() *TopicName {
	this := TopicName{}
	return &this
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *TopicName) GetTopics() []string {
	if o == nil || o.Topics == nil {
		var ret []string
		return ret
	}
	return *o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicName) GetTopicsOk() (*[]string, bool) {
	if o == nil || o.Topics == nil {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *TopicName) HasTopics() bool {
	if o != nil && o.Topics != nil {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *TopicName) SetTopics(v []string) {
	o.Topics = &v
}

func (o TopicName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Topics != nil {
		toSerialize["topics"] = o.Topics
	}
	return json.Marshal(toSerialize)
}

type NullableTopicName struct {
	value *TopicName
	isSet bool
}

func (v NullableTopicName) Get() *TopicName {
	return v.value
}

func (v *NullableTopicName) Set(val *TopicName) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicName) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicName(val *TopicName) *NullableTopicName {
	return &NullableTopicName{value: val, isSet: true}
}

func (v NullableTopicName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


