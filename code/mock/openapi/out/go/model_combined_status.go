/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CombinedStatus CombinedStatus holds the combined state of several statuses for a single commit
type CombinedStatus struct {
	CommitUrl *string `json:"commit_url,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
	Sha *string `json:"sha,omitempty"`
	// CommitStatusState holds the state of a CommitStatus It can be \"pending\", \"success\", \"error\" and \"failure\"
	State *string `json:"state,omitempty"`
	Statuses *[]CommitStatus `json:"statuses,omitempty"`
	TotalCount *int64 `json:"total_count,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewCombinedStatus instantiates a new CombinedStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombinedStatus() *CombinedStatus {
	this := CombinedStatus{}
	return &this
}

// NewCombinedStatusWithDefaults instantiates a new CombinedStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombinedStatusWithDefaults() *CombinedStatus {
	this := CombinedStatus{}
	return &this
}

// GetCommitUrl returns the CommitUrl field value if set, zero value otherwise.
func (o *CombinedStatus) GetCommitUrl() string {
	if o == nil || o.CommitUrl == nil {
		var ret string
		return ret
	}
	return *o.CommitUrl
}

// GetCommitUrlOk returns a tuple with the CommitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetCommitUrlOk() (*string, bool) {
	if o == nil || o.CommitUrl == nil {
		return nil, false
	}
	return o.CommitUrl, true
}

// HasCommitUrl returns a boolean if a field has been set.
func (o *CombinedStatus) HasCommitUrl() bool {
	if o != nil && o.CommitUrl != nil {
		return true
	}

	return false
}

// SetCommitUrl gets a reference to the given string and assigns it to the CommitUrl field.
func (o *CombinedStatus) SetCommitUrl(v string) {
	o.CommitUrl = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *CombinedStatus) GetRepository() Repository {
	if o == nil || o.Repository == nil {
		var ret Repository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetRepositoryOk() (*Repository, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *CombinedStatus) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given Repository and assigns it to the Repository field.
func (o *CombinedStatus) SetRepository(v Repository) {
	o.Repository = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *CombinedStatus) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *CombinedStatus) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *CombinedStatus) SetSha(v string) {
	o.Sha = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CombinedStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CombinedStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CombinedStatus) SetState(v string) {
	o.State = &v
}

// GetStatuses returns the Statuses field value if set, zero value otherwise.
func (o *CombinedStatus) GetStatuses() []CommitStatus {
	if o == nil || o.Statuses == nil {
		var ret []CommitStatus
		return ret
	}
	return *o.Statuses
}

// GetStatusesOk returns a tuple with the Statuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetStatusesOk() (*[]CommitStatus, bool) {
	if o == nil || o.Statuses == nil {
		return nil, false
	}
	return o.Statuses, true
}

// HasStatuses returns a boolean if a field has been set.
func (o *CombinedStatus) HasStatuses() bool {
	if o != nil && o.Statuses != nil {
		return true
	}

	return false
}

// SetStatuses gets a reference to the given []CommitStatus and assigns it to the Statuses field.
func (o *CombinedStatus) SetStatuses(v []CommitStatus) {
	o.Statuses = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *CombinedStatus) GetTotalCount() int64 {
	if o == nil || o.TotalCount == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetTotalCountOk() (*int64, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *CombinedStatus) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *CombinedStatus) SetTotalCount(v int64) {
	o.TotalCount = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CombinedStatus) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinedStatus) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CombinedStatus) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CombinedStatus) SetUrl(v string) {
	o.Url = &v
}

func (o CombinedStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommitUrl != nil {
		toSerialize["commit_url"] = o.CommitUrl
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Statuses != nil {
		toSerialize["statuses"] = o.Statuses
	}
	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCombinedStatus struct {
	value *CombinedStatus
	isSet bool
}

func (v NullableCombinedStatus) Get() *CombinedStatus {
	return v.value
}

func (v *NullableCombinedStatus) Set(val *CombinedStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCombinedStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCombinedStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombinedStatus(val *CombinedStatus) *NullableCombinedStatus {
	return &NullableCombinedStatus{value: val, isSet: true}
}

func (v NullableCombinedStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombinedStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


