/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NewIssuePinsAllowed NewIssuePinsAllowed represents an API response that says if new Issue Pins are allowed
type NewIssuePinsAllowed struct {
	Issues *bool `json:"issues,omitempty"`
	PullRequests *bool `json:"pull_requests,omitempty"`
}

// NewNewIssuePinsAllowed instantiates a new NewIssuePinsAllowed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewIssuePinsAllowed() *NewIssuePinsAllowed {
	this := NewIssuePinsAllowed{}
	return &this
}

// NewNewIssuePinsAllowedWithDefaults instantiates a new NewIssuePinsAllowed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewIssuePinsAllowedWithDefaults() *NewIssuePinsAllowed {
	this := NewIssuePinsAllowed{}
	return &this
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *NewIssuePinsAllowed) GetIssues() bool {
	if o == nil || o.Issues == nil {
		var ret bool
		return ret
	}
	return *o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewIssuePinsAllowed) GetIssuesOk() (*bool, bool) {
	if o == nil || o.Issues == nil {
		return nil, false
	}
	return o.Issues, true
}

// HasIssues returns a boolean if a field has been set.
func (o *NewIssuePinsAllowed) HasIssues() bool {
	if o != nil && o.Issues != nil {
		return true
	}

	return false
}

// SetIssues gets a reference to the given bool and assigns it to the Issues field.
func (o *NewIssuePinsAllowed) SetIssues(v bool) {
	o.Issues = &v
}

// GetPullRequests returns the PullRequests field value if set, zero value otherwise.
func (o *NewIssuePinsAllowed) GetPullRequests() bool {
	if o == nil || o.PullRequests == nil {
		var ret bool
		return ret
	}
	return *o.PullRequests
}

// GetPullRequestsOk returns a tuple with the PullRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewIssuePinsAllowed) GetPullRequestsOk() (*bool, bool) {
	if o == nil || o.PullRequests == nil {
		return nil, false
	}
	return o.PullRequests, true
}

// HasPullRequests returns a boolean if a field has been set.
func (o *NewIssuePinsAllowed) HasPullRequests() bool {
	if o != nil && o.PullRequests != nil {
		return true
	}

	return false
}

// SetPullRequests gets a reference to the given bool and assigns it to the PullRequests field.
func (o *NewIssuePinsAllowed) SetPullRequests(v bool) {
	o.PullRequests = &v
}

func (o NewIssuePinsAllowed) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issues != nil {
		toSerialize["issues"] = o.Issues
	}
	if o.PullRequests != nil {
		toSerialize["pull_requests"] = o.PullRequests
	}
	return json.Marshal(toSerialize)
}

type NullableNewIssuePinsAllowed struct {
	value *NewIssuePinsAllowed
	isSet bool
}

func (v NullableNewIssuePinsAllowed) Get() *NewIssuePinsAllowed {
	return v.value
}

func (v *NullableNewIssuePinsAllowed) Set(val *NewIssuePinsAllowed) {
	v.value = val
	v.isSet = true
}

func (v NullableNewIssuePinsAllowed) IsSet() bool {
	return v.isSet
}

func (v *NullableNewIssuePinsAllowed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewIssuePinsAllowed(val *NewIssuePinsAllowed) *NullableNewIssuePinsAllowed {
	return &NullableNewIssuePinsAllowed{value: val, isSet: true}
}

func (v NullableNewIssuePinsAllowed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewIssuePinsAllowed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


