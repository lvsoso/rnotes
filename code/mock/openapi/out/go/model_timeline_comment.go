/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TimelineComment TimelineComment represents a timeline comment (comment of any type) on a commit or issue
type TimelineComment struct {
	Assignee *User `json:"assignee,omitempty"`
	AssigneeTeam *Team `json:"assignee_team,omitempty"`
	Body *string `json:"body,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DependentIssue *Issue `json:"dependent_issue,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IssueUrl *string `json:"issue_url,omitempty"`
	Label *Label `json:"label,omitempty"`
	Milestone *Milestone `json:"milestone,omitempty"`
	NewRef *string `json:"new_ref,omitempty"`
	NewTitle *string `json:"new_title,omitempty"`
	OldMilestone *Milestone `json:"old_milestone,omitempty"`
	OldProjectId *int64 `json:"old_project_id,omitempty"`
	OldRef *string `json:"old_ref,omitempty"`
	OldTitle *string `json:"old_title,omitempty"`
	ProjectId *int64 `json:"project_id,omitempty"`
	PullRequestUrl *string `json:"pull_request_url,omitempty"`
	RefAction *string `json:"ref_action,omitempty"`
	RefComment *Comment `json:"ref_comment,omitempty"`
	// commit SHA where issue/PR was referenced
	RefCommitSha *string `json:"ref_commit_sha,omitempty"`
	RefIssue *Issue `json:"ref_issue,omitempty"`
	// whether the assignees were removed or added
	RemovedAssignee *bool `json:"removed_assignee,omitempty"`
	ResolveDoer *User `json:"resolve_doer,omitempty"`
	ReviewId *int64 `json:"review_id,omitempty"`
	TrackedTime *TrackedTime `json:"tracked_time,omitempty"`
	Type *string `json:"type,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	User *User `json:"user,omitempty"`
}

// NewTimelineComment instantiates a new TimelineComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineComment() *TimelineComment {
	this := TimelineComment{}
	return &this
}

// NewTimelineCommentWithDefaults instantiates a new TimelineComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineCommentWithDefaults() *TimelineComment {
	this := TimelineComment{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *TimelineComment) GetAssignee() User {
	if o == nil || o.Assignee == nil {
		var ret User
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetAssigneeOk() (*User, bool) {
	if o == nil || o.Assignee == nil {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *TimelineComment) HasAssignee() bool {
	if o != nil && o.Assignee != nil {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given User and assigns it to the Assignee field.
func (o *TimelineComment) SetAssignee(v User) {
	o.Assignee = &v
}

// GetAssigneeTeam returns the AssigneeTeam field value if set, zero value otherwise.
func (o *TimelineComment) GetAssigneeTeam() Team {
	if o == nil || o.AssigneeTeam == nil {
		var ret Team
		return ret
	}
	return *o.AssigneeTeam
}

// GetAssigneeTeamOk returns a tuple with the AssigneeTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetAssigneeTeamOk() (*Team, bool) {
	if o == nil || o.AssigneeTeam == nil {
		return nil, false
	}
	return o.AssigneeTeam, true
}

// HasAssigneeTeam returns a boolean if a field has been set.
func (o *TimelineComment) HasAssigneeTeam() bool {
	if o != nil && o.AssigneeTeam != nil {
		return true
	}

	return false
}

// SetAssigneeTeam gets a reference to the given Team and assigns it to the AssigneeTeam field.
func (o *TimelineComment) SetAssigneeTeam(v Team) {
	o.AssigneeTeam = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *TimelineComment) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *TimelineComment) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *TimelineComment) SetBody(v string) {
	o.Body = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TimelineComment) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TimelineComment) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TimelineComment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDependentIssue returns the DependentIssue field value if set, zero value otherwise.
func (o *TimelineComment) GetDependentIssue() Issue {
	if o == nil || o.DependentIssue == nil {
		var ret Issue
		return ret
	}
	return *o.DependentIssue
}

// GetDependentIssueOk returns a tuple with the DependentIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetDependentIssueOk() (*Issue, bool) {
	if o == nil || o.DependentIssue == nil {
		return nil, false
	}
	return o.DependentIssue, true
}

// HasDependentIssue returns a boolean if a field has been set.
func (o *TimelineComment) HasDependentIssue() bool {
	if o != nil && o.DependentIssue != nil {
		return true
	}

	return false
}

// SetDependentIssue gets a reference to the given Issue and assigns it to the DependentIssue field.
func (o *TimelineComment) SetDependentIssue(v Issue) {
	o.DependentIssue = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *TimelineComment) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *TimelineComment) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *TimelineComment) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TimelineComment) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TimelineComment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TimelineComment) SetId(v int64) {
	o.Id = &v
}

// GetIssueUrl returns the IssueUrl field value if set, zero value otherwise.
func (o *TimelineComment) GetIssueUrl() string {
	if o == nil || o.IssueUrl == nil {
		var ret string
		return ret
	}
	return *o.IssueUrl
}

// GetIssueUrlOk returns a tuple with the IssueUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetIssueUrlOk() (*string, bool) {
	if o == nil || o.IssueUrl == nil {
		return nil, false
	}
	return o.IssueUrl, true
}

// HasIssueUrl returns a boolean if a field has been set.
func (o *TimelineComment) HasIssueUrl() bool {
	if o != nil && o.IssueUrl != nil {
		return true
	}

	return false
}

// SetIssueUrl gets a reference to the given string and assigns it to the IssueUrl field.
func (o *TimelineComment) SetIssueUrl(v string) {
	o.IssueUrl = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *TimelineComment) GetLabel() Label {
	if o == nil || o.Label == nil {
		var ret Label
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetLabelOk() (*Label, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *TimelineComment) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given Label and assigns it to the Label field.
func (o *TimelineComment) SetLabel(v Label) {
	o.Label = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise.
func (o *TimelineComment) GetMilestone() Milestone {
	if o == nil || o.Milestone == nil {
		var ret Milestone
		return ret
	}
	return *o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetMilestoneOk() (*Milestone, bool) {
	if o == nil || o.Milestone == nil {
		return nil, false
	}
	return o.Milestone, true
}

// HasMilestone returns a boolean if a field has been set.
func (o *TimelineComment) HasMilestone() bool {
	if o != nil && o.Milestone != nil {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given Milestone and assigns it to the Milestone field.
func (o *TimelineComment) SetMilestone(v Milestone) {
	o.Milestone = &v
}

// GetNewRef returns the NewRef field value if set, zero value otherwise.
func (o *TimelineComment) GetNewRef() string {
	if o == nil || o.NewRef == nil {
		var ret string
		return ret
	}
	return *o.NewRef
}

// GetNewRefOk returns a tuple with the NewRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetNewRefOk() (*string, bool) {
	if o == nil || o.NewRef == nil {
		return nil, false
	}
	return o.NewRef, true
}

// HasNewRef returns a boolean if a field has been set.
func (o *TimelineComment) HasNewRef() bool {
	if o != nil && o.NewRef != nil {
		return true
	}

	return false
}

// SetNewRef gets a reference to the given string and assigns it to the NewRef field.
func (o *TimelineComment) SetNewRef(v string) {
	o.NewRef = &v
}

// GetNewTitle returns the NewTitle field value if set, zero value otherwise.
func (o *TimelineComment) GetNewTitle() string {
	if o == nil || o.NewTitle == nil {
		var ret string
		return ret
	}
	return *o.NewTitle
}

// GetNewTitleOk returns a tuple with the NewTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetNewTitleOk() (*string, bool) {
	if o == nil || o.NewTitle == nil {
		return nil, false
	}
	return o.NewTitle, true
}

// HasNewTitle returns a boolean if a field has been set.
func (o *TimelineComment) HasNewTitle() bool {
	if o != nil && o.NewTitle != nil {
		return true
	}

	return false
}

// SetNewTitle gets a reference to the given string and assigns it to the NewTitle field.
func (o *TimelineComment) SetNewTitle(v string) {
	o.NewTitle = &v
}

// GetOldMilestone returns the OldMilestone field value if set, zero value otherwise.
func (o *TimelineComment) GetOldMilestone() Milestone {
	if o == nil || o.OldMilestone == nil {
		var ret Milestone
		return ret
	}
	return *o.OldMilestone
}

// GetOldMilestoneOk returns a tuple with the OldMilestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetOldMilestoneOk() (*Milestone, bool) {
	if o == nil || o.OldMilestone == nil {
		return nil, false
	}
	return o.OldMilestone, true
}

// HasOldMilestone returns a boolean if a field has been set.
func (o *TimelineComment) HasOldMilestone() bool {
	if o != nil && o.OldMilestone != nil {
		return true
	}

	return false
}

// SetOldMilestone gets a reference to the given Milestone and assigns it to the OldMilestone field.
func (o *TimelineComment) SetOldMilestone(v Milestone) {
	o.OldMilestone = &v
}

// GetOldProjectId returns the OldProjectId field value if set, zero value otherwise.
func (o *TimelineComment) GetOldProjectId() int64 {
	if o == nil || o.OldProjectId == nil {
		var ret int64
		return ret
	}
	return *o.OldProjectId
}

// GetOldProjectIdOk returns a tuple with the OldProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetOldProjectIdOk() (*int64, bool) {
	if o == nil || o.OldProjectId == nil {
		return nil, false
	}
	return o.OldProjectId, true
}

// HasOldProjectId returns a boolean if a field has been set.
func (o *TimelineComment) HasOldProjectId() bool {
	if o != nil && o.OldProjectId != nil {
		return true
	}

	return false
}

// SetOldProjectId gets a reference to the given int64 and assigns it to the OldProjectId field.
func (o *TimelineComment) SetOldProjectId(v int64) {
	o.OldProjectId = &v
}

// GetOldRef returns the OldRef field value if set, zero value otherwise.
func (o *TimelineComment) GetOldRef() string {
	if o == nil || o.OldRef == nil {
		var ret string
		return ret
	}
	return *o.OldRef
}

// GetOldRefOk returns a tuple with the OldRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetOldRefOk() (*string, bool) {
	if o == nil || o.OldRef == nil {
		return nil, false
	}
	return o.OldRef, true
}

// HasOldRef returns a boolean if a field has been set.
func (o *TimelineComment) HasOldRef() bool {
	if o != nil && o.OldRef != nil {
		return true
	}

	return false
}

// SetOldRef gets a reference to the given string and assigns it to the OldRef field.
func (o *TimelineComment) SetOldRef(v string) {
	o.OldRef = &v
}

// GetOldTitle returns the OldTitle field value if set, zero value otherwise.
func (o *TimelineComment) GetOldTitle() string {
	if o == nil || o.OldTitle == nil {
		var ret string
		return ret
	}
	return *o.OldTitle
}

// GetOldTitleOk returns a tuple with the OldTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetOldTitleOk() (*string, bool) {
	if o == nil || o.OldTitle == nil {
		return nil, false
	}
	return o.OldTitle, true
}

// HasOldTitle returns a boolean if a field has been set.
func (o *TimelineComment) HasOldTitle() bool {
	if o != nil && o.OldTitle != nil {
		return true
	}

	return false
}

// SetOldTitle gets a reference to the given string and assigns it to the OldTitle field.
func (o *TimelineComment) SetOldTitle(v string) {
	o.OldTitle = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *TimelineComment) GetProjectId() int64 {
	if o == nil || o.ProjectId == nil {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetProjectIdOk() (*int64, bool) {
	if o == nil || o.ProjectId == nil {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *TimelineComment) HasProjectId() bool {
	if o != nil && o.ProjectId != nil {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *TimelineComment) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetPullRequestUrl returns the PullRequestUrl field value if set, zero value otherwise.
func (o *TimelineComment) GetPullRequestUrl() string {
	if o == nil || o.PullRequestUrl == nil {
		var ret string
		return ret
	}
	return *o.PullRequestUrl
}

// GetPullRequestUrlOk returns a tuple with the PullRequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetPullRequestUrlOk() (*string, bool) {
	if o == nil || o.PullRequestUrl == nil {
		return nil, false
	}
	return o.PullRequestUrl, true
}

// HasPullRequestUrl returns a boolean if a field has been set.
func (o *TimelineComment) HasPullRequestUrl() bool {
	if o != nil && o.PullRequestUrl != nil {
		return true
	}

	return false
}

// SetPullRequestUrl gets a reference to the given string and assigns it to the PullRequestUrl field.
func (o *TimelineComment) SetPullRequestUrl(v string) {
	o.PullRequestUrl = &v
}

// GetRefAction returns the RefAction field value if set, zero value otherwise.
func (o *TimelineComment) GetRefAction() string {
	if o == nil || o.RefAction == nil {
		var ret string
		return ret
	}
	return *o.RefAction
}

// GetRefActionOk returns a tuple with the RefAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetRefActionOk() (*string, bool) {
	if o == nil || o.RefAction == nil {
		return nil, false
	}
	return o.RefAction, true
}

// HasRefAction returns a boolean if a field has been set.
func (o *TimelineComment) HasRefAction() bool {
	if o != nil && o.RefAction != nil {
		return true
	}

	return false
}

// SetRefAction gets a reference to the given string and assigns it to the RefAction field.
func (o *TimelineComment) SetRefAction(v string) {
	o.RefAction = &v
}

// GetRefComment returns the RefComment field value if set, zero value otherwise.
func (o *TimelineComment) GetRefComment() Comment {
	if o == nil || o.RefComment == nil {
		var ret Comment
		return ret
	}
	return *o.RefComment
}

// GetRefCommentOk returns a tuple with the RefComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetRefCommentOk() (*Comment, bool) {
	if o == nil || o.RefComment == nil {
		return nil, false
	}
	return o.RefComment, true
}

// HasRefComment returns a boolean if a field has been set.
func (o *TimelineComment) HasRefComment() bool {
	if o != nil && o.RefComment != nil {
		return true
	}

	return false
}

// SetRefComment gets a reference to the given Comment and assigns it to the RefComment field.
func (o *TimelineComment) SetRefComment(v Comment) {
	o.RefComment = &v
}

// GetRefCommitSha returns the RefCommitSha field value if set, zero value otherwise.
func (o *TimelineComment) GetRefCommitSha() string {
	if o == nil || o.RefCommitSha == nil {
		var ret string
		return ret
	}
	return *o.RefCommitSha
}

// GetRefCommitShaOk returns a tuple with the RefCommitSha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetRefCommitShaOk() (*string, bool) {
	if o == nil || o.RefCommitSha == nil {
		return nil, false
	}
	return o.RefCommitSha, true
}

// HasRefCommitSha returns a boolean if a field has been set.
func (o *TimelineComment) HasRefCommitSha() bool {
	if o != nil && o.RefCommitSha != nil {
		return true
	}

	return false
}

// SetRefCommitSha gets a reference to the given string and assigns it to the RefCommitSha field.
func (o *TimelineComment) SetRefCommitSha(v string) {
	o.RefCommitSha = &v
}

// GetRefIssue returns the RefIssue field value if set, zero value otherwise.
func (o *TimelineComment) GetRefIssue() Issue {
	if o == nil || o.RefIssue == nil {
		var ret Issue
		return ret
	}
	return *o.RefIssue
}

// GetRefIssueOk returns a tuple with the RefIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetRefIssueOk() (*Issue, bool) {
	if o == nil || o.RefIssue == nil {
		return nil, false
	}
	return o.RefIssue, true
}

// HasRefIssue returns a boolean if a field has been set.
func (o *TimelineComment) HasRefIssue() bool {
	if o != nil && o.RefIssue != nil {
		return true
	}

	return false
}

// SetRefIssue gets a reference to the given Issue and assigns it to the RefIssue field.
func (o *TimelineComment) SetRefIssue(v Issue) {
	o.RefIssue = &v
}

// GetRemovedAssignee returns the RemovedAssignee field value if set, zero value otherwise.
func (o *TimelineComment) GetRemovedAssignee() bool {
	if o == nil || o.RemovedAssignee == nil {
		var ret bool
		return ret
	}
	return *o.RemovedAssignee
}

// GetRemovedAssigneeOk returns a tuple with the RemovedAssignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetRemovedAssigneeOk() (*bool, bool) {
	if o == nil || o.RemovedAssignee == nil {
		return nil, false
	}
	return o.RemovedAssignee, true
}

// HasRemovedAssignee returns a boolean if a field has been set.
func (o *TimelineComment) HasRemovedAssignee() bool {
	if o != nil && o.RemovedAssignee != nil {
		return true
	}

	return false
}

// SetRemovedAssignee gets a reference to the given bool and assigns it to the RemovedAssignee field.
func (o *TimelineComment) SetRemovedAssignee(v bool) {
	o.RemovedAssignee = &v
}

// GetResolveDoer returns the ResolveDoer field value if set, zero value otherwise.
func (o *TimelineComment) GetResolveDoer() User {
	if o == nil || o.ResolveDoer == nil {
		var ret User
		return ret
	}
	return *o.ResolveDoer
}

// GetResolveDoerOk returns a tuple with the ResolveDoer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetResolveDoerOk() (*User, bool) {
	if o == nil || o.ResolveDoer == nil {
		return nil, false
	}
	return o.ResolveDoer, true
}

// HasResolveDoer returns a boolean if a field has been set.
func (o *TimelineComment) HasResolveDoer() bool {
	if o != nil && o.ResolveDoer != nil {
		return true
	}

	return false
}

// SetResolveDoer gets a reference to the given User and assigns it to the ResolveDoer field.
func (o *TimelineComment) SetResolveDoer(v User) {
	o.ResolveDoer = &v
}

// GetReviewId returns the ReviewId field value if set, zero value otherwise.
func (o *TimelineComment) GetReviewId() int64 {
	if o == nil || o.ReviewId == nil {
		var ret int64
		return ret
	}
	return *o.ReviewId
}

// GetReviewIdOk returns a tuple with the ReviewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetReviewIdOk() (*int64, bool) {
	if o == nil || o.ReviewId == nil {
		return nil, false
	}
	return o.ReviewId, true
}

// HasReviewId returns a boolean if a field has been set.
func (o *TimelineComment) HasReviewId() bool {
	if o != nil && o.ReviewId != nil {
		return true
	}

	return false
}

// SetReviewId gets a reference to the given int64 and assigns it to the ReviewId field.
func (o *TimelineComment) SetReviewId(v int64) {
	o.ReviewId = &v
}

// GetTrackedTime returns the TrackedTime field value if set, zero value otherwise.
func (o *TimelineComment) GetTrackedTime() TrackedTime {
	if o == nil || o.TrackedTime == nil {
		var ret TrackedTime
		return ret
	}
	return *o.TrackedTime
}

// GetTrackedTimeOk returns a tuple with the TrackedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetTrackedTimeOk() (*TrackedTime, bool) {
	if o == nil || o.TrackedTime == nil {
		return nil, false
	}
	return o.TrackedTime, true
}

// HasTrackedTime returns a boolean if a field has been set.
func (o *TimelineComment) HasTrackedTime() bool {
	if o != nil && o.TrackedTime != nil {
		return true
	}

	return false
}

// SetTrackedTime gets a reference to the given TrackedTime and assigns it to the TrackedTime field.
func (o *TimelineComment) SetTrackedTime(v TrackedTime) {
	o.TrackedTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TimelineComment) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TimelineComment) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TimelineComment) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TimelineComment) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TimelineComment) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TimelineComment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *TimelineComment) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineComment) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *TimelineComment) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *TimelineComment) SetUser(v User) {
	o.User = &v
}

func (o TimelineComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assignee != nil {
		toSerialize["assignee"] = o.Assignee
	}
	if o.AssigneeTeam != nil {
		toSerialize["assignee_team"] = o.AssigneeTeam
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.DependentIssue != nil {
		toSerialize["dependent_issue"] = o.DependentIssue
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IssueUrl != nil {
		toSerialize["issue_url"] = o.IssueUrl
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Milestone != nil {
		toSerialize["milestone"] = o.Milestone
	}
	if o.NewRef != nil {
		toSerialize["new_ref"] = o.NewRef
	}
	if o.NewTitle != nil {
		toSerialize["new_title"] = o.NewTitle
	}
	if o.OldMilestone != nil {
		toSerialize["old_milestone"] = o.OldMilestone
	}
	if o.OldProjectId != nil {
		toSerialize["old_project_id"] = o.OldProjectId
	}
	if o.OldRef != nil {
		toSerialize["old_ref"] = o.OldRef
	}
	if o.OldTitle != nil {
		toSerialize["old_title"] = o.OldTitle
	}
	if o.ProjectId != nil {
		toSerialize["project_id"] = o.ProjectId
	}
	if o.PullRequestUrl != nil {
		toSerialize["pull_request_url"] = o.PullRequestUrl
	}
	if o.RefAction != nil {
		toSerialize["ref_action"] = o.RefAction
	}
	if o.RefComment != nil {
		toSerialize["ref_comment"] = o.RefComment
	}
	if o.RefCommitSha != nil {
		toSerialize["ref_commit_sha"] = o.RefCommitSha
	}
	if o.RefIssue != nil {
		toSerialize["ref_issue"] = o.RefIssue
	}
	if o.RemovedAssignee != nil {
		toSerialize["removed_assignee"] = o.RemovedAssignee
	}
	if o.ResolveDoer != nil {
		toSerialize["resolve_doer"] = o.ResolveDoer
	}
	if o.ReviewId != nil {
		toSerialize["review_id"] = o.ReviewId
	}
	if o.TrackedTime != nil {
		toSerialize["tracked_time"] = o.TrackedTime
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableTimelineComment struct {
	value *TimelineComment
	isSet bool
}

func (v NullableTimelineComment) Get() *TimelineComment {
	return v.value
}

func (v *NullableTimelineComment) Set(val *TimelineComment) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineComment) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineComment(val *TimelineComment) *NullableTimelineComment {
	return &NullableTimelineComment{value: val, isSet: true}
}

func (v NullableTimelineComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


