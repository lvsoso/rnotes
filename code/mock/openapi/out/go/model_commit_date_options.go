/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CommitDateOptions CommitDateOptions store dates for GIT_AUTHOR_DATE and GIT_COMMITTER_DATE
type CommitDateOptions struct {
	Author *time.Time `json:"author,omitempty"`
	Committer *time.Time `json:"committer,omitempty"`
}

// NewCommitDateOptions instantiates a new CommitDateOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitDateOptions() *CommitDateOptions {
	this := CommitDateOptions{}
	return &this
}

// NewCommitDateOptionsWithDefaults instantiates a new CommitDateOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitDateOptionsWithDefaults() *CommitDateOptions {
	this := CommitDateOptions{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CommitDateOptions) GetAuthor() time.Time {
	if o == nil || o.Author == nil {
		var ret time.Time
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitDateOptions) GetAuthorOk() (*time.Time, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CommitDateOptions) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given time.Time and assigns it to the Author field.
func (o *CommitDateOptions) SetAuthor(v time.Time) {
	o.Author = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *CommitDateOptions) GetCommitter() time.Time {
	if o == nil || o.Committer == nil {
		var ret time.Time
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitDateOptions) GetCommitterOk() (*time.Time, bool) {
	if o == nil || o.Committer == nil {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *CommitDateOptions) HasCommitter() bool {
	if o != nil && o.Committer != nil {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given time.Time and assigns it to the Committer field.
func (o *CommitDateOptions) SetCommitter(v time.Time) {
	o.Committer = &v
}

func (o CommitDateOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Committer != nil {
		toSerialize["committer"] = o.Committer
	}
	return json.Marshal(toSerialize)
}

type NullableCommitDateOptions struct {
	value *CommitDateOptions
	isSet bool
}

func (v NullableCommitDateOptions) Get() *CommitDateOptions {
	return v.value
}

func (v *NullableCommitDateOptions) Set(val *CommitDateOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitDateOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitDateOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitDateOptions(val *CommitDateOptions) *NullableCommitDateOptions {
	return &NullableCommitDateOptions{value: val, isSet: true}
}

func (v NullableCommitDateOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitDateOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


