/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MarkdownOption MarkdownOption markdown options
type MarkdownOption struct {
	// Context to render  in: body
	Context *string `json:"Context,omitempty"`
	// Mode to render (comment, gfm, markdown)  in: body
	Mode *string `json:"Mode,omitempty"`
	// Text markdown to render  in: body
	Text *string `json:"Text,omitempty"`
	// Is it a wiki page ?  in: body
	Wiki *bool `json:"Wiki,omitempty"`
}

// NewMarkdownOption instantiates a new MarkdownOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkdownOption() *MarkdownOption {
	this := MarkdownOption{}
	return &this
}

// NewMarkdownOptionWithDefaults instantiates a new MarkdownOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkdownOptionWithDefaults() *MarkdownOption {
	this := MarkdownOption{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *MarkdownOption) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkdownOption) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *MarkdownOption) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *MarkdownOption) SetContext(v string) {
	o.Context = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *MarkdownOption) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkdownOption) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *MarkdownOption) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *MarkdownOption) SetMode(v string) {
	o.Mode = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *MarkdownOption) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkdownOption) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *MarkdownOption) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *MarkdownOption) SetText(v string) {
	o.Text = &v
}

// GetWiki returns the Wiki field value if set, zero value otherwise.
func (o *MarkdownOption) GetWiki() bool {
	if o == nil || o.Wiki == nil {
		var ret bool
		return ret
	}
	return *o.Wiki
}

// GetWikiOk returns a tuple with the Wiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarkdownOption) GetWikiOk() (*bool, bool) {
	if o == nil || o.Wiki == nil {
		return nil, false
	}
	return o.Wiki, true
}

// HasWiki returns a boolean if a field has been set.
func (o *MarkdownOption) HasWiki() bool {
	if o != nil && o.Wiki != nil {
		return true
	}

	return false
}

// SetWiki gets a reference to the given bool and assigns it to the Wiki field.
func (o *MarkdownOption) SetWiki(v bool) {
	o.Wiki = &v
}

func (o MarkdownOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["Context"] = o.Context
	}
	if o.Mode != nil {
		toSerialize["Mode"] = o.Mode
	}
	if o.Text != nil {
		toSerialize["Text"] = o.Text
	}
	if o.Wiki != nil {
		toSerialize["Wiki"] = o.Wiki
	}
	return json.Marshal(toSerialize)
}

type NullableMarkdownOption struct {
	value *MarkdownOption
	isSet bool
}

func (v NullableMarkdownOption) Get() *MarkdownOption {
	return v.value
}

func (v *NullableMarkdownOption) Set(val *MarkdownOption) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkdownOption) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkdownOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkdownOption(val *MarkdownOption) *NullableMarkdownOption {
	return &NullableMarkdownOption{value: val, isSet: true}
}

func (v NullableMarkdownOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkdownOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


