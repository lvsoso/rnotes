/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Issue Issue represents an issue in a repository
type Issue struct {
	Assets *[]Attachment `json:"assets,omitempty"`
	Assignee *User `json:"assignee,omitempty"`
	Assignees *[]User `json:"assignees,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *time.Time `json:"closed_at,omitempty"`
	Comments *int64 `json:"comments,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DueDate *time.Time `json:"due_date,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IsLocked *bool `json:"is_locked,omitempty"`
	Labels *[]Label `json:"labels,omitempty"`
	Milestone *Milestone `json:"milestone,omitempty"`
	Number *int64 `json:"number,omitempty"`
	OriginalAuthor *string `json:"original_author,omitempty"`
	OriginalAuthorId *int64 `json:"original_author_id,omitempty"`
	PinOrder *int64 `json:"pin_order,omitempty"`
	PullRequest *PullRequestMeta `json:"pull_request,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repository *RepositoryMeta `json:"repository,omitempty"`
	// StateType issue state type
	State *string `json:"state,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
	User *User `json:"user,omitempty"`
}

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue() *Issue {
	this := Issue{}
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *Issue) GetAssets() []Attachment {
	if o == nil || o.Assets == nil {
		var ret []Attachment
		return ret
	}
	return *o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetAssetsOk() (*[]Attachment, bool) {
	if o == nil || o.Assets == nil {
		return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *Issue) HasAssets() bool {
	if o != nil && o.Assets != nil {
		return true
	}

	return false
}

// SetAssets gets a reference to the given []Attachment and assigns it to the Assets field.
func (o *Issue) SetAssets(v []Attachment) {
	o.Assets = &v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *Issue) GetAssignee() User {
	if o == nil || o.Assignee == nil {
		var ret User
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetAssigneeOk() (*User, bool) {
	if o == nil || o.Assignee == nil {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *Issue) HasAssignee() bool {
	if o != nil && o.Assignee != nil {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given User and assigns it to the Assignee field.
func (o *Issue) SetAssignee(v User) {
	o.Assignee = &v
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *Issue) GetAssignees() []User {
	if o == nil || o.Assignees == nil {
		var ret []User
		return ret
	}
	return *o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetAssigneesOk() (*[]User, bool) {
	if o == nil || o.Assignees == nil {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *Issue) HasAssignees() bool {
	if o != nil && o.Assignees != nil {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []User and assigns it to the Assignees field.
func (o *Issue) SetAssignees(v []User) {
	o.Assignees = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *Issue) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *Issue) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *Issue) SetBody(v string) {
	o.Body = &v
}

// GetClosedAt returns the ClosedAt field value if set, zero value otherwise.
func (o *Issue) GetClosedAt() time.Time {
	if o == nil || o.ClosedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetClosedAtOk() (*time.Time, bool) {
	if o == nil || o.ClosedAt == nil {
		return nil, false
	}
	return o.ClosedAt, true
}

// HasClosedAt returns a boolean if a field has been set.
func (o *Issue) HasClosedAt() bool {
	if o != nil && o.ClosedAt != nil {
		return true
	}

	return false
}

// SetClosedAt gets a reference to the given time.Time and assigns it to the ClosedAt field.
func (o *Issue) SetClosedAt(v time.Time) {
	o.ClosedAt = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *Issue) GetComments() int64 {
	if o == nil || o.Comments == nil {
		var ret int64
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetCommentsOk() (*int64, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *Issue) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given int64 and assigns it to the Comments field.
func (o *Issue) SetComments(v int64) {
	o.Comments = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Issue) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Issue) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Issue) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *Issue) GetDueDate() time.Time {
	if o == nil || o.DueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetDueDateOk() (*time.Time, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *Issue) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *Issue) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *Issue) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *Issue) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *Issue) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Issue) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Issue) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Issue) SetId(v int64) {
	o.Id = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *Issue) GetIsLocked() bool {
	if o == nil || o.IsLocked == nil {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIsLockedOk() (*bool, bool) {
	if o == nil || o.IsLocked == nil {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *Issue) HasIsLocked() bool {
	if o != nil && o.IsLocked != nil {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *Issue) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Issue) GetLabels() []Label {
	if o == nil || o.Labels == nil {
		var ret []Label
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetLabelsOk() (*[]Label, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Issue) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *Issue) SetLabels(v []Label) {
	o.Labels = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise.
func (o *Issue) GetMilestone() Milestone {
	if o == nil || o.Milestone == nil {
		var ret Milestone
		return ret
	}
	return *o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetMilestoneOk() (*Milestone, bool) {
	if o == nil || o.Milestone == nil {
		return nil, false
	}
	return o.Milestone, true
}

// HasMilestone returns a boolean if a field has been set.
func (o *Issue) HasMilestone() bool {
	if o != nil && o.Milestone != nil {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given Milestone and assigns it to the Milestone field.
func (o *Issue) SetMilestone(v Milestone) {
	o.Milestone = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *Issue) GetNumber() int64 {
	if o == nil || o.Number == nil {
		var ret int64
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetNumberOk() (*int64, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *Issue) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int64 and assigns it to the Number field.
func (o *Issue) SetNumber(v int64) {
	o.Number = &v
}

// GetOriginalAuthor returns the OriginalAuthor field value if set, zero value otherwise.
func (o *Issue) GetOriginalAuthor() string {
	if o == nil || o.OriginalAuthor == nil {
		var ret string
		return ret
	}
	return *o.OriginalAuthor
}

// GetOriginalAuthorOk returns a tuple with the OriginalAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetOriginalAuthorOk() (*string, bool) {
	if o == nil || o.OriginalAuthor == nil {
		return nil, false
	}
	return o.OriginalAuthor, true
}

// HasOriginalAuthor returns a boolean if a field has been set.
func (o *Issue) HasOriginalAuthor() bool {
	if o != nil && o.OriginalAuthor != nil {
		return true
	}

	return false
}

// SetOriginalAuthor gets a reference to the given string and assigns it to the OriginalAuthor field.
func (o *Issue) SetOriginalAuthor(v string) {
	o.OriginalAuthor = &v
}

// GetOriginalAuthorId returns the OriginalAuthorId field value if set, zero value otherwise.
func (o *Issue) GetOriginalAuthorId() int64 {
	if o == nil || o.OriginalAuthorId == nil {
		var ret int64
		return ret
	}
	return *o.OriginalAuthorId
}

// GetOriginalAuthorIdOk returns a tuple with the OriginalAuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetOriginalAuthorIdOk() (*int64, bool) {
	if o == nil || o.OriginalAuthorId == nil {
		return nil, false
	}
	return o.OriginalAuthorId, true
}

// HasOriginalAuthorId returns a boolean if a field has been set.
func (o *Issue) HasOriginalAuthorId() bool {
	if o != nil && o.OriginalAuthorId != nil {
		return true
	}

	return false
}

// SetOriginalAuthorId gets a reference to the given int64 and assigns it to the OriginalAuthorId field.
func (o *Issue) SetOriginalAuthorId(v int64) {
	o.OriginalAuthorId = &v
}

// GetPinOrder returns the PinOrder field value if set, zero value otherwise.
func (o *Issue) GetPinOrder() int64 {
	if o == nil || o.PinOrder == nil {
		var ret int64
		return ret
	}
	return *o.PinOrder
}

// GetPinOrderOk returns a tuple with the PinOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetPinOrderOk() (*int64, bool) {
	if o == nil || o.PinOrder == nil {
		return nil, false
	}
	return o.PinOrder, true
}

// HasPinOrder returns a boolean if a field has been set.
func (o *Issue) HasPinOrder() bool {
	if o != nil && o.PinOrder != nil {
		return true
	}

	return false
}

// SetPinOrder gets a reference to the given int64 and assigns it to the PinOrder field.
func (o *Issue) SetPinOrder(v int64) {
	o.PinOrder = &v
}

// GetPullRequest returns the PullRequest field value if set, zero value otherwise.
func (o *Issue) GetPullRequest() PullRequestMeta {
	if o == nil || o.PullRequest == nil {
		var ret PullRequestMeta
		return ret
	}
	return *o.PullRequest
}

// GetPullRequestOk returns a tuple with the PullRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetPullRequestOk() (*PullRequestMeta, bool) {
	if o == nil || o.PullRequest == nil {
		return nil, false
	}
	return o.PullRequest, true
}

// HasPullRequest returns a boolean if a field has been set.
func (o *Issue) HasPullRequest() bool {
	if o != nil && o.PullRequest != nil {
		return true
	}

	return false
}

// SetPullRequest gets a reference to the given PullRequestMeta and assigns it to the PullRequest field.
func (o *Issue) SetPullRequest(v PullRequestMeta) {
	o.PullRequest = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Issue) GetRef() string {
	if o == nil || o.Ref == nil {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetRefOk() (*string, bool) {
	if o == nil || o.Ref == nil {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Issue) HasRef() bool {
	if o != nil && o.Ref != nil {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Issue) SetRef(v string) {
	o.Ref = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *Issue) GetRepository() RepositoryMeta {
	if o == nil || o.Repository == nil {
		var ret RepositoryMeta
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetRepositoryOk() (*RepositoryMeta, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *Issue) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given RepositoryMeta and assigns it to the Repository field.
func (o *Issue) SetRepository(v RepositoryMeta) {
	o.Repository = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Issue) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Issue) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Issue) SetState(v string) {
	o.State = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Issue) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Issue) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Issue) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Issue) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Issue) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Issue) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Issue) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Issue) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Issue) SetUrl(v string) {
	o.Url = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Issue) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Issue) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *Issue) SetUser(v User) {
	o.User = &v
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assets != nil {
		toSerialize["assets"] = o.Assets
	}
	if o.Assignee != nil {
		toSerialize["assignee"] = o.Assignee
	}
	if o.Assignees != nil {
		toSerialize["assignees"] = o.Assignees
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.ClosedAt != nil {
		toSerialize["closed_at"] = o.ClosedAt
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.DueDate != nil {
		toSerialize["due_date"] = o.DueDate
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsLocked != nil {
		toSerialize["is_locked"] = o.IsLocked
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Milestone != nil {
		toSerialize["milestone"] = o.Milestone
	}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.OriginalAuthor != nil {
		toSerialize["original_author"] = o.OriginalAuthor
	}
	if o.OriginalAuthorId != nil {
		toSerialize["original_author_id"] = o.OriginalAuthorId
	}
	if o.PinOrder != nil {
		toSerialize["pin_order"] = o.PinOrder
	}
	if o.PullRequest != nil {
		toSerialize["pull_request"] = o.PullRequest
	}
	if o.Ref != nil {
		toSerialize["ref"] = o.Ref
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


