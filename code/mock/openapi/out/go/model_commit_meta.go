/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CommitMeta struct for CommitMeta
type CommitMeta struct {
	Created *time.Time `json:"created,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewCommitMeta instantiates a new CommitMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitMeta() *CommitMeta {
	this := CommitMeta{}
	return &this
}

// NewCommitMetaWithDefaults instantiates a new CommitMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitMetaWithDefaults() *CommitMeta {
	this := CommitMeta{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CommitMeta) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CommitMeta) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CommitMeta) SetCreated(v time.Time) {
	o.Created = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *CommitMeta) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *CommitMeta) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *CommitMeta) SetSha(v string) {
	o.Sha = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CommitMeta) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CommitMeta) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CommitMeta) SetUrl(v string) {
	o.Url = &v
}

func (o CommitMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCommitMeta struct {
	value *CommitMeta
	isSet bool
}

func (v NullableCommitMeta) Get() *CommitMeta {
	return v.value
}

func (v *NullableCommitMeta) Set(val *CommitMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitMeta(val *CommitMeta) *NullableCommitMeta {
	return &NullableCommitMeta{value: val, isSet: true}
}

func (v NullableCommitMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


