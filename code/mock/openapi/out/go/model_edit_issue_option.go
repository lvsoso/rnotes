/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// EditIssueOption EditIssueOption options for editing an issue
type EditIssueOption struct {
	// deprecated
	Assignee *string `json:"assignee,omitempty"`
	Assignees *[]string `json:"assignees,omitempty"`
	Body *string `json:"body,omitempty"`
	DueDate *time.Time `json:"due_date,omitempty"`
	Milestone *int64 `json:"milestone,omitempty"`
	Ref *string `json:"ref,omitempty"`
	State *string `json:"state,omitempty"`
	Title *string `json:"title,omitempty"`
	UnsetDueDate *bool `json:"unset_due_date,omitempty"`
}

// NewEditIssueOption instantiates a new EditIssueOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditIssueOption() *EditIssueOption {
	this := EditIssueOption{}
	return &this
}

// NewEditIssueOptionWithDefaults instantiates a new EditIssueOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditIssueOptionWithDefaults() *EditIssueOption {
	this := EditIssueOption{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise.
func (o *EditIssueOption) GetAssignee() string {
	if o == nil || o.Assignee == nil {
		var ret string
		return ret
	}
	return *o.Assignee
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetAssigneeOk() (*string, bool) {
	if o == nil || o.Assignee == nil {
		return nil, false
	}
	return o.Assignee, true
}

// HasAssignee returns a boolean if a field has been set.
func (o *EditIssueOption) HasAssignee() bool {
	if o != nil && o.Assignee != nil {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given string and assigns it to the Assignee field.
func (o *EditIssueOption) SetAssignee(v string) {
	o.Assignee = &v
}

// GetAssignees returns the Assignees field value if set, zero value otherwise.
func (o *EditIssueOption) GetAssignees() []string {
	if o == nil || o.Assignees == nil {
		var ret []string
		return ret
	}
	return *o.Assignees
}

// GetAssigneesOk returns a tuple with the Assignees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetAssigneesOk() (*[]string, bool) {
	if o == nil || o.Assignees == nil {
		return nil, false
	}
	return o.Assignees, true
}

// HasAssignees returns a boolean if a field has been set.
func (o *EditIssueOption) HasAssignees() bool {
	if o != nil && o.Assignees != nil {
		return true
	}

	return false
}

// SetAssignees gets a reference to the given []string and assigns it to the Assignees field.
func (o *EditIssueOption) SetAssignees(v []string) {
	o.Assignees = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *EditIssueOption) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *EditIssueOption) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *EditIssueOption) SetBody(v string) {
	o.Body = &v
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *EditIssueOption) GetDueDate() time.Time {
	if o == nil || o.DueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetDueDateOk() (*time.Time, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *EditIssueOption) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *EditIssueOption) SetDueDate(v time.Time) {
	o.DueDate = &v
}

// GetMilestone returns the Milestone field value if set, zero value otherwise.
func (o *EditIssueOption) GetMilestone() int64 {
	if o == nil || o.Milestone == nil {
		var ret int64
		return ret
	}
	return *o.Milestone
}

// GetMilestoneOk returns a tuple with the Milestone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetMilestoneOk() (*int64, bool) {
	if o == nil || o.Milestone == nil {
		return nil, false
	}
	return o.Milestone, true
}

// HasMilestone returns a boolean if a field has been set.
func (o *EditIssueOption) HasMilestone() bool {
	if o != nil && o.Milestone != nil {
		return true
	}

	return false
}

// SetMilestone gets a reference to the given int64 and assigns it to the Milestone field.
func (o *EditIssueOption) SetMilestone(v int64) {
	o.Milestone = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *EditIssueOption) GetRef() string {
	if o == nil || o.Ref == nil {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetRefOk() (*string, bool) {
	if o == nil || o.Ref == nil {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *EditIssueOption) HasRef() bool {
	if o != nil && o.Ref != nil {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *EditIssueOption) SetRef(v string) {
	o.Ref = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *EditIssueOption) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *EditIssueOption) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *EditIssueOption) SetState(v string) {
	o.State = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EditIssueOption) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EditIssueOption) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EditIssueOption) SetTitle(v string) {
	o.Title = &v
}

// GetUnsetDueDate returns the UnsetDueDate field value if set, zero value otherwise.
func (o *EditIssueOption) GetUnsetDueDate() bool {
	if o == nil || o.UnsetDueDate == nil {
		var ret bool
		return ret
	}
	return *o.UnsetDueDate
}

// GetUnsetDueDateOk returns a tuple with the UnsetDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditIssueOption) GetUnsetDueDateOk() (*bool, bool) {
	if o == nil || o.UnsetDueDate == nil {
		return nil, false
	}
	return o.UnsetDueDate, true
}

// HasUnsetDueDate returns a boolean if a field has been set.
func (o *EditIssueOption) HasUnsetDueDate() bool {
	if o != nil && o.UnsetDueDate != nil {
		return true
	}

	return false
}

// SetUnsetDueDate gets a reference to the given bool and assigns it to the UnsetDueDate field.
func (o *EditIssueOption) SetUnsetDueDate(v bool) {
	o.UnsetDueDate = &v
}

func (o EditIssueOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assignee != nil {
		toSerialize["assignee"] = o.Assignee
	}
	if o.Assignees != nil {
		toSerialize["assignees"] = o.Assignees
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.DueDate != nil {
		toSerialize["due_date"] = o.DueDate
	}
	if o.Milestone != nil {
		toSerialize["milestone"] = o.Milestone
	}
	if o.Ref != nil {
		toSerialize["ref"] = o.Ref
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.UnsetDueDate != nil {
		toSerialize["unset_due_date"] = o.UnsetDueDate
	}
	return json.Marshal(toSerialize)
}

type NullableEditIssueOption struct {
	value *EditIssueOption
	isSet bool
}

func (v NullableEditIssueOption) Get() *EditIssueOption {
	return v.value
}

func (v *NullableEditIssueOption) Set(val *EditIssueOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditIssueOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditIssueOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditIssueOption(val *EditIssueOption) *NullableEditIssueOption {
	return &NullableEditIssueOption{value: val, isSet: true}
}

func (v NullableEditIssueOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditIssueOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


