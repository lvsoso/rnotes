/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WikiCommit WikiCommit page commit/revision
type WikiCommit struct {
	Author *CommitUser `json:"author,omitempty"`
	Commiter *CommitUser `json:"commiter,omitempty"`
	Message *string `json:"message,omitempty"`
	Sha *string `json:"sha,omitempty"`
}

// NewWikiCommit instantiates a new WikiCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikiCommit() *WikiCommit {
	this := WikiCommit{}
	return &this
}

// NewWikiCommitWithDefaults instantiates a new WikiCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikiCommitWithDefaults() *WikiCommit {
	this := WikiCommit{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *WikiCommit) GetAuthor() CommitUser {
	if o == nil || o.Author == nil {
		var ret CommitUser
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiCommit) GetAuthorOk() (*CommitUser, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *WikiCommit) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given CommitUser and assigns it to the Author field.
func (o *WikiCommit) SetAuthor(v CommitUser) {
	o.Author = &v
}

// GetCommiter returns the Commiter field value if set, zero value otherwise.
func (o *WikiCommit) GetCommiter() CommitUser {
	if o == nil || o.Commiter == nil {
		var ret CommitUser
		return ret
	}
	return *o.Commiter
}

// GetCommiterOk returns a tuple with the Commiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiCommit) GetCommiterOk() (*CommitUser, bool) {
	if o == nil || o.Commiter == nil {
		return nil, false
	}
	return o.Commiter, true
}

// HasCommiter returns a boolean if a field has been set.
func (o *WikiCommit) HasCommiter() bool {
	if o != nil && o.Commiter != nil {
		return true
	}

	return false
}

// SetCommiter gets a reference to the given CommitUser and assigns it to the Commiter field.
func (o *WikiCommit) SetCommiter(v CommitUser) {
	o.Commiter = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *WikiCommit) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiCommit) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *WikiCommit) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *WikiCommit) SetMessage(v string) {
	o.Message = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *WikiCommit) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiCommit) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *WikiCommit) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *WikiCommit) SetSha(v string) {
	o.Sha = &v
}

func (o WikiCommit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Commiter != nil {
		toSerialize["commiter"] = o.Commiter
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	return json.Marshal(toSerialize)
}

type NullableWikiCommit struct {
	value *WikiCommit
	isSet bool
}

func (v NullableWikiCommit) Get() *WikiCommit {
	return v.value
}

func (v *NullableWikiCommit) Set(val *WikiCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiCommit(val *WikiCommit) *NullableWikiCommit {
	return &NullableWikiCommit{value: val, isSet: true}
}

func (v NullableWikiCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


