/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Repository Repository represents a repository
type Repository struct {
	AllowFastForwardOnlyMerge *bool `json:"allow_fast_forward_only_merge,omitempty"`
	AllowMergeCommits *bool `json:"allow_merge_commits,omitempty"`
	AllowRebase *bool `json:"allow_rebase,omitempty"`
	AllowRebaseExplicit *bool `json:"allow_rebase_explicit,omitempty"`
	AllowRebaseUpdate *bool `json:"allow_rebase_update,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	ArchivedAt *time.Time `json:"archived_at,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	CloneUrl *string `json:"clone_url,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DefaultAllowMaintainerEdit *bool `json:"default_allow_maintainer_edit,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DefaultDeleteBranchAfterMerge *bool `json:"default_delete_branch_after_merge,omitempty"`
	DefaultMergeStyle *string `json:"default_merge_style,omitempty"`
	Description *string `json:"description,omitempty"`
	Empty *bool `json:"empty,omitempty"`
	ExternalTracker *ExternalTracker `json:"external_tracker,omitempty"`
	ExternalWiki *ExternalWiki `json:"external_wiki,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksCount *int64 `json:"forks_count,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	HasActions *bool `json:"has_actions,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPackages *bool `json:"has_packages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasPullRequests *bool `json:"has_pull_requests,omitempty"`
	HasReleases *bool `json:"has_releases,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IgnoreWhitespaceConflicts *bool `json:"ignore_whitespace_conflicts,omitempty"`
	Internal *bool `json:"internal,omitempty"`
	InternalTracker *InternalTracker `json:"internal_tracker,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesUrl *string `json:"languages_url,omitempty"`
	Link *string `json:"link,omitempty"`
	Mirror *bool `json:"mirror,omitempty"`
	MirrorInterval *string `json:"mirror_interval,omitempty"`
	MirrorUpdated *time.Time `json:"mirror_updated,omitempty"`
	Name *string `json:"name,omitempty"`
	// ObjectFormatName of the underlying git repository
	ObjectFormatName *string `json:"object_format_name,omitempty"`
	OpenIssuesCount *int64 `json:"open_issues_count,omitempty"`
	OpenPrCounter *int64 `json:"open_pr_counter,omitempty"`
	OriginalUrl *string `json:"original_url,omitempty"`
	Owner *User `json:"owner,omitempty"`
	Parent *Repository `json:"parent,omitempty"`
	Permissions *Permission `json:"permissions,omitempty"`
	Private *bool `json:"private,omitempty"`
	ReleaseCounter *int64 `json:"release_counter,omitempty"`
	RepoTransfer *RepoTransfer `json:"repo_transfer,omitempty"`
	Size *int64 `json:"size,omitempty"`
	SshUrl *string `json:"ssh_url,omitempty"`
	StarsCount *int64 `json:"stars_count,omitempty"`
	Template *bool `json:"template,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
	WatchersCount *int64 `json:"watchers_count,omitempty"`
	Website *string `json:"website,omitempty"`
}

// NewRepository instantiates a new Repository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepository() *Repository {
	this := Repository{}
	return &this
}

// NewRepositoryWithDefaults instantiates a new Repository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithDefaults() *Repository {
	this := Repository{}
	return &this
}

// GetAllowFastForwardOnlyMerge returns the AllowFastForwardOnlyMerge field value if set, zero value otherwise.
func (o *Repository) GetAllowFastForwardOnlyMerge() bool {
	if o == nil || o.AllowFastForwardOnlyMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowFastForwardOnlyMerge
}

// GetAllowFastForwardOnlyMergeOk returns a tuple with the AllowFastForwardOnlyMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowFastForwardOnlyMergeOk() (*bool, bool) {
	if o == nil || o.AllowFastForwardOnlyMerge == nil {
		return nil, false
	}
	return o.AllowFastForwardOnlyMerge, true
}

// HasAllowFastForwardOnlyMerge returns a boolean if a field has been set.
func (o *Repository) HasAllowFastForwardOnlyMerge() bool {
	if o != nil && o.AllowFastForwardOnlyMerge != nil {
		return true
	}

	return false
}

// SetAllowFastForwardOnlyMerge gets a reference to the given bool and assigns it to the AllowFastForwardOnlyMerge field.
func (o *Repository) SetAllowFastForwardOnlyMerge(v bool) {
	o.AllowFastForwardOnlyMerge = &v
}

// GetAllowMergeCommits returns the AllowMergeCommits field value if set, zero value otherwise.
func (o *Repository) GetAllowMergeCommits() bool {
	if o == nil || o.AllowMergeCommits == nil {
		var ret bool
		return ret
	}
	return *o.AllowMergeCommits
}

// GetAllowMergeCommitsOk returns a tuple with the AllowMergeCommits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowMergeCommitsOk() (*bool, bool) {
	if o == nil || o.AllowMergeCommits == nil {
		return nil, false
	}
	return o.AllowMergeCommits, true
}

// HasAllowMergeCommits returns a boolean if a field has been set.
func (o *Repository) HasAllowMergeCommits() bool {
	if o != nil && o.AllowMergeCommits != nil {
		return true
	}

	return false
}

// SetAllowMergeCommits gets a reference to the given bool and assigns it to the AllowMergeCommits field.
func (o *Repository) SetAllowMergeCommits(v bool) {
	o.AllowMergeCommits = &v
}

// GetAllowRebase returns the AllowRebase field value if set, zero value otherwise.
func (o *Repository) GetAllowRebase() bool {
	if o == nil || o.AllowRebase == nil {
		var ret bool
		return ret
	}
	return *o.AllowRebase
}

// GetAllowRebaseOk returns a tuple with the AllowRebase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowRebaseOk() (*bool, bool) {
	if o == nil || o.AllowRebase == nil {
		return nil, false
	}
	return o.AllowRebase, true
}

// HasAllowRebase returns a boolean if a field has been set.
func (o *Repository) HasAllowRebase() bool {
	if o != nil && o.AllowRebase != nil {
		return true
	}

	return false
}

// SetAllowRebase gets a reference to the given bool and assigns it to the AllowRebase field.
func (o *Repository) SetAllowRebase(v bool) {
	o.AllowRebase = &v
}

// GetAllowRebaseExplicit returns the AllowRebaseExplicit field value if set, zero value otherwise.
func (o *Repository) GetAllowRebaseExplicit() bool {
	if o == nil || o.AllowRebaseExplicit == nil {
		var ret bool
		return ret
	}
	return *o.AllowRebaseExplicit
}

// GetAllowRebaseExplicitOk returns a tuple with the AllowRebaseExplicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowRebaseExplicitOk() (*bool, bool) {
	if o == nil || o.AllowRebaseExplicit == nil {
		return nil, false
	}
	return o.AllowRebaseExplicit, true
}

// HasAllowRebaseExplicit returns a boolean if a field has been set.
func (o *Repository) HasAllowRebaseExplicit() bool {
	if o != nil && o.AllowRebaseExplicit != nil {
		return true
	}

	return false
}

// SetAllowRebaseExplicit gets a reference to the given bool and assigns it to the AllowRebaseExplicit field.
func (o *Repository) SetAllowRebaseExplicit(v bool) {
	o.AllowRebaseExplicit = &v
}

// GetAllowRebaseUpdate returns the AllowRebaseUpdate field value if set, zero value otherwise.
func (o *Repository) GetAllowRebaseUpdate() bool {
	if o == nil || o.AllowRebaseUpdate == nil {
		var ret bool
		return ret
	}
	return *o.AllowRebaseUpdate
}

// GetAllowRebaseUpdateOk returns a tuple with the AllowRebaseUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowRebaseUpdateOk() (*bool, bool) {
	if o == nil || o.AllowRebaseUpdate == nil {
		return nil, false
	}
	return o.AllowRebaseUpdate, true
}

// HasAllowRebaseUpdate returns a boolean if a field has been set.
func (o *Repository) HasAllowRebaseUpdate() bool {
	if o != nil && o.AllowRebaseUpdate != nil {
		return true
	}

	return false
}

// SetAllowRebaseUpdate gets a reference to the given bool and assigns it to the AllowRebaseUpdate field.
func (o *Repository) SetAllowRebaseUpdate(v bool) {
	o.AllowRebaseUpdate = &v
}

// GetAllowSquashMerge returns the AllowSquashMerge field value if set, zero value otherwise.
func (o *Repository) GetAllowSquashMerge() bool {
	if o == nil || o.AllowSquashMerge == nil {
		var ret bool
		return ret
	}
	return *o.AllowSquashMerge
}

// GetAllowSquashMergeOk returns a tuple with the AllowSquashMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowSquashMergeOk() (*bool, bool) {
	if o == nil || o.AllowSquashMerge == nil {
		return nil, false
	}
	return o.AllowSquashMerge, true
}

// HasAllowSquashMerge returns a boolean if a field has been set.
func (o *Repository) HasAllowSquashMerge() bool {
	if o != nil && o.AllowSquashMerge != nil {
		return true
	}

	return false
}

// SetAllowSquashMerge gets a reference to the given bool and assigns it to the AllowSquashMerge field.
func (o *Repository) SetAllowSquashMerge(v bool) {
	o.AllowSquashMerge = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *Repository) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *Repository) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *Repository) SetArchived(v bool) {
	o.Archived = &v
}

// GetArchivedAt returns the ArchivedAt field value if set, zero value otherwise.
func (o *Repository) GetArchivedAt() time.Time {
	if o == nil || o.ArchivedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ArchivedAt
}

// GetArchivedAtOk returns a tuple with the ArchivedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetArchivedAtOk() (*time.Time, bool) {
	if o == nil || o.ArchivedAt == nil {
		return nil, false
	}
	return o.ArchivedAt, true
}

// HasArchivedAt returns a boolean if a field has been set.
func (o *Repository) HasArchivedAt() bool {
	if o != nil && o.ArchivedAt != nil {
		return true
	}

	return false
}

// SetArchivedAt gets a reference to the given time.Time and assigns it to the ArchivedAt field.
func (o *Repository) SetArchivedAt(v time.Time) {
	o.ArchivedAt = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *Repository) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl == nil {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAvatarUrlOk() (*string, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *Repository) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *Repository) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetCloneUrl returns the CloneUrl field value if set, zero value otherwise.
func (o *Repository) GetCloneUrl() string {
	if o == nil || o.CloneUrl == nil {
		var ret string
		return ret
	}
	return *o.CloneUrl
}

// GetCloneUrlOk returns a tuple with the CloneUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCloneUrlOk() (*string, bool) {
	if o == nil || o.CloneUrl == nil {
		return nil, false
	}
	return o.CloneUrl, true
}

// HasCloneUrl returns a boolean if a field has been set.
func (o *Repository) HasCloneUrl() bool {
	if o != nil && o.CloneUrl != nil {
		return true
	}

	return false
}

// SetCloneUrl gets a reference to the given string and assigns it to the CloneUrl field.
func (o *Repository) SetCloneUrl(v string) {
	o.CloneUrl = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Repository) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Repository) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Repository) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDefaultAllowMaintainerEdit returns the DefaultAllowMaintainerEdit field value if set, zero value otherwise.
func (o *Repository) GetDefaultAllowMaintainerEdit() bool {
	if o == nil || o.DefaultAllowMaintainerEdit == nil {
		var ret bool
		return ret
	}
	return *o.DefaultAllowMaintainerEdit
}

// GetDefaultAllowMaintainerEditOk returns a tuple with the DefaultAllowMaintainerEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDefaultAllowMaintainerEditOk() (*bool, bool) {
	if o == nil || o.DefaultAllowMaintainerEdit == nil {
		return nil, false
	}
	return o.DefaultAllowMaintainerEdit, true
}

// HasDefaultAllowMaintainerEdit returns a boolean if a field has been set.
func (o *Repository) HasDefaultAllowMaintainerEdit() bool {
	if o != nil && o.DefaultAllowMaintainerEdit != nil {
		return true
	}

	return false
}

// SetDefaultAllowMaintainerEdit gets a reference to the given bool and assigns it to the DefaultAllowMaintainerEdit field.
func (o *Repository) SetDefaultAllowMaintainerEdit(v bool) {
	o.DefaultAllowMaintainerEdit = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *Repository) GetDefaultBranch() string {
	if o == nil || o.DefaultBranch == nil {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDefaultBranchOk() (*string, bool) {
	if o == nil || o.DefaultBranch == nil {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *Repository) HasDefaultBranch() bool {
	if o != nil && o.DefaultBranch != nil {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *Repository) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetDefaultDeleteBranchAfterMerge returns the DefaultDeleteBranchAfterMerge field value if set, zero value otherwise.
func (o *Repository) GetDefaultDeleteBranchAfterMerge() bool {
	if o == nil || o.DefaultDeleteBranchAfterMerge == nil {
		var ret bool
		return ret
	}
	return *o.DefaultDeleteBranchAfterMerge
}

// GetDefaultDeleteBranchAfterMergeOk returns a tuple with the DefaultDeleteBranchAfterMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDefaultDeleteBranchAfterMergeOk() (*bool, bool) {
	if o == nil || o.DefaultDeleteBranchAfterMerge == nil {
		return nil, false
	}
	return o.DefaultDeleteBranchAfterMerge, true
}

// HasDefaultDeleteBranchAfterMerge returns a boolean if a field has been set.
func (o *Repository) HasDefaultDeleteBranchAfterMerge() bool {
	if o != nil && o.DefaultDeleteBranchAfterMerge != nil {
		return true
	}

	return false
}

// SetDefaultDeleteBranchAfterMerge gets a reference to the given bool and assigns it to the DefaultDeleteBranchAfterMerge field.
func (o *Repository) SetDefaultDeleteBranchAfterMerge(v bool) {
	o.DefaultDeleteBranchAfterMerge = &v
}

// GetDefaultMergeStyle returns the DefaultMergeStyle field value if set, zero value otherwise.
func (o *Repository) GetDefaultMergeStyle() string {
	if o == nil || o.DefaultMergeStyle == nil {
		var ret string
		return ret
	}
	return *o.DefaultMergeStyle
}

// GetDefaultMergeStyleOk returns a tuple with the DefaultMergeStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDefaultMergeStyleOk() (*string, bool) {
	if o == nil || o.DefaultMergeStyle == nil {
		return nil, false
	}
	return o.DefaultMergeStyle, true
}

// HasDefaultMergeStyle returns a boolean if a field has been set.
func (o *Repository) HasDefaultMergeStyle() bool {
	if o != nil && o.DefaultMergeStyle != nil {
		return true
	}

	return false
}

// SetDefaultMergeStyle gets a reference to the given string and assigns it to the DefaultMergeStyle field.
func (o *Repository) SetDefaultMergeStyle(v string) {
	o.DefaultMergeStyle = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Repository) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Repository) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Repository) SetDescription(v string) {
	o.Description = &v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *Repository) GetEmpty() bool {
	if o == nil || o.Empty == nil {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetEmptyOk() (*bool, bool) {
	if o == nil || o.Empty == nil {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *Repository) HasEmpty() bool {
	if o != nil && o.Empty != nil {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *Repository) SetEmpty(v bool) {
	o.Empty = &v
}

// GetExternalTracker returns the ExternalTracker field value if set, zero value otherwise.
func (o *Repository) GetExternalTracker() ExternalTracker {
	if o == nil || o.ExternalTracker == nil {
		var ret ExternalTracker
		return ret
	}
	return *o.ExternalTracker
}

// GetExternalTrackerOk returns a tuple with the ExternalTracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetExternalTrackerOk() (*ExternalTracker, bool) {
	if o == nil || o.ExternalTracker == nil {
		return nil, false
	}
	return o.ExternalTracker, true
}

// HasExternalTracker returns a boolean if a field has been set.
func (o *Repository) HasExternalTracker() bool {
	if o != nil && o.ExternalTracker != nil {
		return true
	}

	return false
}

// SetExternalTracker gets a reference to the given ExternalTracker and assigns it to the ExternalTracker field.
func (o *Repository) SetExternalTracker(v ExternalTracker) {
	o.ExternalTracker = &v
}

// GetExternalWiki returns the ExternalWiki field value if set, zero value otherwise.
func (o *Repository) GetExternalWiki() ExternalWiki {
	if o == nil || o.ExternalWiki == nil {
		var ret ExternalWiki
		return ret
	}
	return *o.ExternalWiki
}

// GetExternalWikiOk returns a tuple with the ExternalWiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetExternalWikiOk() (*ExternalWiki, bool) {
	if o == nil || o.ExternalWiki == nil {
		return nil, false
	}
	return o.ExternalWiki, true
}

// HasExternalWiki returns a boolean if a field has been set.
func (o *Repository) HasExternalWiki() bool {
	if o != nil && o.ExternalWiki != nil {
		return true
	}

	return false
}

// SetExternalWiki gets a reference to the given ExternalWiki and assigns it to the ExternalWiki field.
func (o *Repository) SetExternalWiki(v ExternalWiki) {
	o.ExternalWiki = &v
}

// GetFork returns the Fork field value if set, zero value otherwise.
func (o *Repository) GetFork() bool {
	if o == nil || o.Fork == nil {
		var ret bool
		return ret
	}
	return *o.Fork
}

// GetForkOk returns a tuple with the Fork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetForkOk() (*bool, bool) {
	if o == nil || o.Fork == nil {
		return nil, false
	}
	return o.Fork, true
}

// HasFork returns a boolean if a field has been set.
func (o *Repository) HasFork() bool {
	if o != nil && o.Fork != nil {
		return true
	}

	return false
}

// SetFork gets a reference to the given bool and assigns it to the Fork field.
func (o *Repository) SetFork(v bool) {
	o.Fork = &v
}

// GetForksCount returns the ForksCount field value if set, zero value otherwise.
func (o *Repository) GetForksCount() int64 {
	if o == nil || o.ForksCount == nil {
		var ret int64
		return ret
	}
	return *o.ForksCount
}

// GetForksCountOk returns a tuple with the ForksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetForksCountOk() (*int64, bool) {
	if o == nil || o.ForksCount == nil {
		return nil, false
	}
	return o.ForksCount, true
}

// HasForksCount returns a boolean if a field has been set.
func (o *Repository) HasForksCount() bool {
	if o != nil && o.ForksCount != nil {
		return true
	}

	return false
}

// SetForksCount gets a reference to the given int64 and assigns it to the ForksCount field.
func (o *Repository) SetForksCount(v int64) {
	o.ForksCount = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *Repository) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *Repository) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *Repository) SetFullName(v string) {
	o.FullName = &v
}

// GetHasActions returns the HasActions field value if set, zero value otherwise.
func (o *Repository) GetHasActions() bool {
	if o == nil || o.HasActions == nil {
		var ret bool
		return ret
	}
	return *o.HasActions
}

// GetHasActionsOk returns a tuple with the HasActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasActionsOk() (*bool, bool) {
	if o == nil || o.HasActions == nil {
		return nil, false
	}
	return o.HasActions, true
}

// HasHasActions returns a boolean if a field has been set.
func (o *Repository) HasHasActions() bool {
	if o != nil && o.HasActions != nil {
		return true
	}

	return false
}

// SetHasActions gets a reference to the given bool and assigns it to the HasActions field.
func (o *Repository) SetHasActions(v bool) {
	o.HasActions = &v
}

// GetHasIssues returns the HasIssues field value if set, zero value otherwise.
func (o *Repository) GetHasIssues() bool {
	if o == nil || o.HasIssues == nil {
		var ret bool
		return ret
	}
	return *o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasIssuesOk() (*bool, bool) {
	if o == nil || o.HasIssues == nil {
		return nil, false
	}
	return o.HasIssues, true
}

// HasHasIssues returns a boolean if a field has been set.
func (o *Repository) HasHasIssues() bool {
	if o != nil && o.HasIssues != nil {
		return true
	}

	return false
}

// SetHasIssues gets a reference to the given bool and assigns it to the HasIssues field.
func (o *Repository) SetHasIssues(v bool) {
	o.HasIssues = &v
}

// GetHasPackages returns the HasPackages field value if set, zero value otherwise.
func (o *Repository) GetHasPackages() bool {
	if o == nil || o.HasPackages == nil {
		var ret bool
		return ret
	}
	return *o.HasPackages
}

// GetHasPackagesOk returns a tuple with the HasPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasPackagesOk() (*bool, bool) {
	if o == nil || o.HasPackages == nil {
		return nil, false
	}
	return o.HasPackages, true
}

// HasHasPackages returns a boolean if a field has been set.
func (o *Repository) HasHasPackages() bool {
	if o != nil && o.HasPackages != nil {
		return true
	}

	return false
}

// SetHasPackages gets a reference to the given bool and assigns it to the HasPackages field.
func (o *Repository) SetHasPackages(v bool) {
	o.HasPackages = &v
}

// GetHasProjects returns the HasProjects field value if set, zero value otherwise.
func (o *Repository) GetHasProjects() bool {
	if o == nil || o.HasProjects == nil {
		var ret bool
		return ret
	}
	return *o.HasProjects
}

// GetHasProjectsOk returns a tuple with the HasProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasProjectsOk() (*bool, bool) {
	if o == nil || o.HasProjects == nil {
		return nil, false
	}
	return o.HasProjects, true
}

// HasHasProjects returns a boolean if a field has been set.
func (o *Repository) HasHasProjects() bool {
	if o != nil && o.HasProjects != nil {
		return true
	}

	return false
}

// SetHasProjects gets a reference to the given bool and assigns it to the HasProjects field.
func (o *Repository) SetHasProjects(v bool) {
	o.HasProjects = &v
}

// GetHasPullRequests returns the HasPullRequests field value if set, zero value otherwise.
func (o *Repository) GetHasPullRequests() bool {
	if o == nil || o.HasPullRequests == nil {
		var ret bool
		return ret
	}
	return *o.HasPullRequests
}

// GetHasPullRequestsOk returns a tuple with the HasPullRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasPullRequestsOk() (*bool, bool) {
	if o == nil || o.HasPullRequests == nil {
		return nil, false
	}
	return o.HasPullRequests, true
}

// HasHasPullRequests returns a boolean if a field has been set.
func (o *Repository) HasHasPullRequests() bool {
	if o != nil && o.HasPullRequests != nil {
		return true
	}

	return false
}

// SetHasPullRequests gets a reference to the given bool and assigns it to the HasPullRequests field.
func (o *Repository) SetHasPullRequests(v bool) {
	o.HasPullRequests = &v
}

// GetHasReleases returns the HasReleases field value if set, zero value otherwise.
func (o *Repository) GetHasReleases() bool {
	if o == nil || o.HasReleases == nil {
		var ret bool
		return ret
	}
	return *o.HasReleases
}

// GetHasReleasesOk returns a tuple with the HasReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasReleasesOk() (*bool, bool) {
	if o == nil || o.HasReleases == nil {
		return nil, false
	}
	return o.HasReleases, true
}

// HasHasReleases returns a boolean if a field has been set.
func (o *Repository) HasHasReleases() bool {
	if o != nil && o.HasReleases != nil {
		return true
	}

	return false
}

// SetHasReleases gets a reference to the given bool and assigns it to the HasReleases field.
func (o *Repository) SetHasReleases(v bool) {
	o.HasReleases = &v
}

// GetHasWiki returns the HasWiki field value if set, zero value otherwise.
func (o *Repository) GetHasWiki() bool {
	if o == nil || o.HasWiki == nil {
		var ret bool
		return ret
	}
	return *o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHasWikiOk() (*bool, bool) {
	if o == nil || o.HasWiki == nil {
		return nil, false
	}
	return o.HasWiki, true
}

// HasHasWiki returns a boolean if a field has been set.
func (o *Repository) HasHasWiki() bool {
	if o != nil && o.HasWiki != nil {
		return true
	}

	return false
}

// SetHasWiki gets a reference to the given bool and assigns it to the HasWiki field.
func (o *Repository) SetHasWiki(v bool) {
	o.HasWiki = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *Repository) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *Repository) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *Repository) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Repository) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Repository) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Repository) SetId(v int64) {
	o.Id = &v
}

// GetIgnoreWhitespaceConflicts returns the IgnoreWhitespaceConflicts field value if set, zero value otherwise.
func (o *Repository) GetIgnoreWhitespaceConflicts() bool {
	if o == nil || o.IgnoreWhitespaceConflicts == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreWhitespaceConflicts
}

// GetIgnoreWhitespaceConflictsOk returns a tuple with the IgnoreWhitespaceConflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIgnoreWhitespaceConflictsOk() (*bool, bool) {
	if o == nil || o.IgnoreWhitespaceConflicts == nil {
		return nil, false
	}
	return o.IgnoreWhitespaceConflicts, true
}

// HasIgnoreWhitespaceConflicts returns a boolean if a field has been set.
func (o *Repository) HasIgnoreWhitespaceConflicts() bool {
	if o != nil && o.IgnoreWhitespaceConflicts != nil {
		return true
	}

	return false
}

// SetIgnoreWhitespaceConflicts gets a reference to the given bool and assigns it to the IgnoreWhitespaceConflicts field.
func (o *Repository) SetIgnoreWhitespaceConflicts(v bool) {
	o.IgnoreWhitespaceConflicts = &v
}

// GetInternal returns the Internal field value if set, zero value otherwise.
func (o *Repository) GetInternal() bool {
	if o == nil || o.Internal == nil {
		var ret bool
		return ret
	}
	return *o.Internal
}

// GetInternalOk returns a tuple with the Internal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetInternalOk() (*bool, bool) {
	if o == nil || o.Internal == nil {
		return nil, false
	}
	return o.Internal, true
}

// HasInternal returns a boolean if a field has been set.
func (o *Repository) HasInternal() bool {
	if o != nil && o.Internal != nil {
		return true
	}

	return false
}

// SetInternal gets a reference to the given bool and assigns it to the Internal field.
func (o *Repository) SetInternal(v bool) {
	o.Internal = &v
}

// GetInternalTracker returns the InternalTracker field value if set, zero value otherwise.
func (o *Repository) GetInternalTracker() InternalTracker {
	if o == nil || o.InternalTracker == nil {
		var ret InternalTracker
		return ret
	}
	return *o.InternalTracker
}

// GetInternalTrackerOk returns a tuple with the InternalTracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetInternalTrackerOk() (*InternalTracker, bool) {
	if o == nil || o.InternalTracker == nil {
		return nil, false
	}
	return o.InternalTracker, true
}

// HasInternalTracker returns a boolean if a field has been set.
func (o *Repository) HasInternalTracker() bool {
	if o != nil && o.InternalTracker != nil {
		return true
	}

	return false
}

// SetInternalTracker gets a reference to the given InternalTracker and assigns it to the InternalTracker field.
func (o *Repository) SetInternalTracker(v InternalTracker) {
	o.InternalTracker = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Repository) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Repository) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Repository) SetLanguage(v string) {
	o.Language = &v
}

// GetLanguagesUrl returns the LanguagesUrl field value if set, zero value otherwise.
func (o *Repository) GetLanguagesUrl() string {
	if o == nil || o.LanguagesUrl == nil {
		var ret string
		return ret
	}
	return *o.LanguagesUrl
}

// GetLanguagesUrlOk returns a tuple with the LanguagesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetLanguagesUrlOk() (*string, bool) {
	if o == nil || o.LanguagesUrl == nil {
		return nil, false
	}
	return o.LanguagesUrl, true
}

// HasLanguagesUrl returns a boolean if a field has been set.
func (o *Repository) HasLanguagesUrl() bool {
	if o != nil && o.LanguagesUrl != nil {
		return true
	}

	return false
}

// SetLanguagesUrl gets a reference to the given string and assigns it to the LanguagesUrl field.
func (o *Repository) SetLanguagesUrl(v string) {
	o.LanguagesUrl = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *Repository) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Repository) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *Repository) SetLink(v string) {
	o.Link = &v
}

// GetMirror returns the Mirror field value if set, zero value otherwise.
func (o *Repository) GetMirror() bool {
	if o == nil || o.Mirror == nil {
		var ret bool
		return ret
	}
	return *o.Mirror
}

// GetMirrorOk returns a tuple with the Mirror field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetMirrorOk() (*bool, bool) {
	if o == nil || o.Mirror == nil {
		return nil, false
	}
	return o.Mirror, true
}

// HasMirror returns a boolean if a field has been set.
func (o *Repository) HasMirror() bool {
	if o != nil && o.Mirror != nil {
		return true
	}

	return false
}

// SetMirror gets a reference to the given bool and assigns it to the Mirror field.
func (o *Repository) SetMirror(v bool) {
	o.Mirror = &v
}

// GetMirrorInterval returns the MirrorInterval field value if set, zero value otherwise.
func (o *Repository) GetMirrorInterval() string {
	if o == nil || o.MirrorInterval == nil {
		var ret string
		return ret
	}
	return *o.MirrorInterval
}

// GetMirrorIntervalOk returns a tuple with the MirrorInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetMirrorIntervalOk() (*string, bool) {
	if o == nil || o.MirrorInterval == nil {
		return nil, false
	}
	return o.MirrorInterval, true
}

// HasMirrorInterval returns a boolean if a field has been set.
func (o *Repository) HasMirrorInterval() bool {
	if o != nil && o.MirrorInterval != nil {
		return true
	}

	return false
}

// SetMirrorInterval gets a reference to the given string and assigns it to the MirrorInterval field.
func (o *Repository) SetMirrorInterval(v string) {
	o.MirrorInterval = &v
}

// GetMirrorUpdated returns the MirrorUpdated field value if set, zero value otherwise.
func (o *Repository) GetMirrorUpdated() time.Time {
	if o == nil || o.MirrorUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.MirrorUpdated
}

// GetMirrorUpdatedOk returns a tuple with the MirrorUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetMirrorUpdatedOk() (*time.Time, bool) {
	if o == nil || o.MirrorUpdated == nil {
		return nil, false
	}
	return o.MirrorUpdated, true
}

// HasMirrorUpdated returns a boolean if a field has been set.
func (o *Repository) HasMirrorUpdated() bool {
	if o != nil && o.MirrorUpdated != nil {
		return true
	}

	return false
}

// SetMirrorUpdated gets a reference to the given time.Time and assigns it to the MirrorUpdated field.
func (o *Repository) SetMirrorUpdated(v time.Time) {
	o.MirrorUpdated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Repository) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Repository) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Repository) SetName(v string) {
	o.Name = &v
}

// GetObjectFormatName returns the ObjectFormatName field value if set, zero value otherwise.
func (o *Repository) GetObjectFormatName() string {
	if o == nil || o.ObjectFormatName == nil {
		var ret string
		return ret
	}
	return *o.ObjectFormatName
}

// GetObjectFormatNameOk returns a tuple with the ObjectFormatName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetObjectFormatNameOk() (*string, bool) {
	if o == nil || o.ObjectFormatName == nil {
		return nil, false
	}
	return o.ObjectFormatName, true
}

// HasObjectFormatName returns a boolean if a field has been set.
func (o *Repository) HasObjectFormatName() bool {
	if o != nil && o.ObjectFormatName != nil {
		return true
	}

	return false
}

// SetObjectFormatName gets a reference to the given string and assigns it to the ObjectFormatName field.
func (o *Repository) SetObjectFormatName(v string) {
	o.ObjectFormatName = &v
}

// GetOpenIssuesCount returns the OpenIssuesCount field value if set, zero value otherwise.
func (o *Repository) GetOpenIssuesCount() int64 {
	if o == nil || o.OpenIssuesCount == nil {
		var ret int64
		return ret
	}
	return *o.OpenIssuesCount
}

// GetOpenIssuesCountOk returns a tuple with the OpenIssuesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOpenIssuesCountOk() (*int64, bool) {
	if o == nil || o.OpenIssuesCount == nil {
		return nil, false
	}
	return o.OpenIssuesCount, true
}

// HasOpenIssuesCount returns a boolean if a field has been set.
func (o *Repository) HasOpenIssuesCount() bool {
	if o != nil && o.OpenIssuesCount != nil {
		return true
	}

	return false
}

// SetOpenIssuesCount gets a reference to the given int64 and assigns it to the OpenIssuesCount field.
func (o *Repository) SetOpenIssuesCount(v int64) {
	o.OpenIssuesCount = &v
}

// GetOpenPrCounter returns the OpenPrCounter field value if set, zero value otherwise.
func (o *Repository) GetOpenPrCounter() int64 {
	if o == nil || o.OpenPrCounter == nil {
		var ret int64
		return ret
	}
	return *o.OpenPrCounter
}

// GetOpenPrCounterOk returns a tuple with the OpenPrCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOpenPrCounterOk() (*int64, bool) {
	if o == nil || o.OpenPrCounter == nil {
		return nil, false
	}
	return o.OpenPrCounter, true
}

// HasOpenPrCounter returns a boolean if a field has been set.
func (o *Repository) HasOpenPrCounter() bool {
	if o != nil && o.OpenPrCounter != nil {
		return true
	}

	return false
}

// SetOpenPrCounter gets a reference to the given int64 and assigns it to the OpenPrCounter field.
func (o *Repository) SetOpenPrCounter(v int64) {
	o.OpenPrCounter = &v
}

// GetOriginalUrl returns the OriginalUrl field value if set, zero value otherwise.
func (o *Repository) GetOriginalUrl() string {
	if o == nil || o.OriginalUrl == nil {
		var ret string
		return ret
	}
	return *o.OriginalUrl
}

// GetOriginalUrlOk returns a tuple with the OriginalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOriginalUrlOk() (*string, bool) {
	if o == nil || o.OriginalUrl == nil {
		return nil, false
	}
	return o.OriginalUrl, true
}

// HasOriginalUrl returns a boolean if a field has been set.
func (o *Repository) HasOriginalUrl() bool {
	if o != nil && o.OriginalUrl != nil {
		return true
	}

	return false
}

// SetOriginalUrl gets a reference to the given string and assigns it to the OriginalUrl field.
func (o *Repository) SetOriginalUrl(v string) {
	o.OriginalUrl = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Repository) GetOwner() User {
	if o == nil || o.Owner == nil {
		var ret User
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOwnerOk() (*User, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Repository) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given User and assigns it to the Owner field.
func (o *Repository) SetOwner(v User) {
	o.Owner = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *Repository) GetParent() Repository {
	if o == nil || o.Parent == nil {
		var ret Repository
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetParentOk() (*Repository, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *Repository) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given Repository and assigns it to the Parent field.
func (o *Repository) SetParent(v Repository) {
	o.Parent = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Repository) GetPermissions() Permission {
	if o == nil || o.Permissions == nil {
		var ret Permission
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPermissionsOk() (*Permission, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Repository) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given Permission and assigns it to the Permissions field.
func (o *Repository) SetPermissions(v Permission) {
	o.Permissions = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *Repository) GetPrivate() bool {
	if o == nil || o.Private == nil {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPrivateOk() (*bool, bool) {
	if o == nil || o.Private == nil {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *Repository) HasPrivate() bool {
	if o != nil && o.Private != nil {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *Repository) SetPrivate(v bool) {
	o.Private = &v
}

// GetReleaseCounter returns the ReleaseCounter field value if set, zero value otherwise.
func (o *Repository) GetReleaseCounter() int64 {
	if o == nil || o.ReleaseCounter == nil {
		var ret int64
		return ret
	}
	return *o.ReleaseCounter
}

// GetReleaseCounterOk returns a tuple with the ReleaseCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetReleaseCounterOk() (*int64, bool) {
	if o == nil || o.ReleaseCounter == nil {
		return nil, false
	}
	return o.ReleaseCounter, true
}

// HasReleaseCounter returns a boolean if a field has been set.
func (o *Repository) HasReleaseCounter() bool {
	if o != nil && o.ReleaseCounter != nil {
		return true
	}

	return false
}

// SetReleaseCounter gets a reference to the given int64 and assigns it to the ReleaseCounter field.
func (o *Repository) SetReleaseCounter(v int64) {
	o.ReleaseCounter = &v
}

// GetRepoTransfer returns the RepoTransfer field value if set, zero value otherwise.
func (o *Repository) GetRepoTransfer() RepoTransfer {
	if o == nil || o.RepoTransfer == nil {
		var ret RepoTransfer
		return ret
	}
	return *o.RepoTransfer
}

// GetRepoTransferOk returns a tuple with the RepoTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRepoTransferOk() (*RepoTransfer, bool) {
	if o == nil || o.RepoTransfer == nil {
		return nil, false
	}
	return o.RepoTransfer, true
}

// HasRepoTransfer returns a boolean if a field has been set.
func (o *Repository) HasRepoTransfer() bool {
	if o != nil && o.RepoTransfer != nil {
		return true
	}

	return false
}

// SetRepoTransfer gets a reference to the given RepoTransfer and assigns it to the RepoTransfer field.
func (o *Repository) SetRepoTransfer(v RepoTransfer) {
	o.RepoTransfer = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Repository) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Repository) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Repository) SetSize(v int64) {
	o.Size = &v
}

// GetSshUrl returns the SshUrl field value if set, zero value otherwise.
func (o *Repository) GetSshUrl() string {
	if o == nil || o.SshUrl == nil {
		var ret string
		return ret
	}
	return *o.SshUrl
}

// GetSshUrlOk returns a tuple with the SshUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSshUrlOk() (*string, bool) {
	if o == nil || o.SshUrl == nil {
		return nil, false
	}
	return o.SshUrl, true
}

// HasSshUrl returns a boolean if a field has been set.
func (o *Repository) HasSshUrl() bool {
	if o != nil && o.SshUrl != nil {
		return true
	}

	return false
}

// SetSshUrl gets a reference to the given string and assigns it to the SshUrl field.
func (o *Repository) SetSshUrl(v string) {
	o.SshUrl = &v
}

// GetStarsCount returns the StarsCount field value if set, zero value otherwise.
func (o *Repository) GetStarsCount() int64 {
	if o == nil || o.StarsCount == nil {
		var ret int64
		return ret
	}
	return *o.StarsCount
}

// GetStarsCountOk returns a tuple with the StarsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetStarsCountOk() (*int64, bool) {
	if o == nil || o.StarsCount == nil {
		return nil, false
	}
	return o.StarsCount, true
}

// HasStarsCount returns a boolean if a field has been set.
func (o *Repository) HasStarsCount() bool {
	if o != nil && o.StarsCount != nil {
		return true
	}

	return false
}

// SetStarsCount gets a reference to the given int64 and assigns it to the StarsCount field.
func (o *Repository) SetStarsCount(v int64) {
	o.StarsCount = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *Repository) GetTemplate() bool {
	if o == nil || o.Template == nil {
		var ret bool
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetTemplateOk() (*bool, bool) {
	if o == nil || o.Template == nil {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *Repository) HasTemplate() bool {
	if o != nil && o.Template != nil {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given bool and assigns it to the Template field.
func (o *Repository) SetTemplate(v bool) {
	o.Template = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Repository) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Repository) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Repository) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Repository) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Repository) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Repository) SetUrl(v string) {
	o.Url = &v
}

// GetWatchersCount returns the WatchersCount field value if set, zero value otherwise.
func (o *Repository) GetWatchersCount() int64 {
	if o == nil || o.WatchersCount == nil {
		var ret int64
		return ret
	}
	return *o.WatchersCount
}

// GetWatchersCountOk returns a tuple with the WatchersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetWatchersCountOk() (*int64, bool) {
	if o == nil || o.WatchersCount == nil {
		return nil, false
	}
	return o.WatchersCount, true
}

// HasWatchersCount returns a boolean if a field has been set.
func (o *Repository) HasWatchersCount() bool {
	if o != nil && o.WatchersCount != nil {
		return true
	}

	return false
}

// SetWatchersCount gets a reference to the given int64 and assigns it to the WatchersCount field.
func (o *Repository) SetWatchersCount(v int64) {
	o.WatchersCount = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *Repository) GetWebsite() string {
	if o == nil || o.Website == nil {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetWebsiteOk() (*string, bool) {
	if o == nil || o.Website == nil {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *Repository) HasWebsite() bool {
	if o != nil && o.Website != nil {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *Repository) SetWebsite(v string) {
	o.Website = &v
}

func (o Repository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowFastForwardOnlyMerge != nil {
		toSerialize["allow_fast_forward_only_merge"] = o.AllowFastForwardOnlyMerge
	}
	if o.AllowMergeCommits != nil {
		toSerialize["allow_merge_commits"] = o.AllowMergeCommits
	}
	if o.AllowRebase != nil {
		toSerialize["allow_rebase"] = o.AllowRebase
	}
	if o.AllowRebaseExplicit != nil {
		toSerialize["allow_rebase_explicit"] = o.AllowRebaseExplicit
	}
	if o.AllowRebaseUpdate != nil {
		toSerialize["allow_rebase_update"] = o.AllowRebaseUpdate
	}
	if o.AllowSquashMerge != nil {
		toSerialize["allow_squash_merge"] = o.AllowSquashMerge
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.ArchivedAt != nil {
		toSerialize["archived_at"] = o.ArchivedAt
	}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.CloneUrl != nil {
		toSerialize["clone_url"] = o.CloneUrl
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.DefaultAllowMaintainerEdit != nil {
		toSerialize["default_allow_maintainer_edit"] = o.DefaultAllowMaintainerEdit
	}
	if o.DefaultBranch != nil {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if o.DefaultDeleteBranchAfterMerge != nil {
		toSerialize["default_delete_branch_after_merge"] = o.DefaultDeleteBranchAfterMerge
	}
	if o.DefaultMergeStyle != nil {
		toSerialize["default_merge_style"] = o.DefaultMergeStyle
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Empty != nil {
		toSerialize["empty"] = o.Empty
	}
	if o.ExternalTracker != nil {
		toSerialize["external_tracker"] = o.ExternalTracker
	}
	if o.ExternalWiki != nil {
		toSerialize["external_wiki"] = o.ExternalWiki
	}
	if o.Fork != nil {
		toSerialize["fork"] = o.Fork
	}
	if o.ForksCount != nil {
		toSerialize["forks_count"] = o.ForksCount
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.HasActions != nil {
		toSerialize["has_actions"] = o.HasActions
	}
	if o.HasIssues != nil {
		toSerialize["has_issues"] = o.HasIssues
	}
	if o.HasPackages != nil {
		toSerialize["has_packages"] = o.HasPackages
	}
	if o.HasProjects != nil {
		toSerialize["has_projects"] = o.HasProjects
	}
	if o.HasPullRequests != nil {
		toSerialize["has_pull_requests"] = o.HasPullRequests
	}
	if o.HasReleases != nil {
		toSerialize["has_releases"] = o.HasReleases
	}
	if o.HasWiki != nil {
		toSerialize["has_wiki"] = o.HasWiki
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IgnoreWhitespaceConflicts != nil {
		toSerialize["ignore_whitespace_conflicts"] = o.IgnoreWhitespaceConflicts
	}
	if o.Internal != nil {
		toSerialize["internal"] = o.Internal
	}
	if o.InternalTracker != nil {
		toSerialize["internal_tracker"] = o.InternalTracker
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.LanguagesUrl != nil {
		toSerialize["languages_url"] = o.LanguagesUrl
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.Mirror != nil {
		toSerialize["mirror"] = o.Mirror
	}
	if o.MirrorInterval != nil {
		toSerialize["mirror_interval"] = o.MirrorInterval
	}
	if o.MirrorUpdated != nil {
		toSerialize["mirror_updated"] = o.MirrorUpdated
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ObjectFormatName != nil {
		toSerialize["object_format_name"] = o.ObjectFormatName
	}
	if o.OpenIssuesCount != nil {
		toSerialize["open_issues_count"] = o.OpenIssuesCount
	}
	if o.OpenPrCounter != nil {
		toSerialize["open_pr_counter"] = o.OpenPrCounter
	}
	if o.OriginalUrl != nil {
		toSerialize["original_url"] = o.OriginalUrl
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.Private != nil {
		toSerialize["private"] = o.Private
	}
	if o.ReleaseCounter != nil {
		toSerialize["release_counter"] = o.ReleaseCounter
	}
	if o.RepoTransfer != nil {
		toSerialize["repo_transfer"] = o.RepoTransfer
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.SshUrl != nil {
		toSerialize["ssh_url"] = o.SshUrl
	}
	if o.StarsCount != nil {
		toSerialize["stars_count"] = o.StarsCount
	}
	if o.Template != nil {
		toSerialize["template"] = o.Template
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.WatchersCount != nil {
		toSerialize["watchers_count"] = o.WatchersCount
	}
	if o.Website != nil {
		toSerialize["website"] = o.Website
	}
	return json.Marshal(toSerialize)
}

type NullableRepository struct {
	value *Repository
	isSet bool
}

func (v NullableRepository) Get() *Repository {
	return v.value
}

func (v *NullableRepository) Set(val *Repository) {
	v.value = val
	v.isSet = true
}

func (v NullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepository(val *Repository) *NullableRepository {
	return &NullableRepository{value: val, isSet: true}
}

func (v NullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


