/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IssueConfigValidation struct for IssueConfigValidation
type IssueConfigValidation struct {
	Message *string `json:"message,omitempty"`
	Valid *bool `json:"valid,omitempty"`
}

// NewIssueConfigValidation instantiates a new IssueConfigValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueConfigValidation() *IssueConfigValidation {
	this := IssueConfigValidation{}
	return &this
}

// NewIssueConfigValidationWithDefaults instantiates a new IssueConfigValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueConfigValidationWithDefaults() *IssueConfigValidation {
	this := IssueConfigValidation{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *IssueConfigValidation) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueConfigValidation) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *IssueConfigValidation) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *IssueConfigValidation) SetMessage(v string) {
	o.Message = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *IssueConfigValidation) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueConfigValidation) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *IssueConfigValidation) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *IssueConfigValidation) SetValid(v bool) {
	o.Valid = &v
}

func (o IssueConfigValidation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Valid != nil {
		toSerialize["valid"] = o.Valid
	}
	return json.Marshal(toSerialize)
}

type NullableIssueConfigValidation struct {
	value *IssueConfigValidation
	isSet bool
}

func (v NullableIssueConfigValidation) Get() *IssueConfigValidation {
	return v.value
}

func (v *NullableIssueConfigValidation) Set(val *IssueConfigValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueConfigValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueConfigValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueConfigValidation(val *IssueConfigValidation) *NullableIssueConfigValidation {
	return &NullableIssueConfigValidation{value: val, isSet: true}
}

func (v NullableIssueConfigValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueConfigValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


