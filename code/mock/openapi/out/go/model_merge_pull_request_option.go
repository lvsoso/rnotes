/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MergePullRequestOption MergePullRequestForm form for merging Pull Request
type MergePullRequestOption struct {
	Do string `json:"Do"`
	MergeCommitID *string `json:"MergeCommitID,omitempty"`
	MergeMessageField *string `json:"MergeMessageField,omitempty"`
	MergeTitleField *string `json:"MergeTitleField,omitempty"`
	DeleteBranchAfterMerge *bool `json:"delete_branch_after_merge,omitempty"`
	ForceMerge *bool `json:"force_merge,omitempty"`
	HeadCommitId *string `json:"head_commit_id,omitempty"`
	MergeWhenChecksSucceed *bool `json:"merge_when_checks_succeed,omitempty"`
}

// NewMergePullRequestOption instantiates a new MergePullRequestOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergePullRequestOption(do string) *MergePullRequestOption {
	this := MergePullRequestOption{}
	this.Do = do
	return &this
}

// NewMergePullRequestOptionWithDefaults instantiates a new MergePullRequestOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergePullRequestOptionWithDefaults() *MergePullRequestOption {
	this := MergePullRequestOption{}
	return &this
}

// GetDo returns the Do field value
func (o *MergePullRequestOption) GetDo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Do
}

// GetDoOk returns a tuple with the Do field value
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetDoOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Do, true
}

// SetDo sets field value
func (o *MergePullRequestOption) SetDo(v string) {
	o.Do = v
}

// GetMergeCommitID returns the MergeCommitID field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetMergeCommitID() string {
	if o == nil || o.MergeCommitID == nil {
		var ret string
		return ret
	}
	return *o.MergeCommitID
}

// GetMergeCommitIDOk returns a tuple with the MergeCommitID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetMergeCommitIDOk() (*string, bool) {
	if o == nil || o.MergeCommitID == nil {
		return nil, false
	}
	return o.MergeCommitID, true
}

// HasMergeCommitID returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasMergeCommitID() bool {
	if o != nil && o.MergeCommitID != nil {
		return true
	}

	return false
}

// SetMergeCommitID gets a reference to the given string and assigns it to the MergeCommitID field.
func (o *MergePullRequestOption) SetMergeCommitID(v string) {
	o.MergeCommitID = &v
}

// GetMergeMessageField returns the MergeMessageField field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetMergeMessageField() string {
	if o == nil || o.MergeMessageField == nil {
		var ret string
		return ret
	}
	return *o.MergeMessageField
}

// GetMergeMessageFieldOk returns a tuple with the MergeMessageField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetMergeMessageFieldOk() (*string, bool) {
	if o == nil || o.MergeMessageField == nil {
		return nil, false
	}
	return o.MergeMessageField, true
}

// HasMergeMessageField returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasMergeMessageField() bool {
	if o != nil && o.MergeMessageField != nil {
		return true
	}

	return false
}

// SetMergeMessageField gets a reference to the given string and assigns it to the MergeMessageField field.
func (o *MergePullRequestOption) SetMergeMessageField(v string) {
	o.MergeMessageField = &v
}

// GetMergeTitleField returns the MergeTitleField field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetMergeTitleField() string {
	if o == nil || o.MergeTitleField == nil {
		var ret string
		return ret
	}
	return *o.MergeTitleField
}

// GetMergeTitleFieldOk returns a tuple with the MergeTitleField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetMergeTitleFieldOk() (*string, bool) {
	if o == nil || o.MergeTitleField == nil {
		return nil, false
	}
	return o.MergeTitleField, true
}

// HasMergeTitleField returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasMergeTitleField() bool {
	if o != nil && o.MergeTitleField != nil {
		return true
	}

	return false
}

// SetMergeTitleField gets a reference to the given string and assigns it to the MergeTitleField field.
func (o *MergePullRequestOption) SetMergeTitleField(v string) {
	o.MergeTitleField = &v
}

// GetDeleteBranchAfterMerge returns the DeleteBranchAfterMerge field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetDeleteBranchAfterMerge() bool {
	if o == nil || o.DeleteBranchAfterMerge == nil {
		var ret bool
		return ret
	}
	return *o.DeleteBranchAfterMerge
}

// GetDeleteBranchAfterMergeOk returns a tuple with the DeleteBranchAfterMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetDeleteBranchAfterMergeOk() (*bool, bool) {
	if o == nil || o.DeleteBranchAfterMerge == nil {
		return nil, false
	}
	return o.DeleteBranchAfterMerge, true
}

// HasDeleteBranchAfterMerge returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasDeleteBranchAfterMerge() bool {
	if o != nil && o.DeleteBranchAfterMerge != nil {
		return true
	}

	return false
}

// SetDeleteBranchAfterMerge gets a reference to the given bool and assigns it to the DeleteBranchAfterMerge field.
func (o *MergePullRequestOption) SetDeleteBranchAfterMerge(v bool) {
	o.DeleteBranchAfterMerge = &v
}

// GetForceMerge returns the ForceMerge field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetForceMerge() bool {
	if o == nil || o.ForceMerge == nil {
		var ret bool
		return ret
	}
	return *o.ForceMerge
}

// GetForceMergeOk returns a tuple with the ForceMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetForceMergeOk() (*bool, bool) {
	if o == nil || o.ForceMerge == nil {
		return nil, false
	}
	return o.ForceMerge, true
}

// HasForceMerge returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasForceMerge() bool {
	if o != nil && o.ForceMerge != nil {
		return true
	}

	return false
}

// SetForceMerge gets a reference to the given bool and assigns it to the ForceMerge field.
func (o *MergePullRequestOption) SetForceMerge(v bool) {
	o.ForceMerge = &v
}

// GetHeadCommitId returns the HeadCommitId field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetHeadCommitId() string {
	if o == nil || o.HeadCommitId == nil {
		var ret string
		return ret
	}
	return *o.HeadCommitId
}

// GetHeadCommitIdOk returns a tuple with the HeadCommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetHeadCommitIdOk() (*string, bool) {
	if o == nil || o.HeadCommitId == nil {
		return nil, false
	}
	return o.HeadCommitId, true
}

// HasHeadCommitId returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasHeadCommitId() bool {
	if o != nil && o.HeadCommitId != nil {
		return true
	}

	return false
}

// SetHeadCommitId gets a reference to the given string and assigns it to the HeadCommitId field.
func (o *MergePullRequestOption) SetHeadCommitId(v string) {
	o.HeadCommitId = &v
}

// GetMergeWhenChecksSucceed returns the MergeWhenChecksSucceed field value if set, zero value otherwise.
func (o *MergePullRequestOption) GetMergeWhenChecksSucceed() bool {
	if o == nil || o.MergeWhenChecksSucceed == nil {
		var ret bool
		return ret
	}
	return *o.MergeWhenChecksSucceed
}

// GetMergeWhenChecksSucceedOk returns a tuple with the MergeWhenChecksSucceed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergePullRequestOption) GetMergeWhenChecksSucceedOk() (*bool, bool) {
	if o == nil || o.MergeWhenChecksSucceed == nil {
		return nil, false
	}
	return o.MergeWhenChecksSucceed, true
}

// HasMergeWhenChecksSucceed returns a boolean if a field has been set.
func (o *MergePullRequestOption) HasMergeWhenChecksSucceed() bool {
	if o != nil && o.MergeWhenChecksSucceed != nil {
		return true
	}

	return false
}

// SetMergeWhenChecksSucceed gets a reference to the given bool and assigns it to the MergeWhenChecksSucceed field.
func (o *MergePullRequestOption) SetMergeWhenChecksSucceed(v bool) {
	o.MergeWhenChecksSucceed = &v
}

func (o MergePullRequestOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Do"] = o.Do
	}
	if o.MergeCommitID != nil {
		toSerialize["MergeCommitID"] = o.MergeCommitID
	}
	if o.MergeMessageField != nil {
		toSerialize["MergeMessageField"] = o.MergeMessageField
	}
	if o.MergeTitleField != nil {
		toSerialize["MergeTitleField"] = o.MergeTitleField
	}
	if o.DeleteBranchAfterMerge != nil {
		toSerialize["delete_branch_after_merge"] = o.DeleteBranchAfterMerge
	}
	if o.ForceMerge != nil {
		toSerialize["force_merge"] = o.ForceMerge
	}
	if o.HeadCommitId != nil {
		toSerialize["head_commit_id"] = o.HeadCommitId
	}
	if o.MergeWhenChecksSucceed != nil {
		toSerialize["merge_when_checks_succeed"] = o.MergeWhenChecksSucceed
	}
	return json.Marshal(toSerialize)
}

type NullableMergePullRequestOption struct {
	value *MergePullRequestOption
	isSet bool
}

func (v NullableMergePullRequestOption) Get() *MergePullRequestOption {
	return v.value
}

func (v *NullableMergePullRequestOption) Set(val *MergePullRequestOption) {
	v.value = val
	v.isSet = true
}

func (v NullableMergePullRequestOption) IsSet() bool {
	return v.isSet
}

func (v *NullableMergePullRequestOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergePullRequestOption(val *MergePullRequestOption) *NullableMergePullRequestOption {
	return &NullableMergePullRequestOption{value: val, isSet: true}
}

func (v NullableMergePullRequestOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergePullRequestOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


