/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Commit struct for Commit
type Commit struct {
	Author *User `json:"author,omitempty"`
	Commit *RepoCommit `json:"commit,omitempty"`
	Committer *User `json:"committer,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Files *[]CommitAffectedFiles `json:"files,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Parents *[]CommitMeta `json:"parents,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Stats *CommitStats `json:"stats,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewCommit instantiates a new Commit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommit() *Commit {
	this := Commit{}
	return &this
}

// NewCommitWithDefaults instantiates a new Commit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitWithDefaults() *Commit {
	this := Commit{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Commit) GetAuthor() User {
	if o == nil || o.Author == nil {
		var ret User
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetAuthorOk() (*User, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Commit) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given User and assigns it to the Author field.
func (o *Commit) SetAuthor(v User) {
	o.Author = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *Commit) GetCommit() RepoCommit {
	if o == nil || o.Commit == nil {
		var ret RepoCommit
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitOk() (*RepoCommit, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *Commit) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given RepoCommit and assigns it to the Commit field.
func (o *Commit) SetCommit(v RepoCommit) {
	o.Commit = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *Commit) GetCommitter() User {
	if o == nil || o.Committer == nil {
		var ret User
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetCommitterOk() (*User, bool) {
	if o == nil || o.Committer == nil {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *Commit) HasCommitter() bool {
	if o != nil && o.Committer != nil {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given User and assigns it to the Committer field.
func (o *Commit) SetCommitter(v User) {
	o.Committer = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Commit) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Commit) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Commit) SetCreated(v time.Time) {
	o.Created = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *Commit) GetFiles() []CommitAffectedFiles {
	if o == nil || o.Files == nil {
		var ret []CommitAffectedFiles
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetFilesOk() (*[]CommitAffectedFiles, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *Commit) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []CommitAffectedFiles and assigns it to the Files field.
func (o *Commit) SetFiles(v []CommitAffectedFiles) {
	o.Files = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *Commit) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *Commit) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *Commit) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *Commit) GetParents() []CommitMeta {
	if o == nil || o.Parents == nil {
		var ret []CommitMeta
		return ret
	}
	return *o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetParentsOk() (*[]CommitMeta, bool) {
	if o == nil || o.Parents == nil {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *Commit) HasParents() bool {
	if o != nil && o.Parents != nil {
		return true
	}

	return false
}

// SetParents gets a reference to the given []CommitMeta and assigns it to the Parents field.
func (o *Commit) SetParents(v []CommitMeta) {
	o.Parents = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *Commit) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *Commit) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *Commit) SetSha(v string) {
	o.Sha = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Commit) GetStats() CommitStats {
	if o == nil || o.Stats == nil {
		var ret CommitStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetStatsOk() (*CommitStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Commit) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given CommitStats and assigns it to the Stats field.
func (o *Commit) SetStats(v CommitStats) {
	o.Stats = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Commit) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Commit) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Commit) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Commit) SetUrl(v string) {
	o.Url = &v
}

func (o Commit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.Committer != nil {
		toSerialize["committer"] = o.Committer
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Parents != nil {
		toSerialize["parents"] = o.Parents
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCommit struct {
	value *Commit
	isSet bool
}

func (v NullableCommit) Get() *Commit {
	return v.value
}

func (v *NullableCommit) Set(val *Commit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommit(val *Commit) *NullableCommit {
	return &NullableCommit{value: val, isSet: true}
}

func (v NullableCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


