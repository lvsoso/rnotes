/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IssueConfig struct for IssueConfig
type IssueConfig struct {
	BlankIssuesEnabled *bool `json:"blank_issues_enabled,omitempty"`
	ContactLinks *[]IssueConfigContactLink `json:"contact_links,omitempty"`
}

// NewIssueConfig instantiates a new IssueConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueConfig() *IssueConfig {
	this := IssueConfig{}
	return &this
}

// NewIssueConfigWithDefaults instantiates a new IssueConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueConfigWithDefaults() *IssueConfig {
	this := IssueConfig{}
	return &this
}

// GetBlankIssuesEnabled returns the BlankIssuesEnabled field value if set, zero value otherwise.
func (o *IssueConfig) GetBlankIssuesEnabled() bool {
	if o == nil || o.BlankIssuesEnabled == nil {
		var ret bool
		return ret
	}
	return *o.BlankIssuesEnabled
}

// GetBlankIssuesEnabledOk returns a tuple with the BlankIssuesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueConfig) GetBlankIssuesEnabledOk() (*bool, bool) {
	if o == nil || o.BlankIssuesEnabled == nil {
		return nil, false
	}
	return o.BlankIssuesEnabled, true
}

// HasBlankIssuesEnabled returns a boolean if a field has been set.
func (o *IssueConfig) HasBlankIssuesEnabled() bool {
	if o != nil && o.BlankIssuesEnabled != nil {
		return true
	}

	return false
}

// SetBlankIssuesEnabled gets a reference to the given bool and assigns it to the BlankIssuesEnabled field.
func (o *IssueConfig) SetBlankIssuesEnabled(v bool) {
	o.BlankIssuesEnabled = &v
}

// GetContactLinks returns the ContactLinks field value if set, zero value otherwise.
func (o *IssueConfig) GetContactLinks() []IssueConfigContactLink {
	if o == nil || o.ContactLinks == nil {
		var ret []IssueConfigContactLink
		return ret
	}
	return *o.ContactLinks
}

// GetContactLinksOk returns a tuple with the ContactLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueConfig) GetContactLinksOk() (*[]IssueConfigContactLink, bool) {
	if o == nil || o.ContactLinks == nil {
		return nil, false
	}
	return o.ContactLinks, true
}

// HasContactLinks returns a boolean if a field has been set.
func (o *IssueConfig) HasContactLinks() bool {
	if o != nil && o.ContactLinks != nil {
		return true
	}

	return false
}

// SetContactLinks gets a reference to the given []IssueConfigContactLink and assigns it to the ContactLinks field.
func (o *IssueConfig) SetContactLinks(v []IssueConfigContactLink) {
	o.ContactLinks = &v
}

func (o IssueConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlankIssuesEnabled != nil {
		toSerialize["blank_issues_enabled"] = o.BlankIssuesEnabled
	}
	if o.ContactLinks != nil {
		toSerialize["contact_links"] = o.ContactLinks
	}
	return json.Marshal(toSerialize)
}

type NullableIssueConfig struct {
	value *IssueConfig
	isSet bool
}

func (v NullableIssueConfig) Get() *IssueConfig {
	return v.value
}

func (v *NullableIssueConfig) Set(val *IssueConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueConfig(val *IssueConfig) *NullableIssueConfig {
	return &NullableIssueConfig{value: val, isSet: true}
}

func (v NullableIssueConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


