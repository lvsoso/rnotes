/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrganizationPermissions OrganizationPermissions list different users permissions on an organization
type OrganizationPermissions struct {
	CanCreateRepository *bool `json:"can_create_repository,omitempty"`
	CanRead *bool `json:"can_read,omitempty"`
	CanWrite *bool `json:"can_write,omitempty"`
	IsAdmin *bool `json:"is_admin,omitempty"`
	IsOwner *bool `json:"is_owner,omitempty"`
}

// NewOrganizationPermissions instantiates a new OrganizationPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationPermissions() *OrganizationPermissions {
	this := OrganizationPermissions{}
	return &this
}

// NewOrganizationPermissionsWithDefaults instantiates a new OrganizationPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationPermissionsWithDefaults() *OrganizationPermissions {
	this := OrganizationPermissions{}
	return &this
}

// GetCanCreateRepository returns the CanCreateRepository field value if set, zero value otherwise.
func (o *OrganizationPermissions) GetCanCreateRepository() bool {
	if o == nil || o.CanCreateRepository == nil {
		var ret bool
		return ret
	}
	return *o.CanCreateRepository
}

// GetCanCreateRepositoryOk returns a tuple with the CanCreateRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationPermissions) GetCanCreateRepositoryOk() (*bool, bool) {
	if o == nil || o.CanCreateRepository == nil {
		return nil, false
	}
	return o.CanCreateRepository, true
}

// HasCanCreateRepository returns a boolean if a field has been set.
func (o *OrganizationPermissions) HasCanCreateRepository() bool {
	if o != nil && o.CanCreateRepository != nil {
		return true
	}

	return false
}

// SetCanCreateRepository gets a reference to the given bool and assigns it to the CanCreateRepository field.
func (o *OrganizationPermissions) SetCanCreateRepository(v bool) {
	o.CanCreateRepository = &v
}

// GetCanRead returns the CanRead field value if set, zero value otherwise.
func (o *OrganizationPermissions) GetCanRead() bool {
	if o == nil || o.CanRead == nil {
		var ret bool
		return ret
	}
	return *o.CanRead
}

// GetCanReadOk returns a tuple with the CanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationPermissions) GetCanReadOk() (*bool, bool) {
	if o == nil || o.CanRead == nil {
		return nil, false
	}
	return o.CanRead, true
}

// HasCanRead returns a boolean if a field has been set.
func (o *OrganizationPermissions) HasCanRead() bool {
	if o != nil && o.CanRead != nil {
		return true
	}

	return false
}

// SetCanRead gets a reference to the given bool and assigns it to the CanRead field.
func (o *OrganizationPermissions) SetCanRead(v bool) {
	o.CanRead = &v
}

// GetCanWrite returns the CanWrite field value if set, zero value otherwise.
func (o *OrganizationPermissions) GetCanWrite() bool {
	if o == nil || o.CanWrite == nil {
		var ret bool
		return ret
	}
	return *o.CanWrite
}

// GetCanWriteOk returns a tuple with the CanWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationPermissions) GetCanWriteOk() (*bool, bool) {
	if o == nil || o.CanWrite == nil {
		return nil, false
	}
	return o.CanWrite, true
}

// HasCanWrite returns a boolean if a field has been set.
func (o *OrganizationPermissions) HasCanWrite() bool {
	if o != nil && o.CanWrite != nil {
		return true
	}

	return false
}

// SetCanWrite gets a reference to the given bool and assigns it to the CanWrite field.
func (o *OrganizationPermissions) SetCanWrite(v bool) {
	o.CanWrite = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *OrganizationPermissions) GetIsAdmin() bool {
	if o == nil || o.IsAdmin == nil {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationPermissions) GetIsAdminOk() (*bool, bool) {
	if o == nil || o.IsAdmin == nil {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *OrganizationPermissions) HasIsAdmin() bool {
	if o != nil && o.IsAdmin != nil {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *OrganizationPermissions) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise.
func (o *OrganizationPermissions) GetIsOwner() bool {
	if o == nil || o.IsOwner == nil {
		var ret bool
		return ret
	}
	return *o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationPermissions) GetIsOwnerOk() (*bool, bool) {
	if o == nil || o.IsOwner == nil {
		return nil, false
	}
	return o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *OrganizationPermissions) HasIsOwner() bool {
	if o != nil && o.IsOwner != nil {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given bool and assigns it to the IsOwner field.
func (o *OrganizationPermissions) SetIsOwner(v bool) {
	o.IsOwner = &v
}

func (o OrganizationPermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanCreateRepository != nil {
		toSerialize["can_create_repository"] = o.CanCreateRepository
	}
	if o.CanRead != nil {
		toSerialize["can_read"] = o.CanRead
	}
	if o.CanWrite != nil {
		toSerialize["can_write"] = o.CanWrite
	}
	if o.IsAdmin != nil {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if o.IsOwner != nil {
		toSerialize["is_owner"] = o.IsOwner
	}
	return json.Marshal(toSerialize)
}

type NullableOrganizationPermissions struct {
	value *OrganizationPermissions
	isSet bool
}

func (v NullableOrganizationPermissions) Get() *OrganizationPermissions {
	return v.value
}

func (v *NullableOrganizationPermissions) Set(val *OrganizationPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationPermissions(val *OrganizationPermissions) *NullableOrganizationPermissions {
	return &NullableOrganizationPermissions{value: val, isSet: true}
}

func (v NullableOrganizationPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


