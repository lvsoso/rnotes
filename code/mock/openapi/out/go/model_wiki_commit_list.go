/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WikiCommitList WikiCommitList commit/revision list
type WikiCommitList struct {
	Commits *[]WikiCommit `json:"commits,omitempty"`
	Count *int64 `json:"count,omitempty"`
}

// NewWikiCommitList instantiates a new WikiCommitList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikiCommitList() *WikiCommitList {
	this := WikiCommitList{}
	return &this
}

// NewWikiCommitListWithDefaults instantiates a new WikiCommitList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikiCommitListWithDefaults() *WikiCommitList {
	this := WikiCommitList{}
	return &this
}

// GetCommits returns the Commits field value if set, zero value otherwise.
func (o *WikiCommitList) GetCommits() []WikiCommit {
	if o == nil || o.Commits == nil {
		var ret []WikiCommit
		return ret
	}
	return *o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiCommitList) GetCommitsOk() (*[]WikiCommit, bool) {
	if o == nil || o.Commits == nil {
		return nil, false
	}
	return o.Commits, true
}

// HasCommits returns a boolean if a field has been set.
func (o *WikiCommitList) HasCommits() bool {
	if o != nil && o.Commits != nil {
		return true
	}

	return false
}

// SetCommits gets a reference to the given []WikiCommit and assigns it to the Commits field.
func (o *WikiCommitList) SetCommits(v []WikiCommit) {
	o.Commits = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *WikiCommitList) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WikiCommitList) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *WikiCommitList) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *WikiCommitList) SetCount(v int64) {
	o.Count = &v
}

func (o WikiCommitList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Commits != nil {
		toSerialize["commits"] = o.Commits
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableWikiCommitList struct {
	value *WikiCommitList
	isSet bool
}

func (v NullableWikiCommitList) Get() *WikiCommitList {
	return v.value
}

func (v *NullableWikiCommitList) Set(val *WikiCommitList) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiCommitList) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiCommitList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiCommitList(val *WikiCommitList) *NullableWikiCommitList {
	return &NullableWikiCommitList{value: val, isSet: true}
}

func (v NullableWikiCommitList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiCommitList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


