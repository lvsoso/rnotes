/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GeneralAPISettings GeneralAPISettings contains global api settings exposed by it
type GeneralAPISettings struct {
	DefaultGitTreesPerPage *int64 `json:"default_git_trees_per_page,omitempty"`
	DefaultMaxBlobSize *int64 `json:"default_max_blob_size,omitempty"`
	DefaultPagingNum *int64 `json:"default_paging_num,omitempty"`
	MaxResponseItems *int64 `json:"max_response_items,omitempty"`
}

// NewGeneralAPISettings instantiates a new GeneralAPISettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralAPISettings() *GeneralAPISettings {
	this := GeneralAPISettings{}
	return &this
}

// NewGeneralAPISettingsWithDefaults instantiates a new GeneralAPISettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralAPISettingsWithDefaults() *GeneralAPISettings {
	this := GeneralAPISettings{}
	return &this
}

// GetDefaultGitTreesPerPage returns the DefaultGitTreesPerPage field value if set, zero value otherwise.
func (o *GeneralAPISettings) GetDefaultGitTreesPerPage() int64 {
	if o == nil || o.DefaultGitTreesPerPage == nil {
		var ret int64
		return ret
	}
	return *o.DefaultGitTreesPerPage
}

// GetDefaultGitTreesPerPageOk returns a tuple with the DefaultGitTreesPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAPISettings) GetDefaultGitTreesPerPageOk() (*int64, bool) {
	if o == nil || o.DefaultGitTreesPerPage == nil {
		return nil, false
	}
	return o.DefaultGitTreesPerPage, true
}

// HasDefaultGitTreesPerPage returns a boolean if a field has been set.
func (o *GeneralAPISettings) HasDefaultGitTreesPerPage() bool {
	if o != nil && o.DefaultGitTreesPerPage != nil {
		return true
	}

	return false
}

// SetDefaultGitTreesPerPage gets a reference to the given int64 and assigns it to the DefaultGitTreesPerPage field.
func (o *GeneralAPISettings) SetDefaultGitTreesPerPage(v int64) {
	o.DefaultGitTreesPerPage = &v
}

// GetDefaultMaxBlobSize returns the DefaultMaxBlobSize field value if set, zero value otherwise.
func (o *GeneralAPISettings) GetDefaultMaxBlobSize() int64 {
	if o == nil || o.DefaultMaxBlobSize == nil {
		var ret int64
		return ret
	}
	return *o.DefaultMaxBlobSize
}

// GetDefaultMaxBlobSizeOk returns a tuple with the DefaultMaxBlobSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAPISettings) GetDefaultMaxBlobSizeOk() (*int64, bool) {
	if o == nil || o.DefaultMaxBlobSize == nil {
		return nil, false
	}
	return o.DefaultMaxBlobSize, true
}

// HasDefaultMaxBlobSize returns a boolean if a field has been set.
func (o *GeneralAPISettings) HasDefaultMaxBlobSize() bool {
	if o != nil && o.DefaultMaxBlobSize != nil {
		return true
	}

	return false
}

// SetDefaultMaxBlobSize gets a reference to the given int64 and assigns it to the DefaultMaxBlobSize field.
func (o *GeneralAPISettings) SetDefaultMaxBlobSize(v int64) {
	o.DefaultMaxBlobSize = &v
}

// GetDefaultPagingNum returns the DefaultPagingNum field value if set, zero value otherwise.
func (o *GeneralAPISettings) GetDefaultPagingNum() int64 {
	if o == nil || o.DefaultPagingNum == nil {
		var ret int64
		return ret
	}
	return *o.DefaultPagingNum
}

// GetDefaultPagingNumOk returns a tuple with the DefaultPagingNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAPISettings) GetDefaultPagingNumOk() (*int64, bool) {
	if o == nil || o.DefaultPagingNum == nil {
		return nil, false
	}
	return o.DefaultPagingNum, true
}

// HasDefaultPagingNum returns a boolean if a field has been set.
func (o *GeneralAPISettings) HasDefaultPagingNum() bool {
	if o != nil && o.DefaultPagingNum != nil {
		return true
	}

	return false
}

// SetDefaultPagingNum gets a reference to the given int64 and assigns it to the DefaultPagingNum field.
func (o *GeneralAPISettings) SetDefaultPagingNum(v int64) {
	o.DefaultPagingNum = &v
}

// GetMaxResponseItems returns the MaxResponseItems field value if set, zero value otherwise.
func (o *GeneralAPISettings) GetMaxResponseItems() int64 {
	if o == nil || o.MaxResponseItems == nil {
		var ret int64
		return ret
	}
	return *o.MaxResponseItems
}

// GetMaxResponseItemsOk returns a tuple with the MaxResponseItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralAPISettings) GetMaxResponseItemsOk() (*int64, bool) {
	if o == nil || o.MaxResponseItems == nil {
		return nil, false
	}
	return o.MaxResponseItems, true
}

// HasMaxResponseItems returns a boolean if a field has been set.
func (o *GeneralAPISettings) HasMaxResponseItems() bool {
	if o != nil && o.MaxResponseItems != nil {
		return true
	}

	return false
}

// SetMaxResponseItems gets a reference to the given int64 and assigns it to the MaxResponseItems field.
func (o *GeneralAPISettings) SetMaxResponseItems(v int64) {
	o.MaxResponseItems = &v
}

func (o GeneralAPISettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultGitTreesPerPage != nil {
		toSerialize["default_git_trees_per_page"] = o.DefaultGitTreesPerPage
	}
	if o.DefaultMaxBlobSize != nil {
		toSerialize["default_max_blob_size"] = o.DefaultMaxBlobSize
	}
	if o.DefaultPagingNum != nil {
		toSerialize["default_paging_num"] = o.DefaultPagingNum
	}
	if o.MaxResponseItems != nil {
		toSerialize["max_response_items"] = o.MaxResponseItems
	}
	return json.Marshal(toSerialize)
}

type NullableGeneralAPISettings struct {
	value *GeneralAPISettings
	isSet bool
}

func (v NullableGeneralAPISettings) Get() *GeneralAPISettings {
	return v.value
}

func (v *NullableGeneralAPISettings) Set(val *GeneralAPISettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralAPISettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralAPISettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralAPISettings(val *GeneralAPISettings) *NullableGeneralAPISettings {
	return &NullableGeneralAPISettings{value: val, isSet: true}
}

func (v NullableGeneralAPISettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralAPISettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


