/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FileLinksResponse FileLinksResponse contains the links for a repo's file
type FileLinksResponse struct {
	Git *string `json:"git,omitempty"`
	Html *string `json:"html,omitempty"`
	Self *string `json:"self,omitempty"`
}

// NewFileLinksResponse instantiates a new FileLinksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileLinksResponse() *FileLinksResponse {
	this := FileLinksResponse{}
	return &this
}

// NewFileLinksResponseWithDefaults instantiates a new FileLinksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileLinksResponseWithDefaults() *FileLinksResponse {
	this := FileLinksResponse{}
	return &this
}

// GetGit returns the Git field value if set, zero value otherwise.
func (o *FileLinksResponse) GetGit() string {
	if o == nil || o.Git == nil {
		var ret string
		return ret
	}
	return *o.Git
}

// GetGitOk returns a tuple with the Git field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLinksResponse) GetGitOk() (*string, bool) {
	if o == nil || o.Git == nil {
		return nil, false
	}
	return o.Git, true
}

// HasGit returns a boolean if a field has been set.
func (o *FileLinksResponse) HasGit() bool {
	if o != nil && o.Git != nil {
		return true
	}

	return false
}

// SetGit gets a reference to the given string and assigns it to the Git field.
func (o *FileLinksResponse) SetGit(v string) {
	o.Git = &v
}

// GetHtml returns the Html field value if set, zero value otherwise.
func (o *FileLinksResponse) GetHtml() string {
	if o == nil || o.Html == nil {
		var ret string
		return ret
	}
	return *o.Html
}

// GetHtmlOk returns a tuple with the Html field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLinksResponse) GetHtmlOk() (*string, bool) {
	if o == nil || o.Html == nil {
		return nil, false
	}
	return o.Html, true
}

// HasHtml returns a boolean if a field has been set.
func (o *FileLinksResponse) HasHtml() bool {
	if o != nil && o.Html != nil {
		return true
	}

	return false
}

// SetHtml gets a reference to the given string and assigns it to the Html field.
func (o *FileLinksResponse) SetHtml(v string) {
	o.Html = &v
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *FileLinksResponse) GetSelf() string {
	if o == nil || o.Self == nil {
		var ret string
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileLinksResponse) GetSelfOk() (*string, bool) {
	if o == nil || o.Self == nil {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *FileLinksResponse) HasSelf() bool {
	if o != nil && o.Self != nil {
		return true
	}

	return false
}

// SetSelf gets a reference to the given string and assigns it to the Self field.
func (o *FileLinksResponse) SetSelf(v string) {
	o.Self = &v
}

func (o FileLinksResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Git != nil {
		toSerialize["git"] = o.Git
	}
	if o.Html != nil {
		toSerialize["html"] = o.Html
	}
	if o.Self != nil {
		toSerialize["self"] = o.Self
	}
	return json.Marshal(toSerialize)
}

type NullableFileLinksResponse struct {
	value *FileLinksResponse
	isSet bool
}

func (v NullableFileLinksResponse) Get() *FileLinksResponse {
	return v.value
}

func (v *NullableFileLinksResponse) Set(val *FileLinksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileLinksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileLinksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileLinksResponse(val *FileLinksResponse) *NullableFileLinksResponse {
	return &NullableFileLinksResponse{value: val, isSet: true}
}

func (v NullableFileLinksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileLinksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


