/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PullReview PullReview represents a pull request review
type PullReview struct {
	Body *string `json:"body,omitempty"`
	CommentsCount *int64 `json:"comments_count,omitempty"`
	CommitId *string `json:"commit_id,omitempty"`
	Dismissed *bool `json:"dismissed,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Official *bool `json:"official,omitempty"`
	PullRequestUrl *string `json:"pull_request_url,omitempty"`
	Stale *bool `json:"stale,omitempty"`
	// ReviewStateType review state type
	State *string `json:"state,omitempty"`
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
	Team *Team `json:"team,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	User *User `json:"user,omitempty"`
}

// NewPullReview instantiates a new PullReview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullReview() *PullReview {
	this := PullReview{}
	return &this
}

// NewPullReviewWithDefaults instantiates a new PullReview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullReviewWithDefaults() *PullReview {
	this := PullReview{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *PullReview) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *PullReview) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *PullReview) SetBody(v string) {
	o.Body = &v
}

// GetCommentsCount returns the CommentsCount field value if set, zero value otherwise.
func (o *PullReview) GetCommentsCount() int64 {
	if o == nil || o.CommentsCount == nil {
		var ret int64
		return ret
	}
	return *o.CommentsCount
}

// GetCommentsCountOk returns a tuple with the CommentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetCommentsCountOk() (*int64, bool) {
	if o == nil || o.CommentsCount == nil {
		return nil, false
	}
	return o.CommentsCount, true
}

// HasCommentsCount returns a boolean if a field has been set.
func (o *PullReview) HasCommentsCount() bool {
	if o != nil && o.CommentsCount != nil {
		return true
	}

	return false
}

// SetCommentsCount gets a reference to the given int64 and assigns it to the CommentsCount field.
func (o *PullReview) SetCommentsCount(v int64) {
	o.CommentsCount = &v
}

// GetCommitId returns the CommitId field value if set, zero value otherwise.
func (o *PullReview) GetCommitId() string {
	if o == nil || o.CommitId == nil {
		var ret string
		return ret
	}
	return *o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetCommitIdOk() (*string, bool) {
	if o == nil || o.CommitId == nil {
		return nil, false
	}
	return o.CommitId, true
}

// HasCommitId returns a boolean if a field has been set.
func (o *PullReview) HasCommitId() bool {
	if o != nil && o.CommitId != nil {
		return true
	}

	return false
}

// SetCommitId gets a reference to the given string and assigns it to the CommitId field.
func (o *PullReview) SetCommitId(v string) {
	o.CommitId = &v
}

// GetDismissed returns the Dismissed field value if set, zero value otherwise.
func (o *PullReview) GetDismissed() bool {
	if o == nil || o.Dismissed == nil {
		var ret bool
		return ret
	}
	return *o.Dismissed
}

// GetDismissedOk returns a tuple with the Dismissed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetDismissedOk() (*bool, bool) {
	if o == nil || o.Dismissed == nil {
		return nil, false
	}
	return o.Dismissed, true
}

// HasDismissed returns a boolean if a field has been set.
func (o *PullReview) HasDismissed() bool {
	if o != nil && o.Dismissed != nil {
		return true
	}

	return false
}

// SetDismissed gets a reference to the given bool and assigns it to the Dismissed field.
func (o *PullReview) SetDismissed(v bool) {
	o.Dismissed = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *PullReview) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *PullReview) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *PullReview) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PullReview) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PullReview) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PullReview) SetId(v int64) {
	o.Id = &v
}

// GetOfficial returns the Official field value if set, zero value otherwise.
func (o *PullReview) GetOfficial() bool {
	if o == nil || o.Official == nil {
		var ret bool
		return ret
	}
	return *o.Official
}

// GetOfficialOk returns a tuple with the Official field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetOfficialOk() (*bool, bool) {
	if o == nil || o.Official == nil {
		return nil, false
	}
	return o.Official, true
}

// HasOfficial returns a boolean if a field has been set.
func (o *PullReview) HasOfficial() bool {
	if o != nil && o.Official != nil {
		return true
	}

	return false
}

// SetOfficial gets a reference to the given bool and assigns it to the Official field.
func (o *PullReview) SetOfficial(v bool) {
	o.Official = &v
}

// GetPullRequestUrl returns the PullRequestUrl field value if set, zero value otherwise.
func (o *PullReview) GetPullRequestUrl() string {
	if o == nil || o.PullRequestUrl == nil {
		var ret string
		return ret
	}
	return *o.PullRequestUrl
}

// GetPullRequestUrlOk returns a tuple with the PullRequestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetPullRequestUrlOk() (*string, bool) {
	if o == nil || o.PullRequestUrl == nil {
		return nil, false
	}
	return o.PullRequestUrl, true
}

// HasPullRequestUrl returns a boolean if a field has been set.
func (o *PullReview) HasPullRequestUrl() bool {
	if o != nil && o.PullRequestUrl != nil {
		return true
	}

	return false
}

// SetPullRequestUrl gets a reference to the given string and assigns it to the PullRequestUrl field.
func (o *PullReview) SetPullRequestUrl(v string) {
	o.PullRequestUrl = &v
}

// GetStale returns the Stale field value if set, zero value otherwise.
func (o *PullReview) GetStale() bool {
	if o == nil || o.Stale == nil {
		var ret bool
		return ret
	}
	return *o.Stale
}

// GetStaleOk returns a tuple with the Stale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetStaleOk() (*bool, bool) {
	if o == nil || o.Stale == nil {
		return nil, false
	}
	return o.Stale, true
}

// HasStale returns a boolean if a field has been set.
func (o *PullReview) HasStale() bool {
	if o != nil && o.Stale != nil {
		return true
	}

	return false
}

// SetStale gets a reference to the given bool and assigns it to the Stale field.
func (o *PullReview) SetStale(v bool) {
	o.Stale = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PullReview) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PullReview) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PullReview) SetState(v string) {
	o.State = &v
}

// GetSubmittedAt returns the SubmittedAt field value if set, zero value otherwise.
func (o *PullReview) GetSubmittedAt() time.Time {
	if o == nil || o.SubmittedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.SubmittedAt
}

// GetSubmittedAtOk returns a tuple with the SubmittedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetSubmittedAtOk() (*time.Time, bool) {
	if o == nil || o.SubmittedAt == nil {
		return nil, false
	}
	return o.SubmittedAt, true
}

// HasSubmittedAt returns a boolean if a field has been set.
func (o *PullReview) HasSubmittedAt() bool {
	if o != nil && o.SubmittedAt != nil {
		return true
	}

	return false
}

// SetSubmittedAt gets a reference to the given time.Time and assigns it to the SubmittedAt field.
func (o *PullReview) SetSubmittedAt(v time.Time) {
	o.SubmittedAt = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *PullReview) GetTeam() Team {
	if o == nil || o.Team == nil {
		var ret Team
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetTeamOk() (*Team, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *PullReview) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given Team and assigns it to the Team field.
func (o *PullReview) SetTeam(v Team) {
	o.Team = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PullReview) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PullReview) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PullReview) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PullReview) GetUser() User {
	if o == nil || o.User == nil {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullReview) GetUserOk() (*User, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PullReview) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *PullReview) SetUser(v User) {
	o.User = &v
}

func (o PullReview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.CommentsCount != nil {
		toSerialize["comments_count"] = o.CommentsCount
	}
	if o.CommitId != nil {
		toSerialize["commit_id"] = o.CommitId
	}
	if o.Dismissed != nil {
		toSerialize["dismissed"] = o.Dismissed
	}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Official != nil {
		toSerialize["official"] = o.Official
	}
	if o.PullRequestUrl != nil {
		toSerialize["pull_request_url"] = o.PullRequestUrl
	}
	if o.Stale != nil {
		toSerialize["stale"] = o.Stale
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.SubmittedAt != nil {
		toSerialize["submitted_at"] = o.SubmittedAt
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullablePullReview struct {
	value *PullReview
	isSet bool
}

func (v NullablePullReview) Get() *PullReview {
	return v.value
}

func (v *NullablePullReview) Set(val *PullReview) {
	v.value = val
	v.isSet = true
}

func (v NullablePullReview) IsSet() bool {
	return v.isSet
}

func (v *NullablePullReview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullReview(val *PullReview) *NullablePullReview {
	return &NullablePullReview{value: val, isSet: true}
}

func (v NullablePullReview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullReview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


