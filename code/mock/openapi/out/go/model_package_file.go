/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PackageFile PackageFile represents a package file
type PackageFile struct {
	Size *int64 `json:"Size,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Md5 *string `json:"md5,omitempty"`
	Name *string `json:"name,omitempty"`
	Sha1 *string `json:"sha1,omitempty"`
	Sha256 *string `json:"sha256,omitempty"`
	Sha512 *string `json:"sha512,omitempty"`
}

// NewPackageFile instantiates a new PackageFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageFile() *PackageFile {
	this := PackageFile{}
	return &this
}

// NewPackageFileWithDefaults instantiates a new PackageFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageFileWithDefaults() *PackageFile {
	this := PackageFile{}
	return &this
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PackageFile) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PackageFile) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *PackageFile) SetSize(v int64) {
	o.Size = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PackageFile) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PackageFile) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PackageFile) SetId(v int64) {
	o.Id = &v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise.
func (o *PackageFile) GetMd5() string {
	if o == nil || o.Md5 == nil {
		var ret string
		return ret
	}
	return *o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetMd5Ok() (*string, bool) {
	if o == nil || o.Md5 == nil {
		return nil, false
	}
	return o.Md5, true
}

// HasMd5 returns a boolean if a field has been set.
func (o *PackageFile) HasMd5() bool {
	if o != nil && o.Md5 != nil {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given string and assigns it to the Md5 field.
func (o *PackageFile) SetMd5(v string) {
	o.Md5 = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PackageFile) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PackageFile) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PackageFile) SetName(v string) {
	o.Name = &v
}

// GetSha1 returns the Sha1 field value if set, zero value otherwise.
func (o *PackageFile) GetSha1() string {
	if o == nil || o.Sha1 == nil {
		var ret string
		return ret
	}
	return *o.Sha1
}

// GetSha1Ok returns a tuple with the Sha1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetSha1Ok() (*string, bool) {
	if o == nil || o.Sha1 == nil {
		return nil, false
	}
	return o.Sha1, true
}

// HasSha1 returns a boolean if a field has been set.
func (o *PackageFile) HasSha1() bool {
	if o != nil && o.Sha1 != nil {
		return true
	}

	return false
}

// SetSha1 gets a reference to the given string and assigns it to the Sha1 field.
func (o *PackageFile) SetSha1(v string) {
	o.Sha1 = &v
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise.
func (o *PackageFile) GetSha256() string {
	if o == nil || o.Sha256 == nil {
		var ret string
		return ret
	}
	return *o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetSha256Ok() (*string, bool) {
	if o == nil || o.Sha256 == nil {
		return nil, false
	}
	return o.Sha256, true
}

// HasSha256 returns a boolean if a field has been set.
func (o *PackageFile) HasSha256() bool {
	if o != nil && o.Sha256 != nil {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given string and assigns it to the Sha256 field.
func (o *PackageFile) SetSha256(v string) {
	o.Sha256 = &v
}

// GetSha512 returns the Sha512 field value if set, zero value otherwise.
func (o *PackageFile) GetSha512() string {
	if o == nil || o.Sha512 == nil {
		var ret string
		return ret
	}
	return *o.Sha512
}

// GetSha512Ok returns a tuple with the Sha512 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFile) GetSha512Ok() (*string, bool) {
	if o == nil || o.Sha512 == nil {
		return nil, false
	}
	return o.Sha512, true
}

// HasSha512 returns a boolean if a field has been set.
func (o *PackageFile) HasSha512() bool {
	if o != nil && o.Sha512 != nil {
		return true
	}

	return false
}

// SetSha512 gets a reference to the given string and assigns it to the Sha512 field.
func (o *PackageFile) SetSha512(v string) {
	o.Sha512 = &v
}

func (o PackageFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Size != nil {
		toSerialize["Size"] = o.Size
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Md5 != nil {
		toSerialize["md5"] = o.Md5
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Sha1 != nil {
		toSerialize["sha1"] = o.Sha1
	}
	if o.Sha256 != nil {
		toSerialize["sha256"] = o.Sha256
	}
	if o.Sha512 != nil {
		toSerialize["sha512"] = o.Sha512
	}
	return json.Marshal(toSerialize)
}

type NullablePackageFile struct {
	value *PackageFile
	isSet bool
}

func (v NullablePackageFile) Get() *PackageFile {
	return v.value
}

func (v *NullablePackageFile) Set(val *PackageFile) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageFile) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageFile(val *PackageFile) *NullablePackageFile {
	return &NullablePackageFile{value: val, isSet: true}
}

func (v NullablePackageFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


