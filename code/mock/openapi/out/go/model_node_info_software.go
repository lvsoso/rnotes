/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NodeInfoSoftware NodeInfoSoftware contains Metadata about server software in use
type NodeInfoSoftware struct {
	Homepage *string `json:"homepage,omitempty"`
	Name *string `json:"name,omitempty"`
	Repository *string `json:"repository,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewNodeInfoSoftware instantiates a new NodeInfoSoftware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInfoSoftware() *NodeInfoSoftware {
	this := NodeInfoSoftware{}
	return &this
}

// NewNodeInfoSoftwareWithDefaults instantiates a new NodeInfoSoftware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInfoSoftwareWithDefaults() *NodeInfoSoftware {
	this := NodeInfoSoftware{}
	return &this
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *NodeInfoSoftware) GetHomepage() string {
	if o == nil || o.Homepage == nil {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfoSoftware) GetHomepageOk() (*string, bool) {
	if o == nil || o.Homepage == nil {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *NodeInfoSoftware) HasHomepage() bool {
	if o != nil && o.Homepage != nil {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *NodeInfoSoftware) SetHomepage(v string) {
	o.Homepage = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NodeInfoSoftware) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfoSoftware) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NodeInfoSoftware) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NodeInfoSoftware) SetName(v string) {
	o.Name = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *NodeInfoSoftware) GetRepository() string {
	if o == nil || o.Repository == nil {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfoSoftware) GetRepositoryOk() (*string, bool) {
	if o == nil || o.Repository == nil {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *NodeInfoSoftware) HasRepository() bool {
	if o != nil && o.Repository != nil {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *NodeInfoSoftware) SetRepository(v string) {
	o.Repository = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NodeInfoSoftware) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfoSoftware) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NodeInfoSoftware) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NodeInfoSoftware) SetVersion(v string) {
	o.Version = &v
}

func (o NodeInfoSoftware) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Homepage != nil {
		toSerialize["homepage"] = o.Homepage
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Repository != nil {
		toSerialize["repository"] = o.Repository
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableNodeInfoSoftware struct {
	value *NodeInfoSoftware
	isSet bool
}

func (v NullableNodeInfoSoftware) Get() *NodeInfoSoftware {
	return v.value
}

func (v *NullableNodeInfoSoftware) Set(val *NodeInfoSoftware) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInfoSoftware) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInfoSoftware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInfoSoftware(val *NodeInfoSoftware) *NullableNodeInfoSoftware {
	return &NullableNodeInfoSoftware{value: val, isSet: true}
}

func (v NullableNodeInfoSoftware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInfoSoftware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


