/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccessToken struct for AccessToken
type AccessToken struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Scopes *[]string `json:"scopes,omitempty"`
	Sha1 *string `json:"sha1,omitempty"`
	TokenLastEight *string `json:"token_last_eight,omitempty"`
}

// NewAccessToken instantiates a new AccessToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessToken() *AccessToken {
	this := AccessToken{}
	return &this
}

// NewAccessTokenWithDefaults instantiates a new AccessToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenWithDefaults() *AccessToken {
	this := AccessToken{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessToken) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessToken) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessToken) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AccessToken) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessToken) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessToken) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessToken) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessToken) SetName(v string) {
	o.Name = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AccessToken) GetScopes() []string {
	if o == nil || o.Scopes == nil {
		var ret []string
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessToken) GetScopesOk() (*[]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AccessToken) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AccessToken) SetScopes(v []string) {
	o.Scopes = &v
}

// GetSha1 returns the Sha1 field value if set, zero value otherwise.
func (o *AccessToken) GetSha1() string {
	if o == nil || o.Sha1 == nil {
		var ret string
		return ret
	}
	return *o.Sha1
}

// GetSha1Ok returns a tuple with the Sha1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessToken) GetSha1Ok() (*string, bool) {
	if o == nil || o.Sha1 == nil {
		return nil, false
	}
	return o.Sha1, true
}

// HasSha1 returns a boolean if a field has been set.
func (o *AccessToken) HasSha1() bool {
	if o != nil && o.Sha1 != nil {
		return true
	}

	return false
}

// SetSha1 gets a reference to the given string and assigns it to the Sha1 field.
func (o *AccessToken) SetSha1(v string) {
	o.Sha1 = &v
}

// GetTokenLastEight returns the TokenLastEight field value if set, zero value otherwise.
func (o *AccessToken) GetTokenLastEight() string {
	if o == nil || o.TokenLastEight == nil {
		var ret string
		return ret
	}
	return *o.TokenLastEight
}

// GetTokenLastEightOk returns a tuple with the TokenLastEight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessToken) GetTokenLastEightOk() (*string, bool) {
	if o == nil || o.TokenLastEight == nil {
		return nil, false
	}
	return o.TokenLastEight, true
}

// HasTokenLastEight returns a boolean if a field has been set.
func (o *AccessToken) HasTokenLastEight() bool {
	if o != nil && o.TokenLastEight != nil {
		return true
	}

	return false
}

// SetTokenLastEight gets a reference to the given string and assigns it to the TokenLastEight field.
func (o *AccessToken) SetTokenLastEight(v string) {
	o.TokenLastEight = &v
}

func (o AccessToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.Sha1 != nil {
		toSerialize["sha1"] = o.Sha1
	}
	if o.TokenLastEight != nil {
		toSerialize["token_last_eight"] = o.TokenLastEight
	}
	return json.Marshal(toSerialize)
}

type NullableAccessToken struct {
	value *AccessToken
	isSet bool
}

func (v NullableAccessToken) Get() *AccessToken {
	return v.value
}

func (v *NullableAccessToken) Set(val *AccessToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessToken(val *AccessToken) *NullableAccessToken {
	return &NullableAccessToken{value: val, isSet: true}
}

func (v NullableAccessToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


