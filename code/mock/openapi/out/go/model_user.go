/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// User User represents a user
type User struct {
	// Is user active
	Active *bool `json:"active,omitempty"`
	// URL to the user's avatar
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	// the user's description
	Description *string `json:"description,omitempty"`
	Email *string `json:"email,omitempty"`
	// user counts
	FollowersCount *int64 `json:"followers_count,omitempty"`
	FollowingCount *int64 `json:"following_count,omitempty"`
	// the user's full name
	FullName *string `json:"full_name,omitempty"`
	// the user's id
	Id *int64 `json:"id,omitempty"`
	// Is the user an administrator
	IsAdmin *bool `json:"is_admin,omitempty"`
	// User locale
	Language *string `json:"language,omitempty"`
	LastLogin *time.Time `json:"last_login,omitempty"`
	// the user's location
	Location *string `json:"location,omitempty"`
	// the user's username
	Login *string `json:"login,omitempty"`
	// the user's authentication sign-in name.
	LoginName *string `json:"login_name,omitempty"`
	// Is user login prohibited
	ProhibitLogin *bool `json:"prohibit_login,omitempty"`
	// Is user restricted
	Restricted *bool `json:"restricted,omitempty"`
	StarredReposCount *int64 `json:"starred_repos_count,omitempty"`
	// User visibility level option: public, limited, private
	Visibility *string `json:"visibility,omitempty"`
	// the user's website
	Website *string `json:"website,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	var loginName string = "empty"
	this.LoginName = &loginName
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	var loginName string = "empty"
	this.LoginName = &loginName
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *User) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *User) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *User) SetActive(v bool) {
	o.Active = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *User) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl == nil {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAvatarUrlOk() (*string, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *User) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *User) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *User) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *User) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *User) SetCreated(v time.Time) {
	o.Created = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *User) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *User) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *User) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetFollowersCount returns the FollowersCount field value if set, zero value otherwise.
func (o *User) GetFollowersCount() int64 {
	if o == nil || o.FollowersCount == nil {
		var ret int64
		return ret
	}
	return *o.FollowersCount
}

// GetFollowersCountOk returns a tuple with the FollowersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFollowersCountOk() (*int64, bool) {
	if o == nil || o.FollowersCount == nil {
		return nil, false
	}
	return o.FollowersCount, true
}

// HasFollowersCount returns a boolean if a field has been set.
func (o *User) HasFollowersCount() bool {
	if o != nil && o.FollowersCount != nil {
		return true
	}

	return false
}

// SetFollowersCount gets a reference to the given int64 and assigns it to the FollowersCount field.
func (o *User) SetFollowersCount(v int64) {
	o.FollowersCount = &v
}

// GetFollowingCount returns the FollowingCount field value if set, zero value otherwise.
func (o *User) GetFollowingCount() int64 {
	if o == nil || o.FollowingCount == nil {
		var ret int64
		return ret
	}
	return *o.FollowingCount
}

// GetFollowingCountOk returns a tuple with the FollowingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFollowingCountOk() (*int64, bool) {
	if o == nil || o.FollowingCount == nil {
		return nil, false
	}
	return o.FollowingCount, true
}

// HasFollowingCount returns a boolean if a field has been set.
func (o *User) HasFollowingCount() bool {
	if o != nil && o.FollowingCount != nil {
		return true
	}

	return false
}

// SetFollowingCount gets a reference to the given int64 and assigns it to the FollowingCount field.
func (o *User) SetFollowingCount(v int64) {
	o.FollowingCount = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *User) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *User) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *User) SetFullName(v string) {
	o.FullName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *User) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *User) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *User) SetId(v int64) {
	o.Id = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *User) GetIsAdmin() bool {
	if o == nil || o.IsAdmin == nil {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsAdminOk() (*bool, bool) {
	if o == nil || o.IsAdmin == nil {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *User) HasIsAdmin() bool {
	if o != nil && o.IsAdmin != nil {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *User) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *User) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *User) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *User) SetLanguage(v string) {
	o.Language = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise.
func (o *User) GetLastLogin() time.Time {
	if o == nil || o.LastLogin == nil {
		var ret time.Time
		return ret
	}
	return *o.LastLogin
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastLoginOk() (*time.Time, bool) {
	if o == nil || o.LastLogin == nil {
		return nil, false
	}
	return o.LastLogin, true
}

// HasLastLogin returns a boolean if a field has been set.
func (o *User) HasLastLogin() bool {
	if o != nil && o.LastLogin != nil {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given time.Time and assigns it to the LastLogin field.
func (o *User) SetLastLogin(v time.Time) {
	o.LastLogin = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *User) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *User) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *User) SetLocation(v string) {
	o.Location = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *User) GetLogin() string {
	if o == nil || o.Login == nil {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLoginOk() (*string, bool) {
	if o == nil || o.Login == nil {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *User) HasLogin() bool {
	if o != nil && o.Login != nil {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *User) SetLogin(v string) {
	o.Login = &v
}

// GetLoginName returns the LoginName field value if set, zero value otherwise.
func (o *User) GetLoginName() string {
	if o == nil || o.LoginName == nil {
		var ret string
		return ret
	}
	return *o.LoginName
}

// GetLoginNameOk returns a tuple with the LoginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLoginNameOk() (*string, bool) {
	if o == nil || o.LoginName == nil {
		return nil, false
	}
	return o.LoginName, true
}

// HasLoginName returns a boolean if a field has been set.
func (o *User) HasLoginName() bool {
	if o != nil && o.LoginName != nil {
		return true
	}

	return false
}

// SetLoginName gets a reference to the given string and assigns it to the LoginName field.
func (o *User) SetLoginName(v string) {
	o.LoginName = &v
}

// GetProhibitLogin returns the ProhibitLogin field value if set, zero value otherwise.
func (o *User) GetProhibitLogin() bool {
	if o == nil || o.ProhibitLogin == nil {
		var ret bool
		return ret
	}
	return *o.ProhibitLogin
}

// GetProhibitLoginOk returns a tuple with the ProhibitLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProhibitLoginOk() (*bool, bool) {
	if o == nil || o.ProhibitLogin == nil {
		return nil, false
	}
	return o.ProhibitLogin, true
}

// HasProhibitLogin returns a boolean if a field has been set.
func (o *User) HasProhibitLogin() bool {
	if o != nil && o.ProhibitLogin != nil {
		return true
	}

	return false
}

// SetProhibitLogin gets a reference to the given bool and assigns it to the ProhibitLogin field.
func (o *User) SetProhibitLogin(v bool) {
	o.ProhibitLogin = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *User) GetRestricted() bool {
	if o == nil || o.Restricted == nil {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRestrictedOk() (*bool, bool) {
	if o == nil || o.Restricted == nil {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *User) HasRestricted() bool {
	if o != nil && o.Restricted != nil {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *User) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetStarredReposCount returns the StarredReposCount field value if set, zero value otherwise.
func (o *User) GetStarredReposCount() int64 {
	if o == nil || o.StarredReposCount == nil {
		var ret int64
		return ret
	}
	return *o.StarredReposCount
}

// GetStarredReposCountOk returns a tuple with the StarredReposCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStarredReposCountOk() (*int64, bool) {
	if o == nil || o.StarredReposCount == nil {
		return nil, false
	}
	return o.StarredReposCount, true
}

// HasStarredReposCount returns a boolean if a field has been set.
func (o *User) HasStarredReposCount() bool {
	if o != nil && o.StarredReposCount != nil {
		return true
	}

	return false
}

// SetStarredReposCount gets a reference to the given int64 and assigns it to the StarredReposCount field.
func (o *User) SetStarredReposCount(v int64) {
	o.StarredReposCount = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *User) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *User) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *User) SetVisibility(v string) {
	o.Visibility = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *User) GetWebsite() string {
	if o == nil || o.Website == nil {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWebsiteOk() (*string, bool) {
	if o == nil || o.Website == nil {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *User) HasWebsite() bool {
	if o != nil && o.Website != nil {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *User) SetWebsite(v string) {
	o.Website = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FollowersCount != nil {
		toSerialize["followers_count"] = o.FollowersCount
	}
	if o.FollowingCount != nil {
		toSerialize["following_count"] = o.FollowingCount
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IsAdmin != nil {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.LastLogin != nil {
		toSerialize["last_login"] = o.LastLogin
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Login != nil {
		toSerialize["login"] = o.Login
	}
	if o.LoginName != nil {
		toSerialize["login_name"] = o.LoginName
	}
	if o.ProhibitLogin != nil {
		toSerialize["prohibit_login"] = o.ProhibitLogin
	}
	if o.Restricted != nil {
		toSerialize["restricted"] = o.Restricted
	}
	if o.StarredReposCount != nil {
		toSerialize["starred_repos_count"] = o.StarredReposCount
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Website != nil {
		toSerialize["website"] = o.Website
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


