/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IssueDeadline IssueDeadline represents an issue deadline
type IssueDeadline struct {
	DueDate *time.Time `json:"due_date,omitempty"`
}

// NewIssueDeadline instantiates a new IssueDeadline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueDeadline() *IssueDeadline {
	this := IssueDeadline{}
	return &this
}

// NewIssueDeadlineWithDefaults instantiates a new IssueDeadline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueDeadlineWithDefaults() *IssueDeadline {
	this := IssueDeadline{}
	return &this
}

// GetDueDate returns the DueDate field value if set, zero value otherwise.
func (o *IssueDeadline) GetDueDate() time.Time {
	if o == nil || o.DueDate == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDate
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueDeadline) GetDueDateOk() (*time.Time, bool) {
	if o == nil || o.DueDate == nil {
		return nil, false
	}
	return o.DueDate, true
}

// HasDueDate returns a boolean if a field has been set.
func (o *IssueDeadline) HasDueDate() bool {
	if o != nil && o.DueDate != nil {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given time.Time and assigns it to the DueDate field.
func (o *IssueDeadline) SetDueDate(v time.Time) {
	o.DueDate = &v
}

func (o IssueDeadline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DueDate != nil {
		toSerialize["due_date"] = o.DueDate
	}
	return json.Marshal(toSerialize)
}

type NullableIssueDeadline struct {
	value *IssueDeadline
	isSet bool
}

func (v NullableIssueDeadline) Get() *IssueDeadline {
	return v.value
}

func (v *NullableIssueDeadline) Set(val *IssueDeadline) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueDeadline) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueDeadline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueDeadline(val *IssueDeadline) *NullableIssueDeadline {
	return &NullableIssueDeadline{value: val, isSet: true}
}

func (v NullableIssueDeadline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueDeadline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


