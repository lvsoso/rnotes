/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditReactionOption EditReactionOption contain the reaction type
type EditReactionOption struct {
	Content *string `json:"content,omitempty"`
}

// NewEditReactionOption instantiates a new EditReactionOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditReactionOption() *EditReactionOption {
	this := EditReactionOption{}
	return &this
}

// NewEditReactionOptionWithDefaults instantiates a new EditReactionOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditReactionOptionWithDefaults() *EditReactionOption {
	this := EditReactionOption{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EditReactionOption) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditReactionOption) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EditReactionOption) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *EditReactionOption) SetContent(v string) {
	o.Content = &v
}

func (o EditReactionOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableEditReactionOption struct {
	value *EditReactionOption
	isSet bool
}

func (v NullableEditReactionOption) Get() *EditReactionOption {
	return v.value
}

func (v *NullableEditReactionOption) Set(val *EditReactionOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditReactionOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditReactionOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditReactionOption(val *EditReactionOption) *NullableEditReactionOption {
	return &NullableEditReactionOption{value: val, isSet: true}
}

func (v NullableEditReactionOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditReactionOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


