/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateFileOptions CreateFileOptions options for creating files Note: `author` and `committer` are optional (if only one is given, it will be used for the other, otherwise the authenticated user will be used)
type CreateFileOptions struct {
	Author *Identity `json:"author,omitempty"`
	// branch (optional) to base this file from. if not given, the default branch is used
	Branch *string `json:"branch,omitempty"`
	Committer *Identity `json:"committer,omitempty"`
	// content must be base64 encoded
	Content string `json:"content"`
	Dates *CommitDateOptions `json:"dates,omitempty"`
	// message (optional) for the commit of this file. if not supplied, a default message will be used
	Message *string `json:"message,omitempty"`
	// new_branch (optional) will make a new branch from `branch` before creating the file
	NewBranch *string `json:"new_branch,omitempty"`
	// Add a Signed-off-by trailer by the committer at the end of the commit log message.
	Signoff *bool `json:"signoff,omitempty"`
}

// NewCreateFileOptions instantiates a new CreateFileOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFileOptions(content string) *CreateFileOptions {
	this := CreateFileOptions{}
	this.Content = content
	return &this
}

// NewCreateFileOptionsWithDefaults instantiates a new CreateFileOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFileOptionsWithDefaults() *CreateFileOptions {
	this := CreateFileOptions{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CreateFileOptions) GetAuthor() Identity {
	if o == nil || o.Author == nil {
		var ret Identity
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetAuthorOk() (*Identity, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CreateFileOptions) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Identity and assigns it to the Author field.
func (o *CreateFileOptions) SetAuthor(v Identity) {
	o.Author = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *CreateFileOptions) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *CreateFileOptions) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *CreateFileOptions) SetBranch(v string) {
	o.Branch = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *CreateFileOptions) GetCommitter() Identity {
	if o == nil || o.Committer == nil {
		var ret Identity
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetCommitterOk() (*Identity, bool) {
	if o == nil || o.Committer == nil {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *CreateFileOptions) HasCommitter() bool {
	if o != nil && o.Committer != nil {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given Identity and assigns it to the Committer field.
func (o *CreateFileOptions) SetCommitter(v Identity) {
	o.Committer = &v
}

// GetContent returns the Content field value
func (o *CreateFileOptions) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CreateFileOptions) SetContent(v string) {
	o.Content = v
}

// GetDates returns the Dates field value if set, zero value otherwise.
func (o *CreateFileOptions) GetDates() CommitDateOptions {
	if o == nil || o.Dates == nil {
		var ret CommitDateOptions
		return ret
	}
	return *o.Dates
}

// GetDatesOk returns a tuple with the Dates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetDatesOk() (*CommitDateOptions, bool) {
	if o == nil || o.Dates == nil {
		return nil, false
	}
	return o.Dates, true
}

// HasDates returns a boolean if a field has been set.
func (o *CreateFileOptions) HasDates() bool {
	if o != nil && o.Dates != nil {
		return true
	}

	return false
}

// SetDates gets a reference to the given CommitDateOptions and assigns it to the Dates field.
func (o *CreateFileOptions) SetDates(v CommitDateOptions) {
	o.Dates = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CreateFileOptions) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CreateFileOptions) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CreateFileOptions) SetMessage(v string) {
	o.Message = &v
}

// GetNewBranch returns the NewBranch field value if set, zero value otherwise.
func (o *CreateFileOptions) GetNewBranch() string {
	if o == nil || o.NewBranch == nil {
		var ret string
		return ret
	}
	return *o.NewBranch
}

// GetNewBranchOk returns a tuple with the NewBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetNewBranchOk() (*string, bool) {
	if o == nil || o.NewBranch == nil {
		return nil, false
	}
	return o.NewBranch, true
}

// HasNewBranch returns a boolean if a field has been set.
func (o *CreateFileOptions) HasNewBranch() bool {
	if o != nil && o.NewBranch != nil {
		return true
	}

	return false
}

// SetNewBranch gets a reference to the given string and assigns it to the NewBranch field.
func (o *CreateFileOptions) SetNewBranch(v string) {
	o.NewBranch = &v
}

// GetSignoff returns the Signoff field value if set, zero value otherwise.
func (o *CreateFileOptions) GetSignoff() bool {
	if o == nil || o.Signoff == nil {
		var ret bool
		return ret
	}
	return *o.Signoff
}

// GetSignoffOk returns a tuple with the Signoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileOptions) GetSignoffOk() (*bool, bool) {
	if o == nil || o.Signoff == nil {
		return nil, false
	}
	return o.Signoff, true
}

// HasSignoff returns a boolean if a field has been set.
func (o *CreateFileOptions) HasSignoff() bool {
	if o != nil && o.Signoff != nil {
		return true
	}

	return false
}

// SetSignoff gets a reference to the given bool and assigns it to the Signoff field.
func (o *CreateFileOptions) SetSignoff(v bool) {
	o.Signoff = &v
}

func (o CreateFileOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if o.Committer != nil {
		toSerialize["committer"] = o.Committer
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.Dates != nil {
		toSerialize["dates"] = o.Dates
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.NewBranch != nil {
		toSerialize["new_branch"] = o.NewBranch
	}
	if o.Signoff != nil {
		toSerialize["signoff"] = o.Signoff
	}
	return json.Marshal(toSerialize)
}

type NullableCreateFileOptions struct {
	value *CreateFileOptions
	isSet bool
}

func (v NullableCreateFileOptions) Get() *CreateFileOptions {
	return v.value
}

func (v *NullableCreateFileOptions) Set(val *CreateFileOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFileOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFileOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFileOptions(val *CreateFileOptions) *NullableCreateFileOptions {
	return &NullableCreateFileOptions{value: val, isSet: true}
}

func (v NullableCreateFileOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFileOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


