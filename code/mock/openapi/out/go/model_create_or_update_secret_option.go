/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateOrUpdateSecretOption CreateOrUpdateSecretOption options when creating or updating secret
type CreateOrUpdateSecretOption struct {
	// Data of the secret to update
	Data string `json:"data"`
}

// NewCreateOrUpdateSecretOption instantiates a new CreateOrUpdateSecretOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateSecretOption(data string) *CreateOrUpdateSecretOption {
	this := CreateOrUpdateSecretOption{}
	this.Data = data
	return &this
}

// NewCreateOrUpdateSecretOptionWithDefaults instantiates a new CreateOrUpdateSecretOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateSecretOptionWithDefaults() *CreateOrUpdateSecretOption {
	this := CreateOrUpdateSecretOption{}
	return &this
}

// GetData returns the Data field value
func (o *CreateOrUpdateSecretOption) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateSecretOption) GetDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateOrUpdateSecretOption) SetData(v string) {
	o.Data = v
}

func (o CreateOrUpdateSecretOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCreateOrUpdateSecretOption struct {
	value *CreateOrUpdateSecretOption
	isSet bool
}

func (v NullableCreateOrUpdateSecretOption) Get() *CreateOrUpdateSecretOption {
	return v.value
}

func (v *NullableCreateOrUpdateSecretOption) Set(val *CreateOrUpdateSecretOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateSecretOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateSecretOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateSecretOption(val *CreateOrUpdateSecretOption) *NullableCreateOrUpdateSecretOption {
	return &NullableCreateOrUpdateSecretOption{value: val, isSet: true}
}

func (v NullableCreateOrUpdateSecretOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateSecretOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


