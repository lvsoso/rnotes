/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TopicResponse TopicResponse for returning topics
type TopicResponse struct {
	Created *time.Time `json:"created,omitempty"`
	Id *int64 `json:"id,omitempty"`
	RepoCount *int64 `json:"repo_count,omitempty"`
	TopicName *string `json:"topic_name,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewTopicResponse instantiates a new TopicResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicResponse() *TopicResponse {
	this := TopicResponse{}
	return &this
}

// NewTopicResponseWithDefaults instantiates a new TopicResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicResponseWithDefaults() *TopicResponse {
	this := TopicResponse{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TopicResponse) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TopicResponse) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *TopicResponse) SetCreated(v time.Time) {
	o.Created = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TopicResponse) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicResponse) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TopicResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TopicResponse) SetId(v int64) {
	o.Id = &v
}

// GetRepoCount returns the RepoCount field value if set, zero value otherwise.
func (o *TopicResponse) GetRepoCount() int64 {
	if o == nil || o.RepoCount == nil {
		var ret int64
		return ret
	}
	return *o.RepoCount
}

// GetRepoCountOk returns a tuple with the RepoCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicResponse) GetRepoCountOk() (*int64, bool) {
	if o == nil || o.RepoCount == nil {
		return nil, false
	}
	return o.RepoCount, true
}

// HasRepoCount returns a boolean if a field has been set.
func (o *TopicResponse) HasRepoCount() bool {
	if o != nil && o.RepoCount != nil {
		return true
	}

	return false
}

// SetRepoCount gets a reference to the given int64 and assigns it to the RepoCount field.
func (o *TopicResponse) SetRepoCount(v int64) {
	o.RepoCount = &v
}

// GetTopicName returns the TopicName field value if set, zero value otherwise.
func (o *TopicResponse) GetTopicName() string {
	if o == nil || o.TopicName == nil {
		var ret string
		return ret
	}
	return *o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicResponse) GetTopicNameOk() (*string, bool) {
	if o == nil || o.TopicName == nil {
		return nil, false
	}
	return o.TopicName, true
}

// HasTopicName returns a boolean if a field has been set.
func (o *TopicResponse) HasTopicName() bool {
	if o != nil && o.TopicName != nil {
		return true
	}

	return false
}

// SetTopicName gets a reference to the given string and assigns it to the TopicName field.
func (o *TopicResponse) SetTopicName(v string) {
	o.TopicName = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *TopicResponse) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicResponse) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *TopicResponse) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *TopicResponse) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o TopicResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RepoCount != nil {
		toSerialize["repo_count"] = o.RepoCount
	}
	if o.TopicName != nil {
		toSerialize["topic_name"] = o.TopicName
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableTopicResponse struct {
	value *TopicResponse
	isSet bool
}

func (v NullableTopicResponse) Get() *TopicResponse {
	return v.value
}

func (v *NullableTopicResponse) Set(val *TopicResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicResponse(val *TopicResponse) *NullableTopicResponse {
	return &NullableTopicResponse{value: val, isSet: true}
}

func (v NullableTopicResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


