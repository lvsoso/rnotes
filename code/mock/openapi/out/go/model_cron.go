/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Cron Cron represents a Cron task
type Cron struct {
	ExecTimes *int64 `json:"exec_times,omitempty"`
	Name *string `json:"name,omitempty"`
	Next *time.Time `json:"next,omitempty"`
	Prev *time.Time `json:"prev,omitempty"`
	Schedule *string `json:"schedule,omitempty"`
}

// NewCron instantiates a new Cron object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCron() *Cron {
	this := Cron{}
	return &this
}

// NewCronWithDefaults instantiates a new Cron object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronWithDefaults() *Cron {
	this := Cron{}
	return &this
}

// GetExecTimes returns the ExecTimes field value if set, zero value otherwise.
func (o *Cron) GetExecTimes() int64 {
	if o == nil || o.ExecTimes == nil {
		var ret int64
		return ret
	}
	return *o.ExecTimes
}

// GetExecTimesOk returns a tuple with the ExecTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cron) GetExecTimesOk() (*int64, bool) {
	if o == nil || o.ExecTimes == nil {
		return nil, false
	}
	return o.ExecTimes, true
}

// HasExecTimes returns a boolean if a field has been set.
func (o *Cron) HasExecTimes() bool {
	if o != nil && o.ExecTimes != nil {
		return true
	}

	return false
}

// SetExecTimes gets a reference to the given int64 and assigns it to the ExecTimes field.
func (o *Cron) SetExecTimes(v int64) {
	o.ExecTimes = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Cron) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cron) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Cron) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Cron) SetName(v string) {
	o.Name = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *Cron) GetNext() time.Time {
	if o == nil || o.Next == nil {
		var ret time.Time
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cron) GetNextOk() (*time.Time, bool) {
	if o == nil || o.Next == nil {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *Cron) HasNext() bool {
	if o != nil && o.Next != nil {
		return true
	}

	return false
}

// SetNext gets a reference to the given time.Time and assigns it to the Next field.
func (o *Cron) SetNext(v time.Time) {
	o.Next = &v
}

// GetPrev returns the Prev field value if set, zero value otherwise.
func (o *Cron) GetPrev() time.Time {
	if o == nil || o.Prev == nil {
		var ret time.Time
		return ret
	}
	return *o.Prev
}

// GetPrevOk returns a tuple with the Prev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cron) GetPrevOk() (*time.Time, bool) {
	if o == nil || o.Prev == nil {
		return nil, false
	}
	return o.Prev, true
}

// HasPrev returns a boolean if a field has been set.
func (o *Cron) HasPrev() bool {
	if o != nil && o.Prev != nil {
		return true
	}

	return false
}

// SetPrev gets a reference to the given time.Time and assigns it to the Prev field.
func (o *Cron) SetPrev(v time.Time) {
	o.Prev = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *Cron) GetSchedule() string {
	if o == nil || o.Schedule == nil {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cron) GetScheduleOk() (*string, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *Cron) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *Cron) SetSchedule(v string) {
	o.Schedule = &v
}

func (o Cron) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExecTimes != nil {
		toSerialize["exec_times"] = o.ExecTimes
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}
	if o.Prev != nil {
		toSerialize["prev"] = o.Prev
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	return json.Marshal(toSerialize)
}

type NullableCron struct {
	value *Cron
	isSet bool
}

func (v NullableCron) Get() *Cron {
	return v.value
}

func (v *NullableCron) Set(val *Cron) {
	v.value = val
	v.isSet = true
}

func (v NullableCron) IsSet() bool {
	return v.isSet
}

func (v *NullableCron) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCron(val *Cron) *NullableCron {
	return &NullableCron{value: val, isSet: true}
}

func (v NullableCron) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCron) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


