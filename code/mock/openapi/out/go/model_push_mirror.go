/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PushMirror PushMirror represents information of a push mirror
type PushMirror struct {
	Created *time.Time `json:"created,omitempty"`
	Interval *string `json:"interval,omitempty"`
	LastError *string `json:"last_error,omitempty"`
	LastUpdate *time.Time `json:"last_update,omitempty"`
	RemoteAddress *string `json:"remote_address,omitempty"`
	RemoteName *string `json:"remote_name,omitempty"`
	RepoName *string `json:"repo_name,omitempty"`
	SyncOnCommit *bool `json:"sync_on_commit,omitempty"`
}

// NewPushMirror instantiates a new PushMirror object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushMirror() *PushMirror {
	this := PushMirror{}
	return &this
}

// NewPushMirrorWithDefaults instantiates a new PushMirror object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushMirrorWithDefaults() *PushMirror {
	this := PushMirror{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *PushMirror) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PushMirror) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *PushMirror) SetCreated(v time.Time) {
	o.Created = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *PushMirror) GetInterval() string {
	if o == nil || o.Interval == nil {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetIntervalOk() (*string, bool) {
	if o == nil || o.Interval == nil {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *PushMirror) HasInterval() bool {
	if o != nil && o.Interval != nil {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *PushMirror) SetInterval(v string) {
	o.Interval = &v
}

// GetLastError returns the LastError field value if set, zero value otherwise.
func (o *PushMirror) GetLastError() string {
	if o == nil || o.LastError == nil {
		var ret string
		return ret
	}
	return *o.LastError
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetLastErrorOk() (*string, bool) {
	if o == nil || o.LastError == nil {
		return nil, false
	}
	return o.LastError, true
}

// HasLastError returns a boolean if a field has been set.
func (o *PushMirror) HasLastError() bool {
	if o != nil && o.LastError != nil {
		return true
	}

	return false
}

// SetLastError gets a reference to the given string and assigns it to the LastError field.
func (o *PushMirror) SetLastError(v string) {
	o.LastError = &v
}

// GetLastUpdate returns the LastUpdate field value if set, zero value otherwise.
func (o *PushMirror) GetLastUpdate() time.Time {
	if o == nil || o.LastUpdate == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdate
}

// GetLastUpdateOk returns a tuple with the LastUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetLastUpdateOk() (*time.Time, bool) {
	if o == nil || o.LastUpdate == nil {
		return nil, false
	}
	return o.LastUpdate, true
}

// HasLastUpdate returns a boolean if a field has been set.
func (o *PushMirror) HasLastUpdate() bool {
	if o != nil && o.LastUpdate != nil {
		return true
	}

	return false
}

// SetLastUpdate gets a reference to the given time.Time and assigns it to the LastUpdate field.
func (o *PushMirror) SetLastUpdate(v time.Time) {
	o.LastUpdate = &v
}

// GetRemoteAddress returns the RemoteAddress field value if set, zero value otherwise.
func (o *PushMirror) GetRemoteAddress() string {
	if o == nil || o.RemoteAddress == nil {
		var ret string
		return ret
	}
	return *o.RemoteAddress
}

// GetRemoteAddressOk returns a tuple with the RemoteAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetRemoteAddressOk() (*string, bool) {
	if o == nil || o.RemoteAddress == nil {
		return nil, false
	}
	return o.RemoteAddress, true
}

// HasRemoteAddress returns a boolean if a field has been set.
func (o *PushMirror) HasRemoteAddress() bool {
	if o != nil && o.RemoteAddress != nil {
		return true
	}

	return false
}

// SetRemoteAddress gets a reference to the given string and assigns it to the RemoteAddress field.
func (o *PushMirror) SetRemoteAddress(v string) {
	o.RemoteAddress = &v
}

// GetRemoteName returns the RemoteName field value if set, zero value otherwise.
func (o *PushMirror) GetRemoteName() string {
	if o == nil || o.RemoteName == nil {
		var ret string
		return ret
	}
	return *o.RemoteName
}

// GetRemoteNameOk returns a tuple with the RemoteName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetRemoteNameOk() (*string, bool) {
	if o == nil || o.RemoteName == nil {
		return nil, false
	}
	return o.RemoteName, true
}

// HasRemoteName returns a boolean if a field has been set.
func (o *PushMirror) HasRemoteName() bool {
	if o != nil && o.RemoteName != nil {
		return true
	}

	return false
}

// SetRemoteName gets a reference to the given string and assigns it to the RemoteName field.
func (o *PushMirror) SetRemoteName(v string) {
	o.RemoteName = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *PushMirror) GetRepoName() string {
	if o == nil || o.RepoName == nil {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetRepoNameOk() (*string, bool) {
	if o == nil || o.RepoName == nil {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *PushMirror) HasRepoName() bool {
	if o != nil && o.RepoName != nil {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *PushMirror) SetRepoName(v string) {
	o.RepoName = &v
}

// GetSyncOnCommit returns the SyncOnCommit field value if set, zero value otherwise.
func (o *PushMirror) GetSyncOnCommit() bool {
	if o == nil || o.SyncOnCommit == nil {
		var ret bool
		return ret
	}
	return *o.SyncOnCommit
}

// GetSyncOnCommitOk returns a tuple with the SyncOnCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushMirror) GetSyncOnCommitOk() (*bool, bool) {
	if o == nil || o.SyncOnCommit == nil {
		return nil, false
	}
	return o.SyncOnCommit, true
}

// HasSyncOnCommit returns a boolean if a field has been set.
func (o *PushMirror) HasSyncOnCommit() bool {
	if o != nil && o.SyncOnCommit != nil {
		return true
	}

	return false
}

// SetSyncOnCommit gets a reference to the given bool and assigns it to the SyncOnCommit field.
func (o *PushMirror) SetSyncOnCommit(v bool) {
	o.SyncOnCommit = &v
}

func (o PushMirror) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Interval != nil {
		toSerialize["interval"] = o.Interval
	}
	if o.LastError != nil {
		toSerialize["last_error"] = o.LastError
	}
	if o.LastUpdate != nil {
		toSerialize["last_update"] = o.LastUpdate
	}
	if o.RemoteAddress != nil {
		toSerialize["remote_address"] = o.RemoteAddress
	}
	if o.RemoteName != nil {
		toSerialize["remote_name"] = o.RemoteName
	}
	if o.RepoName != nil {
		toSerialize["repo_name"] = o.RepoName
	}
	if o.SyncOnCommit != nil {
		toSerialize["sync_on_commit"] = o.SyncOnCommit
	}
	return json.Marshal(toSerialize)
}

type NullablePushMirror struct {
	value *PushMirror
	isSet bool
}

func (v NullablePushMirror) Get() *PushMirror {
	return v.value
}

func (v *NullablePushMirror) Set(val *PushMirror) {
	v.value = val
	v.isSet = true
}

func (v NullablePushMirror) IsSet() bool {
	return v.isSet
}

func (v *NullablePushMirror) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushMirror(val *PushMirror) *NullablePushMirror {
	return &NullablePushMirror{value: val, isSet: true}
}

func (v NullablePushMirror) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushMirror) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


