/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditIssueCommentOption EditIssueCommentOption options for editing a comment
type EditIssueCommentOption struct {
	Body string `json:"body"`
}

// NewEditIssueCommentOption instantiates a new EditIssueCommentOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditIssueCommentOption(body string) *EditIssueCommentOption {
	this := EditIssueCommentOption{}
	this.Body = body
	return &this
}

// NewEditIssueCommentOptionWithDefaults instantiates a new EditIssueCommentOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditIssueCommentOptionWithDefaults() *EditIssueCommentOption {
	this := EditIssueCommentOption{}
	return &this
}

// GetBody returns the Body field value
func (o *EditIssueCommentOption) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *EditIssueCommentOption) GetBodyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *EditIssueCommentOption) SetBody(v string) {
	o.Body = v
}

func (o EditIssueCommentOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["body"] = o.Body
	}
	return json.Marshal(toSerialize)
}

type NullableEditIssueCommentOption struct {
	value *EditIssueCommentOption
	isSet bool
}

func (v NullableEditIssueCommentOption) Get() *EditIssueCommentOption {
	return v.value
}

func (v *NullableEditIssueCommentOption) Set(val *EditIssueCommentOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditIssueCommentOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditIssueCommentOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditIssueCommentOption(val *EditIssueCommentOption) *NullableEditIssueCommentOption {
	return &NullableEditIssueCommentOption{value: val, isSet: true}
}

func (v NullableEditIssueCommentOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditIssueCommentOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


