/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GeneralUISettings GeneralUISettings contains global ui settings exposed by API
type GeneralUISettings struct {
	AllowedReactions *[]string `json:"allowed_reactions,omitempty"`
	CustomEmojis *[]string `json:"custom_emojis,omitempty"`
	DefaultTheme *string `json:"default_theme,omitempty"`
}

// NewGeneralUISettings instantiates a new GeneralUISettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralUISettings() *GeneralUISettings {
	this := GeneralUISettings{}
	return &this
}

// NewGeneralUISettingsWithDefaults instantiates a new GeneralUISettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralUISettingsWithDefaults() *GeneralUISettings {
	this := GeneralUISettings{}
	return &this
}

// GetAllowedReactions returns the AllowedReactions field value if set, zero value otherwise.
func (o *GeneralUISettings) GetAllowedReactions() []string {
	if o == nil || o.AllowedReactions == nil {
		var ret []string
		return ret
	}
	return *o.AllowedReactions
}

// GetAllowedReactionsOk returns a tuple with the AllowedReactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralUISettings) GetAllowedReactionsOk() (*[]string, bool) {
	if o == nil || o.AllowedReactions == nil {
		return nil, false
	}
	return o.AllowedReactions, true
}

// HasAllowedReactions returns a boolean if a field has been set.
func (o *GeneralUISettings) HasAllowedReactions() bool {
	if o != nil && o.AllowedReactions != nil {
		return true
	}

	return false
}

// SetAllowedReactions gets a reference to the given []string and assigns it to the AllowedReactions field.
func (o *GeneralUISettings) SetAllowedReactions(v []string) {
	o.AllowedReactions = &v
}

// GetCustomEmojis returns the CustomEmojis field value if set, zero value otherwise.
func (o *GeneralUISettings) GetCustomEmojis() []string {
	if o == nil || o.CustomEmojis == nil {
		var ret []string
		return ret
	}
	return *o.CustomEmojis
}

// GetCustomEmojisOk returns a tuple with the CustomEmojis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralUISettings) GetCustomEmojisOk() (*[]string, bool) {
	if o == nil || o.CustomEmojis == nil {
		return nil, false
	}
	return o.CustomEmojis, true
}

// HasCustomEmojis returns a boolean if a field has been set.
func (o *GeneralUISettings) HasCustomEmojis() bool {
	if o != nil && o.CustomEmojis != nil {
		return true
	}

	return false
}

// SetCustomEmojis gets a reference to the given []string and assigns it to the CustomEmojis field.
func (o *GeneralUISettings) SetCustomEmojis(v []string) {
	o.CustomEmojis = &v
}

// GetDefaultTheme returns the DefaultTheme field value if set, zero value otherwise.
func (o *GeneralUISettings) GetDefaultTheme() string {
	if o == nil || o.DefaultTheme == nil {
		var ret string
		return ret
	}
	return *o.DefaultTheme
}

// GetDefaultThemeOk returns a tuple with the DefaultTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralUISettings) GetDefaultThemeOk() (*string, bool) {
	if o == nil || o.DefaultTheme == nil {
		return nil, false
	}
	return o.DefaultTheme, true
}

// HasDefaultTheme returns a boolean if a field has been set.
func (o *GeneralUISettings) HasDefaultTheme() bool {
	if o != nil && o.DefaultTheme != nil {
		return true
	}

	return false
}

// SetDefaultTheme gets a reference to the given string and assigns it to the DefaultTheme field.
func (o *GeneralUISettings) SetDefaultTheme(v string) {
	o.DefaultTheme = &v
}

func (o GeneralUISettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedReactions != nil {
		toSerialize["allowed_reactions"] = o.AllowedReactions
	}
	if o.CustomEmojis != nil {
		toSerialize["custom_emojis"] = o.CustomEmojis
	}
	if o.DefaultTheme != nil {
		toSerialize["default_theme"] = o.DefaultTheme
	}
	return json.Marshal(toSerialize)
}

type NullableGeneralUISettings struct {
	value *GeneralUISettings
	isSet bool
}

func (v NullableGeneralUISettings) Get() *GeneralUISettings {
	return v.value
}

func (v *NullableGeneralUISettings) Set(val *GeneralUISettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralUISettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralUISettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralUISettings(val *GeneralUISettings) *NullableGeneralUISettings {
	return &NullableGeneralUISettings{value: val, isSet: true}
}

func (v NullableGeneralUISettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralUISettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


