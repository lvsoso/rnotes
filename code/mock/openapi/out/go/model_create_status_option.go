/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateStatusOption CreateStatusOption holds the information needed to create a new CommitStatus for a Commit
type CreateStatusOption struct {
	Context *string `json:"context,omitempty"`
	Description *string `json:"description,omitempty"`
	// CommitStatusState holds the state of a CommitStatus It can be \"pending\", \"success\", \"error\" and \"failure\"
	State *string `json:"state,omitempty"`
	TargetUrl *string `json:"target_url,omitempty"`
}

// NewCreateStatusOption instantiates a new CreateStatusOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateStatusOption() *CreateStatusOption {
	this := CreateStatusOption{}
	return &this
}

// NewCreateStatusOptionWithDefaults instantiates a new CreateStatusOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateStatusOptionWithDefaults() *CreateStatusOption {
	this := CreateStatusOption{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *CreateStatusOption) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStatusOption) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *CreateStatusOption) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *CreateStatusOption) SetContext(v string) {
	o.Context = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateStatusOption) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStatusOption) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateStatusOption) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateStatusOption) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CreateStatusOption) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStatusOption) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CreateStatusOption) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CreateStatusOption) SetState(v string) {
	o.State = &v
}

// GetTargetUrl returns the TargetUrl field value if set, zero value otherwise.
func (o *CreateStatusOption) GetTargetUrl() string {
	if o == nil || o.TargetUrl == nil {
		var ret string
		return ret
	}
	return *o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateStatusOption) GetTargetUrlOk() (*string, bool) {
	if o == nil || o.TargetUrl == nil {
		return nil, false
	}
	return o.TargetUrl, true
}

// HasTargetUrl returns a boolean if a field has been set.
func (o *CreateStatusOption) HasTargetUrl() bool {
	if o != nil && o.TargetUrl != nil {
		return true
	}

	return false
}

// SetTargetUrl gets a reference to the given string and assigns it to the TargetUrl field.
func (o *CreateStatusOption) SetTargetUrl(v string) {
	o.TargetUrl = &v
}

func (o CreateStatusOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.TargetUrl != nil {
		toSerialize["target_url"] = o.TargetUrl
	}
	return json.Marshal(toSerialize)
}

type NullableCreateStatusOption struct {
	value *CreateStatusOption
	isSet bool
}

func (v NullableCreateStatusOption) Get() *CreateStatusOption {
	return v.value
}

func (v *NullableCreateStatusOption) Set(val *CreateStatusOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateStatusOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateStatusOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateStatusOption(val *CreateStatusOption) *NullableCreateStatusOption {
	return &NullableCreateStatusOption{value: val, isSet: true}
}

func (v NullableCreateStatusOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateStatusOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


