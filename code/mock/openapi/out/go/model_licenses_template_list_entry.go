/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LicensesTemplateListEntry LicensesListEntry is used for the API
type LicensesTemplateListEntry struct {
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewLicensesTemplateListEntry instantiates a new LicensesTemplateListEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicensesTemplateListEntry() *LicensesTemplateListEntry {
	this := LicensesTemplateListEntry{}
	return &this
}

// NewLicensesTemplateListEntryWithDefaults instantiates a new LicensesTemplateListEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicensesTemplateListEntryWithDefaults() *LicensesTemplateListEntry {
	this := LicensesTemplateListEntry{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *LicensesTemplateListEntry) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesTemplateListEntry) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *LicensesTemplateListEntry) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *LicensesTemplateListEntry) SetKey(v string) {
	o.Key = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicensesTemplateListEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesTemplateListEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicensesTemplateListEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicensesTemplateListEntry) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *LicensesTemplateListEntry) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicensesTemplateListEntry) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *LicensesTemplateListEntry) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *LicensesTemplateListEntry) SetUrl(v string) {
	o.Url = &v
}

func (o LicensesTemplateListEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableLicensesTemplateListEntry struct {
	value *LicensesTemplateListEntry
	isSet bool
}

func (v NullableLicensesTemplateListEntry) Get() *LicensesTemplateListEntry {
	return v.value
}

func (v *NullableLicensesTemplateListEntry) Set(val *LicensesTemplateListEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensesTemplateListEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensesTemplateListEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensesTemplateListEntry(val *LicensesTemplateListEntry) *NullableLicensesTemplateListEntry {
	return &NullableLicensesTemplateListEntry{value: val, isSet: true}
}

func (v NullableLicensesTemplateListEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensesTemplateListEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


