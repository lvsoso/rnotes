/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditTeamOption EditTeamOption options for editing a team
type EditTeamOption struct {
	CanCreateOrgRepo *bool `json:"can_create_org_repo,omitempty"`
	Description *string `json:"description,omitempty"`
	IncludesAllRepositories *bool `json:"includes_all_repositories,omitempty"`
	Name string `json:"name"`
	Permission *string `json:"permission,omitempty"`
	Units *[]string `json:"units,omitempty"`
	UnitsMap *map[string]string `json:"units_map,omitempty"`
}

// NewEditTeamOption instantiates a new EditTeamOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditTeamOption(name string) *EditTeamOption {
	this := EditTeamOption{}
	this.Name = name
	return &this
}

// NewEditTeamOptionWithDefaults instantiates a new EditTeamOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditTeamOptionWithDefaults() *EditTeamOption {
	this := EditTeamOption{}
	return &this
}

// GetCanCreateOrgRepo returns the CanCreateOrgRepo field value if set, zero value otherwise.
func (o *EditTeamOption) GetCanCreateOrgRepo() bool {
	if o == nil || o.CanCreateOrgRepo == nil {
		var ret bool
		return ret
	}
	return *o.CanCreateOrgRepo
}

// GetCanCreateOrgRepoOk returns a tuple with the CanCreateOrgRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetCanCreateOrgRepoOk() (*bool, bool) {
	if o == nil || o.CanCreateOrgRepo == nil {
		return nil, false
	}
	return o.CanCreateOrgRepo, true
}

// HasCanCreateOrgRepo returns a boolean if a field has been set.
func (o *EditTeamOption) HasCanCreateOrgRepo() bool {
	if o != nil && o.CanCreateOrgRepo != nil {
		return true
	}

	return false
}

// SetCanCreateOrgRepo gets a reference to the given bool and assigns it to the CanCreateOrgRepo field.
func (o *EditTeamOption) SetCanCreateOrgRepo(v bool) {
	o.CanCreateOrgRepo = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditTeamOption) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditTeamOption) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditTeamOption) SetDescription(v string) {
	o.Description = &v
}

// GetIncludesAllRepositories returns the IncludesAllRepositories field value if set, zero value otherwise.
func (o *EditTeamOption) GetIncludesAllRepositories() bool {
	if o == nil || o.IncludesAllRepositories == nil {
		var ret bool
		return ret
	}
	return *o.IncludesAllRepositories
}

// GetIncludesAllRepositoriesOk returns a tuple with the IncludesAllRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetIncludesAllRepositoriesOk() (*bool, bool) {
	if o == nil || o.IncludesAllRepositories == nil {
		return nil, false
	}
	return o.IncludesAllRepositories, true
}

// HasIncludesAllRepositories returns a boolean if a field has been set.
func (o *EditTeamOption) HasIncludesAllRepositories() bool {
	if o != nil && o.IncludesAllRepositories != nil {
		return true
	}

	return false
}

// SetIncludesAllRepositories gets a reference to the given bool and assigns it to the IncludesAllRepositories field.
func (o *EditTeamOption) SetIncludesAllRepositories(v bool) {
	o.IncludesAllRepositories = &v
}

// GetName returns the Name field value
func (o *EditTeamOption) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EditTeamOption) SetName(v string) {
	o.Name = v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *EditTeamOption) GetPermission() string {
	if o == nil || o.Permission == nil {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetPermissionOk() (*string, bool) {
	if o == nil || o.Permission == nil {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *EditTeamOption) HasPermission() bool {
	if o != nil && o.Permission != nil {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *EditTeamOption) SetPermission(v string) {
	o.Permission = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *EditTeamOption) GetUnits() []string {
	if o == nil || o.Units == nil {
		var ret []string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetUnitsOk() (*[]string, bool) {
	if o == nil || o.Units == nil {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *EditTeamOption) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []string and assigns it to the Units field.
func (o *EditTeamOption) SetUnits(v []string) {
	o.Units = &v
}

// GetUnitsMap returns the UnitsMap field value if set, zero value otherwise.
func (o *EditTeamOption) GetUnitsMap() map[string]string {
	if o == nil || o.UnitsMap == nil {
		var ret map[string]string
		return ret
	}
	return *o.UnitsMap
}

// GetUnitsMapOk returns a tuple with the UnitsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditTeamOption) GetUnitsMapOk() (*map[string]string, bool) {
	if o == nil || o.UnitsMap == nil {
		return nil, false
	}
	return o.UnitsMap, true
}

// HasUnitsMap returns a boolean if a field has been set.
func (o *EditTeamOption) HasUnitsMap() bool {
	if o != nil && o.UnitsMap != nil {
		return true
	}

	return false
}

// SetUnitsMap gets a reference to the given map[string]string and assigns it to the UnitsMap field.
func (o *EditTeamOption) SetUnitsMap(v map[string]string) {
	o.UnitsMap = &v
}

func (o EditTeamOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CanCreateOrgRepo != nil {
		toSerialize["can_create_org_repo"] = o.CanCreateOrgRepo
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IncludesAllRepositories != nil {
		toSerialize["includes_all_repositories"] = o.IncludesAllRepositories
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Permission != nil {
		toSerialize["permission"] = o.Permission
	}
	if o.Units != nil {
		toSerialize["units"] = o.Units
	}
	if o.UnitsMap != nil {
		toSerialize["units_map"] = o.UnitsMap
	}
	return json.Marshal(toSerialize)
}

type NullableEditTeamOption struct {
	value *EditTeamOption
	isSet bool
}

func (v NullableEditTeamOption) Get() *EditTeamOption {
	return v.value
}

func (v *NullableEditTeamOption) Set(val *EditTeamOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditTeamOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditTeamOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditTeamOption(val *EditTeamOption) *NullableEditTeamOption {
	return &NullableEditTeamOption{value: val, isSet: true}
}

func (v NullableEditTeamOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditTeamOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


