/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IssueLabelsOption IssueLabelsOption a collection of labels
type IssueLabelsOption struct {
	// list of label IDs
	Labels *[]int64 `json:"labels,omitempty"`
}

// NewIssueLabelsOption instantiates a new IssueLabelsOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueLabelsOption() *IssueLabelsOption {
	this := IssueLabelsOption{}
	return &this
}

// NewIssueLabelsOptionWithDefaults instantiates a new IssueLabelsOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueLabelsOptionWithDefaults() *IssueLabelsOption {
	this := IssueLabelsOption{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *IssueLabelsOption) GetLabels() []int64 {
	if o == nil || o.Labels == nil {
		var ret []int64
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueLabelsOption) GetLabelsOk() (*[]int64, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *IssueLabelsOption) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []int64 and assigns it to the Labels field.
func (o *IssueLabelsOption) SetLabels(v []int64) {
	o.Labels = &v
}

func (o IssueLabelsOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullableIssueLabelsOption struct {
	value *IssueLabelsOption
	isSet bool
}

func (v NullableIssueLabelsOption) Get() *IssueLabelsOption {
	return v.value
}

func (v *NullableIssueLabelsOption) Set(val *IssueLabelsOption) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueLabelsOption) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueLabelsOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueLabelsOption(val *IssueLabelsOption) *NullableIssueLabelsOption {
	return &NullableIssueLabelsOption{value: val, isSet: true}
}

func (v NullableIssueLabelsOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueLabelsOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


