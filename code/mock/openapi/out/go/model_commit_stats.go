/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CommitStats CommitStats is statistics for a RepoCommit
type CommitStats struct {
	Additions *int64 `json:"additions,omitempty"`
	Deletions *int64 `json:"deletions,omitempty"`
	Total *int64 `json:"total,omitempty"`
}

// NewCommitStats instantiates a new CommitStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitStats() *CommitStats {
	this := CommitStats{}
	return &this
}

// NewCommitStatsWithDefaults instantiates a new CommitStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitStatsWithDefaults() *CommitStats {
	this := CommitStats{}
	return &this
}

// GetAdditions returns the Additions field value if set, zero value otherwise.
func (o *CommitStats) GetAdditions() int64 {
	if o == nil || o.Additions == nil {
		var ret int64
		return ret
	}
	return *o.Additions
}

// GetAdditionsOk returns a tuple with the Additions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitStats) GetAdditionsOk() (*int64, bool) {
	if o == nil || o.Additions == nil {
		return nil, false
	}
	return o.Additions, true
}

// HasAdditions returns a boolean if a field has been set.
func (o *CommitStats) HasAdditions() bool {
	if o != nil && o.Additions != nil {
		return true
	}

	return false
}

// SetAdditions gets a reference to the given int64 and assigns it to the Additions field.
func (o *CommitStats) SetAdditions(v int64) {
	o.Additions = &v
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *CommitStats) GetDeletions() int64 {
	if o == nil || o.Deletions == nil {
		var ret int64
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitStats) GetDeletionsOk() (*int64, bool) {
	if o == nil || o.Deletions == nil {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *CommitStats) HasDeletions() bool {
	if o != nil && o.Deletions != nil {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int64 and assigns it to the Deletions field.
func (o *CommitStats) SetDeletions(v int64) {
	o.Deletions = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CommitStats) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitStats) GetTotalOk() (*int64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CommitStats) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *CommitStats) SetTotal(v int64) {
	o.Total = &v
}

func (o CommitStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Additions != nil {
		toSerialize["additions"] = o.Additions
	}
	if o.Deletions != nil {
		toSerialize["deletions"] = o.Deletions
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableCommitStats struct {
	value *CommitStats
	isSet bool
}

func (v NullableCommitStats) Get() *CommitStats {
	return v.value
}

func (v *NullableCommitStats) Set(val *CommitStats) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitStats) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitStats(val *CommitStats) *NullableCommitStats {
	return &NullableCommitStats{value: val, isSet: true}
}

func (v NullableCommitStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


