/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NotificationSubject NotificationSubject contains the notification subject (Issue/Pull/Commit)
type NotificationSubject struct {
	HtmlUrl *string `json:"html_url,omitempty"`
	LatestCommentHtmlUrl *string `json:"latest_comment_html_url,omitempty"`
	LatestCommentUrl *string `json:"latest_comment_url,omitempty"`
	// StateType issue state type
	State *string `json:"state,omitempty"`
	Title *string `json:"title,omitempty"`
	// NotifySubjectType represent type of notification subject
	Type *string `json:"type,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewNotificationSubject instantiates a new NotificationSubject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSubject() *NotificationSubject {
	this := NotificationSubject{}
	return &this
}

// NewNotificationSubjectWithDefaults instantiates a new NotificationSubject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSubjectWithDefaults() *NotificationSubject {
	this := NotificationSubject{}
	return &this
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *NotificationSubject) GetHtmlUrl() string {
	if o == nil || o.HtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetHtmlUrlOk() (*string, bool) {
	if o == nil || o.HtmlUrl == nil {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *NotificationSubject) HasHtmlUrl() bool {
	if o != nil && o.HtmlUrl != nil {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *NotificationSubject) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetLatestCommentHtmlUrl returns the LatestCommentHtmlUrl field value if set, zero value otherwise.
func (o *NotificationSubject) GetLatestCommentHtmlUrl() string {
	if o == nil || o.LatestCommentHtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.LatestCommentHtmlUrl
}

// GetLatestCommentHtmlUrlOk returns a tuple with the LatestCommentHtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetLatestCommentHtmlUrlOk() (*string, bool) {
	if o == nil || o.LatestCommentHtmlUrl == nil {
		return nil, false
	}
	return o.LatestCommentHtmlUrl, true
}

// HasLatestCommentHtmlUrl returns a boolean if a field has been set.
func (o *NotificationSubject) HasLatestCommentHtmlUrl() bool {
	if o != nil && o.LatestCommentHtmlUrl != nil {
		return true
	}

	return false
}

// SetLatestCommentHtmlUrl gets a reference to the given string and assigns it to the LatestCommentHtmlUrl field.
func (o *NotificationSubject) SetLatestCommentHtmlUrl(v string) {
	o.LatestCommentHtmlUrl = &v
}

// GetLatestCommentUrl returns the LatestCommentUrl field value if set, zero value otherwise.
func (o *NotificationSubject) GetLatestCommentUrl() string {
	if o == nil || o.LatestCommentUrl == nil {
		var ret string
		return ret
	}
	return *o.LatestCommentUrl
}

// GetLatestCommentUrlOk returns a tuple with the LatestCommentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetLatestCommentUrlOk() (*string, bool) {
	if o == nil || o.LatestCommentUrl == nil {
		return nil, false
	}
	return o.LatestCommentUrl, true
}

// HasLatestCommentUrl returns a boolean if a field has been set.
func (o *NotificationSubject) HasLatestCommentUrl() bool {
	if o != nil && o.LatestCommentUrl != nil {
		return true
	}

	return false
}

// SetLatestCommentUrl gets a reference to the given string and assigns it to the LatestCommentUrl field.
func (o *NotificationSubject) SetLatestCommentUrl(v string) {
	o.LatestCommentUrl = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *NotificationSubject) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *NotificationSubject) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *NotificationSubject) SetState(v string) {
	o.State = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationSubject) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationSubject) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationSubject) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NotificationSubject) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NotificationSubject) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NotificationSubject) SetType(v string) {
	o.Type = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NotificationSubject) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSubject) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NotificationSubject) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NotificationSubject) SetUrl(v string) {
	o.Url = &v
}

func (o NotificationSubject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HtmlUrl != nil {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if o.LatestCommentHtmlUrl != nil {
		toSerialize["latest_comment_html_url"] = o.LatestCommentHtmlUrl
	}
	if o.LatestCommentUrl != nil {
		toSerialize["latest_comment_url"] = o.LatestCommentUrl
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationSubject struct {
	value *NotificationSubject
	isSet bool
}

func (v NullableNotificationSubject) Get() *NotificationSubject {
	return v.value
}

func (v *NullableNotificationSubject) Set(val *NotificationSubject) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSubject) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSubject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSubject(val *NotificationSubject) *NullableNotificationSubject {
	return &NullableNotificationSubject{value: val, isSet: true}
}

func (v NullableNotificationSubject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSubject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


