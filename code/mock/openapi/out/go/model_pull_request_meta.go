/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PullRequestMeta PullRequestMeta PR info if an issue is a PR
type PullRequestMeta struct {
	Draft *bool `json:"draft,omitempty"`
	Merged *bool `json:"merged,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
}

// NewPullRequestMeta instantiates a new PullRequestMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPullRequestMeta() *PullRequestMeta {
	this := PullRequestMeta{}
	return &this
}

// NewPullRequestMetaWithDefaults instantiates a new PullRequestMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPullRequestMetaWithDefaults() *PullRequestMeta {
	this := PullRequestMeta{}
	return &this
}

// GetDraft returns the Draft field value if set, zero value otherwise.
func (o *PullRequestMeta) GetDraft() bool {
	if o == nil || o.Draft == nil {
		var ret bool
		return ret
	}
	return *o.Draft
}

// GetDraftOk returns a tuple with the Draft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequestMeta) GetDraftOk() (*bool, bool) {
	if o == nil || o.Draft == nil {
		return nil, false
	}
	return o.Draft, true
}

// HasDraft returns a boolean if a field has been set.
func (o *PullRequestMeta) HasDraft() bool {
	if o != nil && o.Draft != nil {
		return true
	}

	return false
}

// SetDraft gets a reference to the given bool and assigns it to the Draft field.
func (o *PullRequestMeta) SetDraft(v bool) {
	o.Draft = &v
}

// GetMerged returns the Merged field value if set, zero value otherwise.
func (o *PullRequestMeta) GetMerged() bool {
	if o == nil || o.Merged == nil {
		var ret bool
		return ret
	}
	return *o.Merged
}

// GetMergedOk returns a tuple with the Merged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequestMeta) GetMergedOk() (*bool, bool) {
	if o == nil || o.Merged == nil {
		return nil, false
	}
	return o.Merged, true
}

// HasMerged returns a boolean if a field has been set.
func (o *PullRequestMeta) HasMerged() bool {
	if o != nil && o.Merged != nil {
		return true
	}

	return false
}

// SetMerged gets a reference to the given bool and assigns it to the Merged field.
func (o *PullRequestMeta) SetMerged(v bool) {
	o.Merged = &v
}

// GetMergedAt returns the MergedAt field value if set, zero value otherwise.
func (o *PullRequestMeta) GetMergedAt() time.Time {
	if o == nil || o.MergedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.MergedAt
}

// GetMergedAtOk returns a tuple with the MergedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PullRequestMeta) GetMergedAtOk() (*time.Time, bool) {
	if o == nil || o.MergedAt == nil {
		return nil, false
	}
	return o.MergedAt, true
}

// HasMergedAt returns a boolean if a field has been set.
func (o *PullRequestMeta) HasMergedAt() bool {
	if o != nil && o.MergedAt != nil {
		return true
	}

	return false
}

// SetMergedAt gets a reference to the given time.Time and assigns it to the MergedAt field.
func (o *PullRequestMeta) SetMergedAt(v time.Time) {
	o.MergedAt = &v
}

func (o PullRequestMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Draft != nil {
		toSerialize["draft"] = o.Draft
	}
	if o.Merged != nil {
		toSerialize["merged"] = o.Merged
	}
	if o.MergedAt != nil {
		toSerialize["merged_at"] = o.MergedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePullRequestMeta struct {
	value *PullRequestMeta
	isSet bool
}

func (v NullablePullRequestMeta) Get() *PullRequestMeta {
	return v.value
}

func (v *NullablePullRequestMeta) Set(val *PullRequestMeta) {
	v.value = val
	v.isSet = true
}

func (v NullablePullRequestMeta) IsSet() bool {
	return v.isSet
}

func (v *NullablePullRequestMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePullRequestMeta(val *PullRequestMeta) *NullablePullRequestMeta {
	return &NullablePullRequestMeta{value: val, isSet: true}
}

func (v NullablePullRequestMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePullRequestMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


