/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateKeyOption CreateKeyOption options when creating a key
type CreateKeyOption struct {
	// An armored SSH key to add
	Key string `json:"key"`
	// Describe if the key has only read access or read/write
	ReadOnly *bool `json:"read_only,omitempty"`
	// Title of the key to add
	Title string `json:"title"`
}

// NewCreateKeyOption instantiates a new CreateKeyOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateKeyOption(key string, title string) *CreateKeyOption {
	this := CreateKeyOption{}
	this.Key = key
	this.Title = title
	return &this
}

// NewCreateKeyOptionWithDefaults instantiates a new CreateKeyOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateKeyOptionWithDefaults() *CreateKeyOption {
	this := CreateKeyOption{}
	return &this
}

// GetKey returns the Key field value
func (o *CreateKeyOption) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CreateKeyOption) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CreateKeyOption) SetKey(v string) {
	o.Key = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *CreateKeyOption) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyOption) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *CreateKeyOption) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *CreateKeyOption) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetTitle returns the Title field value
func (o *CreateKeyOption) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CreateKeyOption) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CreateKeyOption) SetTitle(v string) {
	o.Title = v
}

func (o CreateKeyOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.ReadOnly != nil {
		toSerialize["read_only"] = o.ReadOnly
	}
	if true {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableCreateKeyOption struct {
	value *CreateKeyOption
	isSet bool
}

func (v NullableCreateKeyOption) Get() *CreateKeyOption {
	return v.value
}

func (v *NullableCreateKeyOption) Set(val *CreateKeyOption) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateKeyOption) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateKeyOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateKeyOption(val *CreateKeyOption) *NullableCreateKeyOption {
	return &NullableCreateKeyOption{value: val, isSet: true}
}

func (v NullableCreateKeyOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateKeyOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


