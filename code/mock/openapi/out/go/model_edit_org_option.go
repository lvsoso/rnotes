/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditOrgOption EditOrgOption options for editing an organization
type EditOrgOption struct {
	Description *string `json:"description,omitempty"`
	Email *string `json:"email,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	Location *string `json:"location,omitempty"`
	RepoAdminChangeTeamAccess *bool `json:"repo_admin_change_team_access,omitempty"`
	// possible values are `public`, `limited` or `private`
	Visibility *string `json:"visibility,omitempty"`
	Website *string `json:"website,omitempty"`
}

// NewEditOrgOption instantiates a new EditOrgOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditOrgOption() *EditOrgOption {
	this := EditOrgOption{}
	return &this
}

// NewEditOrgOptionWithDefaults instantiates a new EditOrgOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditOrgOptionWithDefaults() *EditOrgOption {
	this := EditOrgOption{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditOrgOption) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditOrgOption) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditOrgOption) SetDescription(v string) {
	o.Description = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EditOrgOption) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EditOrgOption) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EditOrgOption) SetEmail(v string) {
	o.Email = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *EditOrgOption) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *EditOrgOption) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *EditOrgOption) SetFullName(v string) {
	o.FullName = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *EditOrgOption) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EditOrgOption) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *EditOrgOption) SetLocation(v string) {
	o.Location = &v
}

// GetRepoAdminChangeTeamAccess returns the RepoAdminChangeTeamAccess field value if set, zero value otherwise.
func (o *EditOrgOption) GetRepoAdminChangeTeamAccess() bool {
	if o == nil || o.RepoAdminChangeTeamAccess == nil {
		var ret bool
		return ret
	}
	return *o.RepoAdminChangeTeamAccess
}

// GetRepoAdminChangeTeamAccessOk returns a tuple with the RepoAdminChangeTeamAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetRepoAdminChangeTeamAccessOk() (*bool, bool) {
	if o == nil || o.RepoAdminChangeTeamAccess == nil {
		return nil, false
	}
	return o.RepoAdminChangeTeamAccess, true
}

// HasRepoAdminChangeTeamAccess returns a boolean if a field has been set.
func (o *EditOrgOption) HasRepoAdminChangeTeamAccess() bool {
	if o != nil && o.RepoAdminChangeTeamAccess != nil {
		return true
	}

	return false
}

// SetRepoAdminChangeTeamAccess gets a reference to the given bool and assigns it to the RepoAdminChangeTeamAccess field.
func (o *EditOrgOption) SetRepoAdminChangeTeamAccess(v bool) {
	o.RepoAdminChangeTeamAccess = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *EditOrgOption) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *EditOrgOption) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *EditOrgOption) SetVisibility(v string) {
	o.Visibility = &v
}

// GetWebsite returns the Website field value if set, zero value otherwise.
func (o *EditOrgOption) GetWebsite() string {
	if o == nil || o.Website == nil {
		var ret string
		return ret
	}
	return *o.Website
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditOrgOption) GetWebsiteOk() (*string, bool) {
	if o == nil || o.Website == nil {
		return nil, false
	}
	return o.Website, true
}

// HasWebsite returns a boolean if a field has been set.
func (o *EditOrgOption) HasWebsite() bool {
	if o != nil && o.Website != nil {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given string and assigns it to the Website field.
func (o *EditOrgOption) SetWebsite(v string) {
	o.Website = &v
}

func (o EditOrgOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.RepoAdminChangeTeamAccess != nil {
		toSerialize["repo_admin_change_team_access"] = o.RepoAdminChangeTeamAccess
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.Website != nil {
		toSerialize["website"] = o.Website
	}
	return json.Marshal(toSerialize)
}

type NullableEditOrgOption struct {
	value *EditOrgOption
	isSet bool
}

func (v NullableEditOrgOption) Get() *EditOrgOption {
	return v.value
}

func (v *NullableEditOrgOption) Set(val *EditOrgOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEditOrgOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEditOrgOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditOrgOption(val *EditOrgOption) *NullableEditOrgOption {
	return &NullableEditOrgOption{value: val, isSet: true}
}

func (v NullableEditOrgOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditOrgOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


