/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GitBlobResponse GitBlobResponse represents a git blob
type GitBlobResponse struct {
	Content *string `json:"content,omitempty"`
	Encoding *string `json:"encoding,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewGitBlobResponse instantiates a new GitBlobResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBlobResponse() *GitBlobResponse {
	this := GitBlobResponse{}
	return &this
}

// NewGitBlobResponseWithDefaults instantiates a new GitBlobResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBlobResponseWithDefaults() *GitBlobResponse {
	this := GitBlobResponse{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *GitBlobResponse) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlobResponse) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *GitBlobResponse) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *GitBlobResponse) SetContent(v string) {
	o.Content = &v
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *GitBlobResponse) GetEncoding() string {
	if o == nil || o.Encoding == nil {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlobResponse) GetEncodingOk() (*string, bool) {
	if o == nil || o.Encoding == nil {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *GitBlobResponse) HasEncoding() bool {
	if o != nil && o.Encoding != nil {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *GitBlobResponse) SetEncoding(v string) {
	o.Encoding = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitBlobResponse) GetSha() string {
	if o == nil || o.Sha == nil {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlobResponse) GetShaOk() (*string, bool) {
	if o == nil || o.Sha == nil {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitBlobResponse) HasSha() bool {
	if o != nil && o.Sha != nil {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitBlobResponse) SetSha(v string) {
	o.Sha = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GitBlobResponse) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlobResponse) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GitBlobResponse) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *GitBlobResponse) SetSize(v int64) {
	o.Size = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GitBlobResponse) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitBlobResponse) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GitBlobResponse) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GitBlobResponse) SetUrl(v string) {
	o.Url = &v
}

func (o GitBlobResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Encoding != nil {
		toSerialize["encoding"] = o.Encoding
	}
	if o.Sha != nil {
		toSerialize["sha"] = o.Sha
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableGitBlobResponse struct {
	value *GitBlobResponse
	isSet bool
}

func (v NullableGitBlobResponse) Get() *GitBlobResponse {
	return v.value
}

func (v *NullableGitBlobResponse) Set(val *GitBlobResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBlobResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBlobResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBlobResponse(val *GitBlobResponse) *NullableGitBlobResponse {
	return &NullableGitBlobResponse{value: val, isSet: true}
}

func (v NullableGitBlobResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBlobResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


