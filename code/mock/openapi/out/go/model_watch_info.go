/*
Gitea API

This documentation describes the Gitea API.

API version: {{AppVer | JSEscape | Safe}}
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// WatchInfo WatchInfo represents an API watch status of one repository
type WatchInfo struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Ignored *bool `json:"ignored,omitempty"`
	Reason *map[string]interface{} `json:"reason,omitempty"`
	RepositoryUrl *string `json:"repository_url,omitempty"`
	Subscribed *bool `json:"subscribed,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewWatchInfo instantiates a new WatchInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchInfo() *WatchInfo {
	this := WatchInfo{}
	return &this
}

// NewWatchInfoWithDefaults instantiates a new WatchInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchInfoWithDefaults() *WatchInfo {
	this := WatchInfo{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WatchInfo) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchInfo) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WatchInfo) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *WatchInfo) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetIgnored returns the Ignored field value if set, zero value otherwise.
func (o *WatchInfo) GetIgnored() bool {
	if o == nil || o.Ignored == nil {
		var ret bool
		return ret
	}
	return *o.Ignored
}

// GetIgnoredOk returns a tuple with the Ignored field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchInfo) GetIgnoredOk() (*bool, bool) {
	if o == nil || o.Ignored == nil {
		return nil, false
	}
	return o.Ignored, true
}

// HasIgnored returns a boolean if a field has been set.
func (o *WatchInfo) HasIgnored() bool {
	if o != nil && o.Ignored != nil {
		return true
	}

	return false
}

// SetIgnored gets a reference to the given bool and assigns it to the Ignored field.
func (o *WatchInfo) SetIgnored(v bool) {
	o.Ignored = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *WatchInfo) GetReason() map[string]interface{} {
	if o == nil || o.Reason == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchInfo) GetReasonOk() (*map[string]interface{}, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *WatchInfo) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given map[string]interface{} and assigns it to the Reason field.
func (o *WatchInfo) SetReason(v map[string]interface{}) {
	o.Reason = &v
}

// GetRepositoryUrl returns the RepositoryUrl field value if set, zero value otherwise.
func (o *WatchInfo) GetRepositoryUrl() string {
	if o == nil || o.RepositoryUrl == nil {
		var ret string
		return ret
	}
	return *o.RepositoryUrl
}

// GetRepositoryUrlOk returns a tuple with the RepositoryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchInfo) GetRepositoryUrlOk() (*string, bool) {
	if o == nil || o.RepositoryUrl == nil {
		return nil, false
	}
	return o.RepositoryUrl, true
}

// HasRepositoryUrl returns a boolean if a field has been set.
func (o *WatchInfo) HasRepositoryUrl() bool {
	if o != nil && o.RepositoryUrl != nil {
		return true
	}

	return false
}

// SetRepositoryUrl gets a reference to the given string and assigns it to the RepositoryUrl field.
func (o *WatchInfo) SetRepositoryUrl(v string) {
	o.RepositoryUrl = &v
}

// GetSubscribed returns the Subscribed field value if set, zero value otherwise.
func (o *WatchInfo) GetSubscribed() bool {
	if o == nil || o.Subscribed == nil {
		var ret bool
		return ret
	}
	return *o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchInfo) GetSubscribedOk() (*bool, bool) {
	if o == nil || o.Subscribed == nil {
		return nil, false
	}
	return o.Subscribed, true
}

// HasSubscribed returns a boolean if a field has been set.
func (o *WatchInfo) HasSubscribed() bool {
	if o != nil && o.Subscribed != nil {
		return true
	}

	return false
}

// SetSubscribed gets a reference to the given bool and assigns it to the Subscribed field.
func (o *WatchInfo) SetSubscribed(v bool) {
	o.Subscribed = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *WatchInfo) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchInfo) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *WatchInfo) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *WatchInfo) SetUrl(v string) {
	o.Url = &v
}

func (o WatchInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Ignored != nil {
		toSerialize["ignored"] = o.Ignored
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.RepositoryUrl != nil {
		toSerialize["repository_url"] = o.RepositoryUrl
	}
	if o.Subscribed != nil {
		toSerialize["subscribed"] = o.Subscribed
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableWatchInfo struct {
	value *WatchInfo
	isSet bool
}

func (v NullableWatchInfo) Get() *WatchInfo {
	return v.value
}

func (v *NullableWatchInfo) Set(val *WatchInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchInfo(val *WatchInfo) *NullableWatchInfo {
	return &NullableWatchInfo{value: val, isSet: true}
}

func (v NullableWatchInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


