// Code generated by MockGen. DO NOT EDIT.
// Source: client_mock.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	openapi "github.com/GIT_USER_ID/GIT_REPO_ID"
	gomock "github.com/golang/mock/gomock"
)

// MockClientAPI is a mock of ClientAPI interface.
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI.
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance.
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// CreateCurrentUserRepo mocks base method.
func (m *MockClientAPI) CreateCurrentUserRepo(ctx context.Context) openapi.ApiCreateCurrentUserRepoRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrentUserRepo", ctx)
	ret0, _ := ret[0].(openapi.ApiCreateCurrentUserRepoRequest)
	return ret0
}

// CreateCurrentUserRepo indicates an expected call of CreateCurrentUserRepo.
func (mr *MockClientAPIMockRecorder) CreateCurrentUserRepo(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrentUserRepo", reflect.TypeOf((*MockClientAPI)(nil).CreateCurrentUserRepo), ctx)
}

// CreateCurrentUserRepoExecute mocks base method.
func (m *MockClientAPI) CreateCurrentUserRepoExecute(r openapi.ApiCreateCurrentUserRepoRequest) (openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCurrentUserRepoExecute", r)
	ret0, _ := ret[0].(openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCurrentUserRepoExecute indicates an expected call of CreateCurrentUserRepoExecute.
func (mr *MockClientAPIMockRecorder) CreateCurrentUserRepoExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCurrentUserRepoExecute", reflect.TypeOf((*MockClientAPI)(nil).CreateCurrentUserRepoExecute), r)
}

// DeleteUserSecret mocks base method.
func (m *MockClientAPI) DeleteUserSecret(ctx context.Context, secretname string) openapi.ApiDeleteUserSecretRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSecret", ctx, secretname)
	ret0, _ := ret[0].(openapi.ApiDeleteUserSecretRequest)
	return ret0
}

// DeleteUserSecret indicates an expected call of DeleteUserSecret.
func (mr *MockClientAPIMockRecorder) DeleteUserSecret(ctx, secretname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSecret", reflect.TypeOf((*MockClientAPI)(nil).DeleteUserSecret), ctx, secretname)
}

// DeleteUserSecretExecute mocks base method.
func (m *MockClientAPI) DeleteUserSecretExecute(r openapi.ApiDeleteUserSecretRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSecretExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserSecretExecute indicates an expected call of DeleteUserSecretExecute.
func (mr *MockClientAPIMockRecorder) DeleteUserSecretExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSecretExecute", reflect.TypeOf((*MockClientAPI)(nil).DeleteUserSecretExecute), r)
}

// GetUserSettings mocks base method.
func (m *MockClientAPI) GetUserSettings(ctx context.Context) openapi.ApiGetUserSettingsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettings", ctx)
	ret0, _ := ret[0].(openapi.ApiGetUserSettingsRequest)
	return ret0
}

// GetUserSettings indicates an expected call of GetUserSettings.
func (mr *MockClientAPIMockRecorder) GetUserSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettings", reflect.TypeOf((*MockClientAPI)(nil).GetUserSettings), ctx)
}

// GetUserSettingsExecute mocks base method.
func (m *MockClientAPI) GetUserSettingsExecute(r openapi.ApiGetUserSettingsRequest) ([]openapi.UserSettings, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettingsExecute", r)
	ret0, _ := ret[0].([]openapi.UserSettings)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserSettingsExecute indicates an expected call of GetUserSettingsExecute.
func (mr *MockClientAPIMockRecorder) GetUserSettingsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettingsExecute", reflect.TypeOf((*MockClientAPI)(nil).GetUserSettingsExecute), r)
}

// GetVerificationToken mocks base method.
func (m *MockClientAPI) GetVerificationToken(ctx context.Context) openapi.ApiGetVerificationTokenRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationToken", ctx)
	ret0, _ := ret[0].(openapi.ApiGetVerificationTokenRequest)
	return ret0
}

// GetVerificationToken indicates an expected call of GetVerificationToken.
func (mr *MockClientAPIMockRecorder) GetVerificationToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationToken", reflect.TypeOf((*MockClientAPI)(nil).GetVerificationToken), ctx)
}

// GetVerificationTokenExecute mocks base method.
func (m *MockClientAPI) GetVerificationTokenExecute(r openapi.ApiGetVerificationTokenRequest) (string, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationTokenExecute", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVerificationTokenExecute indicates an expected call of GetVerificationTokenExecute.
func (mr *MockClientAPIMockRecorder) GetVerificationTokenExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationTokenExecute", reflect.TypeOf((*MockClientAPI)(nil).GetVerificationTokenExecute), r)
}

// UpdateUserSecret mocks base method.
func (m *MockClientAPI) UpdateUserSecret(ctx context.Context, secretname string) openapi.ApiUpdateUserSecretRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecret", ctx, secretname)
	ret0, _ := ret[0].(openapi.ApiUpdateUserSecretRequest)
	return ret0
}

// UpdateUserSecret indicates an expected call of UpdateUserSecret.
func (mr *MockClientAPIMockRecorder) UpdateUserSecret(ctx, secretname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecret", reflect.TypeOf((*MockClientAPI)(nil).UpdateUserSecret), ctx, secretname)
}

// UpdateUserSecretExecute mocks base method.
func (m *MockClientAPI) UpdateUserSecretExecute(r openapi.ApiUpdateUserSecretRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecretExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSecretExecute indicates an expected call of UpdateUserSecretExecute.
func (mr *MockClientAPIMockRecorder) UpdateUserSecretExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecretExecute", reflect.TypeOf((*MockClientAPI)(nil).UpdateUserSecretExecute), r)
}

// UpdateUserSettings mocks base method.
func (m *MockClientAPI) UpdateUserSettings(ctx context.Context) openapi.ApiUpdateUserSettingsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSettings", ctx)
	ret0, _ := ret[0].(openapi.ApiUpdateUserSettingsRequest)
	return ret0
}

// UpdateUserSettings indicates an expected call of UpdateUserSettings.
func (mr *MockClientAPIMockRecorder) UpdateUserSettings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSettings", reflect.TypeOf((*MockClientAPI)(nil).UpdateUserSettings), ctx)
}

// UpdateUserSettingsExecute mocks base method.
func (m *MockClientAPI) UpdateUserSettingsExecute(r openapi.ApiUpdateUserSettingsRequest) ([]openapi.UserSettings, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSettingsExecute", r)
	ret0, _ := ret[0].([]openapi.UserSettings)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUserSettingsExecute indicates an expected call of UpdateUserSettingsExecute.
func (mr *MockClientAPIMockRecorder) UpdateUserSettingsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSettingsExecute", reflect.TypeOf((*MockClientAPI)(nil).UpdateUserSettingsExecute), r)
}

// UserAddEmail mocks base method.
func (m *MockClientAPI) UserAddEmail(ctx context.Context) openapi.ApiUserAddEmailRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddEmail", ctx)
	ret0, _ := ret[0].(openapi.ApiUserAddEmailRequest)
	return ret0
}

// UserAddEmail indicates an expected call of UserAddEmail.
func (mr *MockClientAPIMockRecorder) UserAddEmail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddEmail", reflect.TypeOf((*MockClientAPI)(nil).UserAddEmail), ctx)
}

// UserAddEmailExecute mocks base method.
func (m *MockClientAPI) UserAddEmailExecute(r openapi.ApiUserAddEmailRequest) ([]openapi.Email, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddEmailExecute", r)
	ret0, _ := ret[0].([]openapi.Email)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserAddEmailExecute indicates an expected call of UserAddEmailExecute.
func (mr *MockClientAPIMockRecorder) UserAddEmailExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddEmailExecute", reflect.TypeOf((*MockClientAPI)(nil).UserAddEmailExecute), r)
}

// UserCheckFollowing mocks base method.
func (m *MockClientAPI) UserCheckFollowing(ctx context.Context, username, target string) openapi.ApiUserCheckFollowingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCheckFollowing", ctx, username, target)
	ret0, _ := ret[0].(openapi.ApiUserCheckFollowingRequest)
	return ret0
}

// UserCheckFollowing indicates an expected call of UserCheckFollowing.
func (mr *MockClientAPIMockRecorder) UserCheckFollowing(ctx, username, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCheckFollowing", reflect.TypeOf((*MockClientAPI)(nil).UserCheckFollowing), ctx, username, target)
}

// UserCheckFollowingExecute mocks base method.
func (m *MockClientAPI) UserCheckFollowingExecute(r openapi.ApiUserCheckFollowingRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCheckFollowingExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCheckFollowingExecute indicates an expected call of UserCheckFollowingExecute.
func (mr *MockClientAPIMockRecorder) UserCheckFollowingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCheckFollowingExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCheckFollowingExecute), r)
}

// UserCreateHook mocks base method.
func (m *MockClientAPI) UserCreateHook(ctx context.Context) openapi.ApiUserCreateHookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateHook", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCreateHookRequest)
	return ret0
}

// UserCreateHook indicates an expected call of UserCreateHook.
func (mr *MockClientAPIMockRecorder) UserCreateHook(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateHook", reflect.TypeOf((*MockClientAPI)(nil).UserCreateHook), ctx)
}

// UserCreateHookExecute mocks base method.
func (m *MockClientAPI) UserCreateHookExecute(r openapi.ApiUserCreateHookRequest) (openapi.Hook, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateHookExecute", r)
	ret0, _ := ret[0].(openapi.Hook)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCreateHookExecute indicates an expected call of UserCreateHookExecute.
func (mr *MockClientAPIMockRecorder) UserCreateHookExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateHookExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCreateHookExecute), r)
}

// UserCreateOAuth2Application mocks base method.
func (m *MockClientAPI) UserCreateOAuth2Application(ctx context.Context) openapi.ApiUserCreateOAuth2ApplicationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateOAuth2Application", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCreateOAuth2ApplicationRequest)
	return ret0
}

// UserCreateOAuth2Application indicates an expected call of UserCreateOAuth2Application.
func (mr *MockClientAPIMockRecorder) UserCreateOAuth2Application(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateOAuth2Application", reflect.TypeOf((*MockClientAPI)(nil).UserCreateOAuth2Application), ctx)
}

// UserCreateOAuth2ApplicationExecute mocks base method.
func (m *MockClientAPI) UserCreateOAuth2ApplicationExecute(r openapi.ApiUserCreateOAuth2ApplicationRequest) (openapi.OAuth2Application, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateOAuth2ApplicationExecute", r)
	ret0, _ := ret[0].(openapi.OAuth2Application)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCreateOAuth2ApplicationExecute indicates an expected call of UserCreateOAuth2ApplicationExecute.
func (mr *MockClientAPIMockRecorder) UserCreateOAuth2ApplicationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateOAuth2ApplicationExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCreateOAuth2ApplicationExecute), r)
}

// UserCreateToken mocks base method.
func (m *MockClientAPI) UserCreateToken(ctx context.Context, username string) openapi.ApiUserCreateTokenRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateToken", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserCreateTokenRequest)
	return ret0
}

// UserCreateToken indicates an expected call of UserCreateToken.
func (mr *MockClientAPIMockRecorder) UserCreateToken(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateToken", reflect.TypeOf((*MockClientAPI)(nil).UserCreateToken), ctx, username)
}

// UserCreateTokenExecute mocks base method.
func (m *MockClientAPI) UserCreateTokenExecute(r openapi.ApiUserCreateTokenRequest) (openapi.AccessToken, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreateTokenExecute", r)
	ret0, _ := ret[0].(openapi.AccessToken)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCreateTokenExecute indicates an expected call of UserCreateTokenExecute.
func (mr *MockClientAPIMockRecorder) UserCreateTokenExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreateTokenExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCreateTokenExecute), r)
}

// UserCurrentCheckFollowing mocks base method.
func (m *MockClientAPI) UserCurrentCheckFollowing(ctx context.Context, username string) openapi.ApiUserCurrentCheckFollowingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentCheckFollowing", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserCurrentCheckFollowingRequest)
	return ret0
}

// UserCurrentCheckFollowing indicates an expected call of UserCurrentCheckFollowing.
func (mr *MockClientAPIMockRecorder) UserCurrentCheckFollowing(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentCheckFollowing", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentCheckFollowing), ctx, username)
}

// UserCurrentCheckFollowingExecute mocks base method.
func (m *MockClientAPI) UserCurrentCheckFollowingExecute(r openapi.ApiUserCurrentCheckFollowingRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentCheckFollowingExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentCheckFollowingExecute indicates an expected call of UserCurrentCheckFollowingExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentCheckFollowingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentCheckFollowingExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentCheckFollowingExecute), r)
}

// UserCurrentCheckStarring mocks base method.
func (m *MockClientAPI) UserCurrentCheckStarring(ctx context.Context, owner, repo string) openapi.ApiUserCurrentCheckStarringRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentCheckStarring", ctx, owner, repo)
	ret0, _ := ret[0].(openapi.ApiUserCurrentCheckStarringRequest)
	return ret0
}

// UserCurrentCheckStarring indicates an expected call of UserCurrentCheckStarring.
func (mr *MockClientAPIMockRecorder) UserCurrentCheckStarring(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentCheckStarring", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentCheckStarring), ctx, owner, repo)
}

// UserCurrentCheckStarringExecute mocks base method.
func (m *MockClientAPI) UserCurrentCheckStarringExecute(r openapi.ApiUserCurrentCheckStarringRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentCheckStarringExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentCheckStarringExecute indicates an expected call of UserCurrentCheckStarringExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentCheckStarringExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentCheckStarringExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentCheckStarringExecute), r)
}

// UserCurrentDeleteFollow mocks base method.
func (m *MockClientAPI) UserCurrentDeleteFollow(ctx context.Context, username string) openapi.ApiUserCurrentDeleteFollowRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteFollow", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserCurrentDeleteFollowRequest)
	return ret0
}

// UserCurrentDeleteFollow indicates an expected call of UserCurrentDeleteFollow.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteFollow(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteFollow", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteFollow), ctx, username)
}

// UserCurrentDeleteFollowExecute mocks base method.
func (m *MockClientAPI) UserCurrentDeleteFollowExecute(r openapi.ApiUserCurrentDeleteFollowRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteFollowExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentDeleteFollowExecute indicates an expected call of UserCurrentDeleteFollowExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteFollowExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteFollowExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteFollowExecute), r)
}

// UserCurrentDeleteGPGKey mocks base method.
func (m *MockClientAPI) UserCurrentDeleteGPGKey(ctx context.Context, id int64) openapi.ApiUserCurrentDeleteGPGKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteGPGKey", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserCurrentDeleteGPGKeyRequest)
	return ret0
}

// UserCurrentDeleteGPGKey indicates an expected call of UserCurrentDeleteGPGKey.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteGPGKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteGPGKey", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteGPGKey), ctx, id)
}

// UserCurrentDeleteGPGKeyExecute mocks base method.
func (m *MockClientAPI) UserCurrentDeleteGPGKeyExecute(r openapi.ApiUserCurrentDeleteGPGKeyRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteGPGKeyExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentDeleteGPGKeyExecute indicates an expected call of UserCurrentDeleteGPGKeyExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteGPGKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteGPGKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteGPGKeyExecute), r)
}

// UserCurrentDeleteKey mocks base method.
func (m *MockClientAPI) UserCurrentDeleteKey(ctx context.Context, id int64) openapi.ApiUserCurrentDeleteKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteKey", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserCurrentDeleteKeyRequest)
	return ret0
}

// UserCurrentDeleteKey indicates an expected call of UserCurrentDeleteKey.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteKey", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteKey), ctx, id)
}

// UserCurrentDeleteKeyExecute mocks base method.
func (m *MockClientAPI) UserCurrentDeleteKeyExecute(r openapi.ApiUserCurrentDeleteKeyRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteKeyExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentDeleteKeyExecute indicates an expected call of UserCurrentDeleteKeyExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteKeyExecute), r)
}

// UserCurrentDeleteStar mocks base method.
func (m *MockClientAPI) UserCurrentDeleteStar(ctx context.Context, owner, repo string) openapi.ApiUserCurrentDeleteStarRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteStar", ctx, owner, repo)
	ret0, _ := ret[0].(openapi.ApiUserCurrentDeleteStarRequest)
	return ret0
}

// UserCurrentDeleteStar indicates an expected call of UserCurrentDeleteStar.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteStar(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteStar", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteStar), ctx, owner, repo)
}

// UserCurrentDeleteStarExecute mocks base method.
func (m *MockClientAPI) UserCurrentDeleteStarExecute(r openapi.ApiUserCurrentDeleteStarRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentDeleteStarExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentDeleteStarExecute indicates an expected call of UserCurrentDeleteStarExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentDeleteStarExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentDeleteStarExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentDeleteStarExecute), r)
}

// UserCurrentGetGPGKey mocks base method.
func (m *MockClientAPI) UserCurrentGetGPGKey(ctx context.Context, id int64) openapi.ApiUserCurrentGetGPGKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentGetGPGKey", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserCurrentGetGPGKeyRequest)
	return ret0
}

// UserCurrentGetGPGKey indicates an expected call of UserCurrentGetGPGKey.
func (mr *MockClientAPIMockRecorder) UserCurrentGetGPGKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentGetGPGKey", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentGetGPGKey), ctx, id)
}

// UserCurrentGetGPGKeyExecute mocks base method.
func (m *MockClientAPI) UserCurrentGetGPGKeyExecute(r openapi.ApiUserCurrentGetGPGKeyRequest) (openapi.GPGKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentGetGPGKeyExecute", r)
	ret0, _ := ret[0].(openapi.GPGKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentGetGPGKeyExecute indicates an expected call of UserCurrentGetGPGKeyExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentGetGPGKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentGetGPGKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentGetGPGKeyExecute), r)
}

// UserCurrentGetKey mocks base method.
func (m *MockClientAPI) UserCurrentGetKey(ctx context.Context, id int64) openapi.ApiUserCurrentGetKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentGetKey", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserCurrentGetKeyRequest)
	return ret0
}

// UserCurrentGetKey indicates an expected call of UserCurrentGetKey.
func (mr *MockClientAPIMockRecorder) UserCurrentGetKey(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentGetKey", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentGetKey), ctx, id)
}

// UserCurrentGetKeyExecute mocks base method.
func (m *MockClientAPI) UserCurrentGetKeyExecute(r openapi.ApiUserCurrentGetKeyRequest) (openapi.PublicKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentGetKeyExecute", r)
	ret0, _ := ret[0].(openapi.PublicKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentGetKeyExecute indicates an expected call of UserCurrentGetKeyExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentGetKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentGetKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentGetKeyExecute), r)
}

// UserCurrentListFollowers mocks base method.
func (m *MockClientAPI) UserCurrentListFollowers(ctx context.Context) openapi.ApiUserCurrentListFollowersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListFollowers", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListFollowersRequest)
	return ret0
}

// UserCurrentListFollowers indicates an expected call of UserCurrentListFollowers.
func (mr *MockClientAPIMockRecorder) UserCurrentListFollowers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListFollowers", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListFollowers), ctx)
}

// UserCurrentListFollowersExecute mocks base method.
func (m *MockClientAPI) UserCurrentListFollowersExecute(r openapi.ApiUserCurrentListFollowersRequest) ([]openapi.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListFollowersExecute", r)
	ret0, _ := ret[0].([]openapi.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListFollowersExecute indicates an expected call of UserCurrentListFollowersExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListFollowersExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListFollowersExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListFollowersExecute), r)
}

// UserCurrentListFollowing mocks base method.
func (m *MockClientAPI) UserCurrentListFollowing(ctx context.Context) openapi.ApiUserCurrentListFollowingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListFollowing", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListFollowingRequest)
	return ret0
}

// UserCurrentListFollowing indicates an expected call of UserCurrentListFollowing.
func (mr *MockClientAPIMockRecorder) UserCurrentListFollowing(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListFollowing", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListFollowing), ctx)
}

// UserCurrentListFollowingExecute mocks base method.
func (m *MockClientAPI) UserCurrentListFollowingExecute(r openapi.ApiUserCurrentListFollowingRequest) ([]openapi.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListFollowingExecute", r)
	ret0, _ := ret[0].([]openapi.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListFollowingExecute indicates an expected call of UserCurrentListFollowingExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListFollowingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListFollowingExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListFollowingExecute), r)
}

// UserCurrentListGPGKeys mocks base method.
func (m *MockClientAPI) UserCurrentListGPGKeys(ctx context.Context) openapi.ApiUserCurrentListGPGKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListGPGKeys", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListGPGKeysRequest)
	return ret0
}

// UserCurrentListGPGKeys indicates an expected call of UserCurrentListGPGKeys.
func (mr *MockClientAPIMockRecorder) UserCurrentListGPGKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListGPGKeys", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListGPGKeys), ctx)
}

// UserCurrentListGPGKeysExecute mocks base method.
func (m *MockClientAPI) UserCurrentListGPGKeysExecute(r openapi.ApiUserCurrentListGPGKeysRequest) ([]openapi.GPGKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListGPGKeysExecute", r)
	ret0, _ := ret[0].([]openapi.GPGKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListGPGKeysExecute indicates an expected call of UserCurrentListGPGKeysExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListGPGKeysExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListGPGKeysExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListGPGKeysExecute), r)
}

// UserCurrentListKeys mocks base method.
func (m *MockClientAPI) UserCurrentListKeys(ctx context.Context) openapi.ApiUserCurrentListKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListKeys", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListKeysRequest)
	return ret0
}

// UserCurrentListKeys indicates an expected call of UserCurrentListKeys.
func (mr *MockClientAPIMockRecorder) UserCurrentListKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListKeys", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListKeys), ctx)
}

// UserCurrentListKeysExecute mocks base method.
func (m *MockClientAPI) UserCurrentListKeysExecute(r openapi.ApiUserCurrentListKeysRequest) ([]openapi.PublicKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListKeysExecute", r)
	ret0, _ := ret[0].([]openapi.PublicKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListKeysExecute indicates an expected call of UserCurrentListKeysExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListKeysExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListKeysExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListKeysExecute), r)
}

// UserCurrentListRepos mocks base method.
func (m *MockClientAPI) UserCurrentListRepos(ctx context.Context) openapi.ApiUserCurrentListReposRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListRepos", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListReposRequest)
	return ret0
}

// UserCurrentListRepos indicates an expected call of UserCurrentListRepos.
func (mr *MockClientAPIMockRecorder) UserCurrentListRepos(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListRepos", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListRepos), ctx)
}

// UserCurrentListReposExecute mocks base method.
func (m *MockClientAPI) UserCurrentListReposExecute(r openapi.ApiUserCurrentListReposRequest) ([]openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListReposExecute", r)
	ret0, _ := ret[0].([]openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListReposExecute indicates an expected call of UserCurrentListReposExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListReposExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListReposExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListReposExecute), r)
}

// UserCurrentListStarred mocks base method.
func (m *MockClientAPI) UserCurrentListStarred(ctx context.Context) openapi.ApiUserCurrentListStarredRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListStarred", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListStarredRequest)
	return ret0
}

// UserCurrentListStarred indicates an expected call of UserCurrentListStarred.
func (mr *MockClientAPIMockRecorder) UserCurrentListStarred(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListStarred", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListStarred), ctx)
}

// UserCurrentListStarredExecute mocks base method.
func (m *MockClientAPI) UserCurrentListStarredExecute(r openapi.ApiUserCurrentListStarredRequest) ([]openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListStarredExecute", r)
	ret0, _ := ret[0].([]openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListStarredExecute indicates an expected call of UserCurrentListStarredExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListStarredExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListStarredExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListStarredExecute), r)
}

// UserCurrentListSubscriptions mocks base method.
func (m *MockClientAPI) UserCurrentListSubscriptions(ctx context.Context) openapi.ApiUserCurrentListSubscriptionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListSubscriptions", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentListSubscriptionsRequest)
	return ret0
}

// UserCurrentListSubscriptions indicates an expected call of UserCurrentListSubscriptions.
func (mr *MockClientAPIMockRecorder) UserCurrentListSubscriptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListSubscriptions", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListSubscriptions), ctx)
}

// UserCurrentListSubscriptionsExecute mocks base method.
func (m *MockClientAPI) UserCurrentListSubscriptionsExecute(r openapi.ApiUserCurrentListSubscriptionsRequest) ([]openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentListSubscriptionsExecute", r)
	ret0, _ := ret[0].([]openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentListSubscriptionsExecute indicates an expected call of UserCurrentListSubscriptionsExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentListSubscriptionsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentListSubscriptionsExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentListSubscriptionsExecute), r)
}

// UserCurrentPostGPGKey mocks base method.
func (m *MockClientAPI) UserCurrentPostGPGKey(ctx context.Context) openapi.ApiUserCurrentPostGPGKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPostGPGKey", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentPostGPGKeyRequest)
	return ret0
}

// UserCurrentPostGPGKey indicates an expected call of UserCurrentPostGPGKey.
func (mr *MockClientAPIMockRecorder) UserCurrentPostGPGKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPostGPGKey", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPostGPGKey), ctx)
}

// UserCurrentPostGPGKeyExecute mocks base method.
func (m *MockClientAPI) UserCurrentPostGPGKeyExecute(r openapi.ApiUserCurrentPostGPGKeyRequest) (openapi.GPGKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPostGPGKeyExecute", r)
	ret0, _ := ret[0].(openapi.GPGKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentPostGPGKeyExecute indicates an expected call of UserCurrentPostGPGKeyExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentPostGPGKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPostGPGKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPostGPGKeyExecute), r)
}

// UserCurrentPostKey mocks base method.
func (m *MockClientAPI) UserCurrentPostKey(ctx context.Context) openapi.ApiUserCurrentPostKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPostKey", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentPostKeyRequest)
	return ret0
}

// UserCurrentPostKey indicates an expected call of UserCurrentPostKey.
func (mr *MockClientAPIMockRecorder) UserCurrentPostKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPostKey", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPostKey), ctx)
}

// UserCurrentPostKeyExecute mocks base method.
func (m *MockClientAPI) UserCurrentPostKeyExecute(r openapi.ApiUserCurrentPostKeyRequest) (openapi.PublicKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPostKeyExecute", r)
	ret0, _ := ret[0].(openapi.PublicKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentPostKeyExecute indicates an expected call of UserCurrentPostKeyExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentPostKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPostKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPostKeyExecute), r)
}

// UserCurrentPutFollow mocks base method.
func (m *MockClientAPI) UserCurrentPutFollow(ctx context.Context, username string) openapi.ApiUserCurrentPutFollowRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPutFollow", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserCurrentPutFollowRequest)
	return ret0
}

// UserCurrentPutFollow indicates an expected call of UserCurrentPutFollow.
func (mr *MockClientAPIMockRecorder) UserCurrentPutFollow(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPutFollow", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPutFollow), ctx, username)
}

// UserCurrentPutFollowExecute mocks base method.
func (m *MockClientAPI) UserCurrentPutFollowExecute(r openapi.ApiUserCurrentPutFollowRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPutFollowExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentPutFollowExecute indicates an expected call of UserCurrentPutFollowExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentPutFollowExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPutFollowExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPutFollowExecute), r)
}

// UserCurrentPutStar mocks base method.
func (m *MockClientAPI) UserCurrentPutStar(ctx context.Context, owner, repo string) openapi.ApiUserCurrentPutStarRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPutStar", ctx, owner, repo)
	ret0, _ := ret[0].(openapi.ApiUserCurrentPutStarRequest)
	return ret0
}

// UserCurrentPutStar indicates an expected call of UserCurrentPutStar.
func (mr *MockClientAPIMockRecorder) UserCurrentPutStar(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPutStar", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPutStar), ctx, owner, repo)
}

// UserCurrentPutStarExecute mocks base method.
func (m *MockClientAPI) UserCurrentPutStarExecute(r openapi.ApiUserCurrentPutStarRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentPutStarExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCurrentPutStarExecute indicates an expected call of UserCurrentPutStarExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentPutStarExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentPutStarExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentPutStarExecute), r)
}

// UserCurrentTrackedTimes mocks base method.
func (m *MockClientAPI) UserCurrentTrackedTimes(ctx context.Context) openapi.ApiUserCurrentTrackedTimesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentTrackedTimes", ctx)
	ret0, _ := ret[0].(openapi.ApiUserCurrentTrackedTimesRequest)
	return ret0
}

// UserCurrentTrackedTimes indicates an expected call of UserCurrentTrackedTimes.
func (mr *MockClientAPIMockRecorder) UserCurrentTrackedTimes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentTrackedTimes", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentTrackedTimes), ctx)
}

// UserCurrentTrackedTimesExecute mocks base method.
func (m *MockClientAPI) UserCurrentTrackedTimesExecute(r openapi.ApiUserCurrentTrackedTimesRequest) ([]openapi.TrackedTime, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCurrentTrackedTimesExecute", r)
	ret0, _ := ret[0].([]openapi.TrackedTime)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserCurrentTrackedTimesExecute indicates an expected call of UserCurrentTrackedTimesExecute.
func (mr *MockClientAPIMockRecorder) UserCurrentTrackedTimesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCurrentTrackedTimesExecute", reflect.TypeOf((*MockClientAPI)(nil).UserCurrentTrackedTimesExecute), r)
}

// UserDeleteAccessToken mocks base method.
func (m *MockClientAPI) UserDeleteAccessToken(ctx context.Context, username, token string) openapi.ApiUserDeleteAccessTokenRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteAccessToken", ctx, username, token)
	ret0, _ := ret[0].(openapi.ApiUserDeleteAccessTokenRequest)
	return ret0
}

// UserDeleteAccessToken indicates an expected call of UserDeleteAccessToken.
func (mr *MockClientAPIMockRecorder) UserDeleteAccessToken(ctx, username, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteAccessToken", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteAccessToken), ctx, username, token)
}

// UserDeleteAccessTokenExecute mocks base method.
func (m *MockClientAPI) UserDeleteAccessTokenExecute(r openapi.ApiUserDeleteAccessTokenRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteAccessTokenExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleteAccessTokenExecute indicates an expected call of UserDeleteAccessTokenExecute.
func (mr *MockClientAPIMockRecorder) UserDeleteAccessTokenExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteAccessTokenExecute", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteAccessTokenExecute), r)
}

// UserDeleteAvatar mocks base method.
func (m *MockClientAPI) UserDeleteAvatar(ctx context.Context) openapi.ApiUserDeleteAvatarRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteAvatar", ctx)
	ret0, _ := ret[0].(openapi.ApiUserDeleteAvatarRequest)
	return ret0
}

// UserDeleteAvatar indicates an expected call of UserDeleteAvatar.
func (mr *MockClientAPIMockRecorder) UserDeleteAvatar(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteAvatar", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteAvatar), ctx)
}

// UserDeleteAvatarExecute mocks base method.
func (m *MockClientAPI) UserDeleteAvatarExecute(r openapi.ApiUserDeleteAvatarRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteAvatarExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleteAvatarExecute indicates an expected call of UserDeleteAvatarExecute.
func (mr *MockClientAPIMockRecorder) UserDeleteAvatarExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteAvatarExecute", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteAvatarExecute), r)
}

// UserDeleteEmail mocks base method.
func (m *MockClientAPI) UserDeleteEmail(ctx context.Context) openapi.ApiUserDeleteEmailRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteEmail", ctx)
	ret0, _ := ret[0].(openapi.ApiUserDeleteEmailRequest)
	return ret0
}

// UserDeleteEmail indicates an expected call of UserDeleteEmail.
func (mr *MockClientAPIMockRecorder) UserDeleteEmail(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteEmail", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteEmail), ctx)
}

// UserDeleteEmailExecute mocks base method.
func (m *MockClientAPI) UserDeleteEmailExecute(r openapi.ApiUserDeleteEmailRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteEmailExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleteEmailExecute indicates an expected call of UserDeleteEmailExecute.
func (mr *MockClientAPIMockRecorder) UserDeleteEmailExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteEmailExecute", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteEmailExecute), r)
}

// UserDeleteHook mocks base method.
func (m *MockClientAPI) UserDeleteHook(ctx context.Context, id int64) openapi.ApiUserDeleteHookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteHook", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserDeleteHookRequest)
	return ret0
}

// UserDeleteHook indicates an expected call of UserDeleteHook.
func (mr *MockClientAPIMockRecorder) UserDeleteHook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteHook", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteHook), ctx, id)
}

// UserDeleteHookExecute mocks base method.
func (m *MockClientAPI) UserDeleteHookExecute(r openapi.ApiUserDeleteHookRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteHookExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleteHookExecute indicates an expected call of UserDeleteHookExecute.
func (mr *MockClientAPIMockRecorder) UserDeleteHookExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteHookExecute", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteHookExecute), r)
}

// UserDeleteOAuth2Application mocks base method.
func (m *MockClientAPI) UserDeleteOAuth2Application(ctx context.Context, id int64) openapi.ApiUserDeleteOAuth2ApplicationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteOAuth2Application", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserDeleteOAuth2ApplicationRequest)
	return ret0
}

// UserDeleteOAuth2Application indicates an expected call of UserDeleteOAuth2Application.
func (mr *MockClientAPIMockRecorder) UserDeleteOAuth2Application(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteOAuth2Application", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteOAuth2Application), ctx, id)
}

// UserDeleteOAuth2ApplicationExecute mocks base method.
func (m *MockClientAPI) UserDeleteOAuth2ApplicationExecute(r openapi.ApiUserDeleteOAuth2ApplicationRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteOAuth2ApplicationExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleteOAuth2ApplicationExecute indicates an expected call of UserDeleteOAuth2ApplicationExecute.
func (mr *MockClientAPIMockRecorder) UserDeleteOAuth2ApplicationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteOAuth2ApplicationExecute", reflect.TypeOf((*MockClientAPI)(nil).UserDeleteOAuth2ApplicationExecute), r)
}

// UserEditHook mocks base method.
func (m *MockClientAPI) UserEditHook(ctx context.Context, id int64) openapi.ApiUserEditHookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditHook", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserEditHookRequest)
	return ret0
}

// UserEditHook indicates an expected call of UserEditHook.
func (mr *MockClientAPIMockRecorder) UserEditHook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditHook", reflect.TypeOf((*MockClientAPI)(nil).UserEditHook), ctx, id)
}

// UserEditHookExecute mocks base method.
func (m *MockClientAPI) UserEditHookExecute(r openapi.ApiUserEditHookRequest) (openapi.Hook, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditHookExecute", r)
	ret0, _ := ret[0].(openapi.Hook)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserEditHookExecute indicates an expected call of UserEditHookExecute.
func (mr *MockClientAPIMockRecorder) UserEditHookExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditHookExecute", reflect.TypeOf((*MockClientAPI)(nil).UserEditHookExecute), r)
}

// UserGet mocks base method.
func (m *MockClientAPI) UserGet(ctx context.Context, username string) openapi.ApiUserGetRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserGetRequest)
	return ret0
}

// UserGet indicates an expected call of UserGet.
func (mr *MockClientAPIMockRecorder) UserGet(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockClientAPI)(nil).UserGet), ctx, username)
}

// UserGetCurrent mocks base method.
func (m *MockClientAPI) UserGetCurrent(ctx context.Context) openapi.ApiUserGetCurrentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetCurrent", ctx)
	ret0, _ := ret[0].(openapi.ApiUserGetCurrentRequest)
	return ret0
}

// UserGetCurrent indicates an expected call of UserGetCurrent.
func (mr *MockClientAPIMockRecorder) UserGetCurrent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetCurrent", reflect.TypeOf((*MockClientAPI)(nil).UserGetCurrent), ctx)
}

// UserGetCurrentExecute mocks base method.
func (m *MockClientAPI) UserGetCurrentExecute(r openapi.ApiUserGetCurrentRequest) (openapi.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetCurrentExecute", r)
	ret0, _ := ret[0].(openapi.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetCurrentExecute indicates an expected call of UserGetCurrentExecute.
func (mr *MockClientAPIMockRecorder) UserGetCurrentExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetCurrentExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetCurrentExecute), r)
}

// UserGetExecute mocks base method.
func (m *MockClientAPI) UserGetExecute(r openapi.ApiUserGetRequest) (openapi.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetExecute", r)
	ret0, _ := ret[0].(openapi.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetExecute indicates an expected call of UserGetExecute.
func (mr *MockClientAPIMockRecorder) UserGetExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetExecute), r)
}

// UserGetHeatmapData mocks base method.
func (m *MockClientAPI) UserGetHeatmapData(ctx context.Context, username string) openapi.ApiUserGetHeatmapDataRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetHeatmapData", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserGetHeatmapDataRequest)
	return ret0
}

// UserGetHeatmapData indicates an expected call of UserGetHeatmapData.
func (mr *MockClientAPIMockRecorder) UserGetHeatmapData(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetHeatmapData", reflect.TypeOf((*MockClientAPI)(nil).UserGetHeatmapData), ctx, username)
}

// UserGetHeatmapDataExecute mocks base method.
func (m *MockClientAPI) UserGetHeatmapDataExecute(r openapi.ApiUserGetHeatmapDataRequest) ([]openapi.UserHeatmapData, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetHeatmapDataExecute", r)
	ret0, _ := ret[0].([]openapi.UserHeatmapData)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetHeatmapDataExecute indicates an expected call of UserGetHeatmapDataExecute.
func (mr *MockClientAPIMockRecorder) UserGetHeatmapDataExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetHeatmapDataExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetHeatmapDataExecute), r)
}

// UserGetHook mocks base method.
func (m *MockClientAPI) UserGetHook(ctx context.Context, id int64) openapi.ApiUserGetHookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetHook", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserGetHookRequest)
	return ret0
}

// UserGetHook indicates an expected call of UserGetHook.
func (mr *MockClientAPIMockRecorder) UserGetHook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetHook", reflect.TypeOf((*MockClientAPI)(nil).UserGetHook), ctx, id)
}

// UserGetHookExecute mocks base method.
func (m *MockClientAPI) UserGetHookExecute(r openapi.ApiUserGetHookRequest) (openapi.Hook, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetHookExecute", r)
	ret0, _ := ret[0].(openapi.Hook)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetHookExecute indicates an expected call of UserGetHookExecute.
func (mr *MockClientAPIMockRecorder) UserGetHookExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetHookExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetHookExecute), r)
}

// UserGetOAuth2Application mocks base method.
func (m *MockClientAPI) UserGetOAuth2Application(ctx context.Context, id int64) openapi.ApiUserGetOAuth2ApplicationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetOAuth2Application", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserGetOAuth2ApplicationRequest)
	return ret0
}

// UserGetOAuth2Application indicates an expected call of UserGetOAuth2Application.
func (mr *MockClientAPIMockRecorder) UserGetOAuth2Application(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetOAuth2Application", reflect.TypeOf((*MockClientAPI)(nil).UserGetOAuth2Application), ctx, id)
}

// UserGetOAuth2ApplicationExecute mocks base method.
func (m *MockClientAPI) UserGetOAuth2ApplicationExecute(r openapi.ApiUserGetOAuth2ApplicationRequest) (openapi.OAuth2Application, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetOAuth2ApplicationExecute", r)
	ret0, _ := ret[0].(openapi.OAuth2Application)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetOAuth2ApplicationExecute indicates an expected call of UserGetOAuth2ApplicationExecute.
func (mr *MockClientAPIMockRecorder) UserGetOAuth2ApplicationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetOAuth2ApplicationExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetOAuth2ApplicationExecute), r)
}

// UserGetOauth2Application mocks base method.
func (m *MockClientAPI) UserGetOauth2Application(ctx context.Context) openapi.ApiUserGetOauth2ApplicationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetOauth2Application", ctx)
	ret0, _ := ret[0].(openapi.ApiUserGetOauth2ApplicationRequest)
	return ret0
}

// UserGetOauth2Application indicates an expected call of UserGetOauth2Application.
func (mr *MockClientAPIMockRecorder) UserGetOauth2Application(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetOauth2Application", reflect.TypeOf((*MockClientAPI)(nil).UserGetOauth2Application), ctx)
}

// UserGetOauth2ApplicationExecute mocks base method.
func (m *MockClientAPI) UserGetOauth2ApplicationExecute(r openapi.ApiUserGetOauth2ApplicationRequest) ([]openapi.OAuth2Application, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetOauth2ApplicationExecute", r)
	ret0, _ := ret[0].([]openapi.OAuth2Application)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetOauth2ApplicationExecute indicates an expected call of UserGetOauth2ApplicationExecute.
func (mr *MockClientAPIMockRecorder) UserGetOauth2ApplicationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetOauth2ApplicationExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetOauth2ApplicationExecute), r)
}

// UserGetRunnerRegistrationToken mocks base method.
func (m *MockClientAPI) UserGetRunnerRegistrationToken(ctx context.Context) openapi.ApiUserGetRunnerRegistrationTokenRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetRunnerRegistrationToken", ctx)
	ret0, _ := ret[0].(openapi.ApiUserGetRunnerRegistrationTokenRequest)
	return ret0
}

// UserGetRunnerRegistrationToken indicates an expected call of UserGetRunnerRegistrationToken.
func (mr *MockClientAPIMockRecorder) UserGetRunnerRegistrationToken(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetRunnerRegistrationToken", reflect.TypeOf((*MockClientAPI)(nil).UserGetRunnerRegistrationToken), ctx)
}

// UserGetRunnerRegistrationTokenExecute mocks base method.
func (m *MockClientAPI) UserGetRunnerRegistrationTokenExecute(r openapi.ApiUserGetRunnerRegistrationTokenRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetRunnerRegistrationTokenExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetRunnerRegistrationTokenExecute indicates an expected call of UserGetRunnerRegistrationTokenExecute.
func (mr *MockClientAPIMockRecorder) UserGetRunnerRegistrationTokenExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetRunnerRegistrationTokenExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetRunnerRegistrationTokenExecute), r)
}

// UserGetStopWatches mocks base method.
func (m *MockClientAPI) UserGetStopWatches(ctx context.Context) openapi.ApiUserGetStopWatchesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetStopWatches", ctx)
	ret0, _ := ret[0].(openapi.ApiUserGetStopWatchesRequest)
	return ret0
}

// UserGetStopWatches indicates an expected call of UserGetStopWatches.
func (mr *MockClientAPIMockRecorder) UserGetStopWatches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetStopWatches", reflect.TypeOf((*MockClientAPI)(nil).UserGetStopWatches), ctx)
}

// UserGetStopWatchesExecute mocks base method.
func (m *MockClientAPI) UserGetStopWatchesExecute(r openapi.ApiUserGetStopWatchesRequest) ([]openapi.StopWatch, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetStopWatchesExecute", r)
	ret0, _ := ret[0].([]openapi.StopWatch)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetStopWatchesExecute indicates an expected call of UserGetStopWatchesExecute.
func (mr *MockClientAPIMockRecorder) UserGetStopWatchesExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetStopWatchesExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetStopWatchesExecute), r)
}

// UserGetTokens mocks base method.
func (m *MockClientAPI) UserGetTokens(ctx context.Context, username string) openapi.ApiUserGetTokensRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetTokens", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserGetTokensRequest)
	return ret0
}

// UserGetTokens indicates an expected call of UserGetTokens.
func (mr *MockClientAPIMockRecorder) UserGetTokens(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetTokens", reflect.TypeOf((*MockClientAPI)(nil).UserGetTokens), ctx, username)
}

// UserGetTokensExecute mocks base method.
func (m *MockClientAPI) UserGetTokensExecute(r openapi.ApiUserGetTokensRequest) ([]openapi.AccessToken, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetTokensExecute", r)
	ret0, _ := ret[0].([]openapi.AccessToken)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserGetTokensExecute indicates an expected call of UserGetTokensExecute.
func (mr *MockClientAPIMockRecorder) UserGetTokensExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetTokensExecute", reflect.TypeOf((*MockClientAPI)(nil).UserGetTokensExecute), r)
}

// UserListActivityFeeds mocks base method.
func (m *MockClientAPI) UserListActivityFeeds(ctx context.Context, username string) openapi.ApiUserListActivityFeedsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListActivityFeeds", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListActivityFeedsRequest)
	return ret0
}

// UserListActivityFeeds indicates an expected call of UserListActivityFeeds.
func (mr *MockClientAPIMockRecorder) UserListActivityFeeds(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListActivityFeeds", reflect.TypeOf((*MockClientAPI)(nil).UserListActivityFeeds), ctx, username)
}

// UserListActivityFeedsExecute mocks base method.
func (m *MockClientAPI) UserListActivityFeedsExecute(r openapi.ApiUserListActivityFeedsRequest) ([]openapi.Activity, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListActivityFeedsExecute", r)
	ret0, _ := ret[0].([]openapi.Activity)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListActivityFeedsExecute indicates an expected call of UserListActivityFeedsExecute.
func (mr *MockClientAPIMockRecorder) UserListActivityFeedsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListActivityFeedsExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListActivityFeedsExecute), r)
}

// UserListEmails mocks base method.
func (m *MockClientAPI) UserListEmails(ctx context.Context) openapi.ApiUserListEmailsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListEmails", ctx)
	ret0, _ := ret[0].(openapi.ApiUserListEmailsRequest)
	return ret0
}

// UserListEmails indicates an expected call of UserListEmails.
func (mr *MockClientAPIMockRecorder) UserListEmails(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListEmails", reflect.TypeOf((*MockClientAPI)(nil).UserListEmails), ctx)
}

// UserListEmailsExecute mocks base method.
func (m *MockClientAPI) UserListEmailsExecute(r openapi.ApiUserListEmailsRequest) ([]openapi.Email, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListEmailsExecute", r)
	ret0, _ := ret[0].([]openapi.Email)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListEmailsExecute indicates an expected call of UserListEmailsExecute.
func (mr *MockClientAPIMockRecorder) UserListEmailsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListEmailsExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListEmailsExecute), r)
}

// UserListFollowers mocks base method.
func (m *MockClientAPI) UserListFollowers(ctx context.Context, username string) openapi.ApiUserListFollowersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListFollowers", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListFollowersRequest)
	return ret0
}

// UserListFollowers indicates an expected call of UserListFollowers.
func (mr *MockClientAPIMockRecorder) UserListFollowers(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListFollowers", reflect.TypeOf((*MockClientAPI)(nil).UserListFollowers), ctx, username)
}

// UserListFollowersExecute mocks base method.
func (m *MockClientAPI) UserListFollowersExecute(r openapi.ApiUserListFollowersRequest) ([]openapi.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListFollowersExecute", r)
	ret0, _ := ret[0].([]openapi.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListFollowersExecute indicates an expected call of UserListFollowersExecute.
func (mr *MockClientAPIMockRecorder) UserListFollowersExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListFollowersExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListFollowersExecute), r)
}

// UserListFollowing mocks base method.
func (m *MockClientAPI) UserListFollowing(ctx context.Context, username string) openapi.ApiUserListFollowingRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListFollowing", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListFollowingRequest)
	return ret0
}

// UserListFollowing indicates an expected call of UserListFollowing.
func (mr *MockClientAPIMockRecorder) UserListFollowing(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListFollowing", reflect.TypeOf((*MockClientAPI)(nil).UserListFollowing), ctx, username)
}

// UserListFollowingExecute mocks base method.
func (m *MockClientAPI) UserListFollowingExecute(r openapi.ApiUserListFollowingRequest) ([]openapi.User, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListFollowingExecute", r)
	ret0, _ := ret[0].([]openapi.User)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListFollowingExecute indicates an expected call of UserListFollowingExecute.
func (mr *MockClientAPIMockRecorder) UserListFollowingExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListFollowingExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListFollowingExecute), r)
}

// UserListGPGKeys mocks base method.
func (m *MockClientAPI) UserListGPGKeys(ctx context.Context, username string) openapi.ApiUserListGPGKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListGPGKeys", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListGPGKeysRequest)
	return ret0
}

// UserListGPGKeys indicates an expected call of UserListGPGKeys.
func (mr *MockClientAPIMockRecorder) UserListGPGKeys(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListGPGKeys", reflect.TypeOf((*MockClientAPI)(nil).UserListGPGKeys), ctx, username)
}

// UserListGPGKeysExecute mocks base method.
func (m *MockClientAPI) UserListGPGKeysExecute(r openapi.ApiUserListGPGKeysRequest) ([]openapi.GPGKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListGPGKeysExecute", r)
	ret0, _ := ret[0].([]openapi.GPGKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListGPGKeysExecute indicates an expected call of UserListGPGKeysExecute.
func (mr *MockClientAPIMockRecorder) UserListGPGKeysExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListGPGKeysExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListGPGKeysExecute), r)
}

// UserListHooks mocks base method.
func (m *MockClientAPI) UserListHooks(ctx context.Context) openapi.ApiUserListHooksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListHooks", ctx)
	ret0, _ := ret[0].(openapi.ApiUserListHooksRequest)
	return ret0
}

// UserListHooks indicates an expected call of UserListHooks.
func (mr *MockClientAPIMockRecorder) UserListHooks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListHooks", reflect.TypeOf((*MockClientAPI)(nil).UserListHooks), ctx)
}

// UserListHooksExecute mocks base method.
func (m *MockClientAPI) UserListHooksExecute(r openapi.ApiUserListHooksRequest) ([]openapi.Hook, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListHooksExecute", r)
	ret0, _ := ret[0].([]openapi.Hook)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListHooksExecute indicates an expected call of UserListHooksExecute.
func (mr *MockClientAPIMockRecorder) UserListHooksExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListHooksExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListHooksExecute), r)
}

// UserListKeys mocks base method.
func (m *MockClientAPI) UserListKeys(ctx context.Context, username string) openapi.ApiUserListKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListKeys", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListKeysRequest)
	return ret0
}

// UserListKeys indicates an expected call of UserListKeys.
func (mr *MockClientAPIMockRecorder) UserListKeys(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListKeys", reflect.TypeOf((*MockClientAPI)(nil).UserListKeys), ctx, username)
}

// UserListKeysExecute mocks base method.
func (m *MockClientAPI) UserListKeysExecute(r openapi.ApiUserListKeysRequest) ([]openapi.PublicKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListKeysExecute", r)
	ret0, _ := ret[0].([]openapi.PublicKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListKeysExecute indicates an expected call of UserListKeysExecute.
func (mr *MockClientAPIMockRecorder) UserListKeysExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListKeysExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListKeysExecute), r)
}

// UserListRepos mocks base method.
func (m *MockClientAPI) UserListRepos(ctx context.Context, username string) openapi.ApiUserListReposRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListRepos", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListReposRequest)
	return ret0
}

// UserListRepos indicates an expected call of UserListRepos.
func (mr *MockClientAPIMockRecorder) UserListRepos(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListRepos", reflect.TypeOf((*MockClientAPI)(nil).UserListRepos), ctx, username)
}

// UserListReposExecute mocks base method.
func (m *MockClientAPI) UserListReposExecute(r openapi.ApiUserListReposRequest) ([]openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListReposExecute", r)
	ret0, _ := ret[0].([]openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListReposExecute indicates an expected call of UserListReposExecute.
func (mr *MockClientAPIMockRecorder) UserListReposExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListReposExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListReposExecute), r)
}

// UserListStarred mocks base method.
func (m *MockClientAPI) UserListStarred(ctx context.Context, username string) openapi.ApiUserListStarredRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListStarred", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListStarredRequest)
	return ret0
}

// UserListStarred indicates an expected call of UserListStarred.
func (mr *MockClientAPIMockRecorder) UserListStarred(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListStarred", reflect.TypeOf((*MockClientAPI)(nil).UserListStarred), ctx, username)
}

// UserListStarredExecute mocks base method.
func (m *MockClientAPI) UserListStarredExecute(r openapi.ApiUserListStarredRequest) ([]openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListStarredExecute", r)
	ret0, _ := ret[0].([]openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListStarredExecute indicates an expected call of UserListStarredExecute.
func (mr *MockClientAPIMockRecorder) UserListStarredExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListStarredExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListStarredExecute), r)
}

// UserListSubscriptions mocks base method.
func (m *MockClientAPI) UserListSubscriptions(ctx context.Context, username string) openapi.ApiUserListSubscriptionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListSubscriptions", ctx, username)
	ret0, _ := ret[0].(openapi.ApiUserListSubscriptionsRequest)
	return ret0
}

// UserListSubscriptions indicates an expected call of UserListSubscriptions.
func (mr *MockClientAPIMockRecorder) UserListSubscriptions(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListSubscriptions", reflect.TypeOf((*MockClientAPI)(nil).UserListSubscriptions), ctx, username)
}

// UserListSubscriptionsExecute mocks base method.
func (m *MockClientAPI) UserListSubscriptionsExecute(r openapi.ApiUserListSubscriptionsRequest) ([]openapi.Repository, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListSubscriptionsExecute", r)
	ret0, _ := ret[0].([]openapi.Repository)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListSubscriptionsExecute indicates an expected call of UserListSubscriptionsExecute.
func (mr *MockClientAPIMockRecorder) UserListSubscriptionsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListSubscriptionsExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListSubscriptionsExecute), r)
}

// UserListTeams mocks base method.
func (m *MockClientAPI) UserListTeams(ctx context.Context) openapi.ApiUserListTeamsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListTeams", ctx)
	ret0, _ := ret[0].(openapi.ApiUserListTeamsRequest)
	return ret0
}

// UserListTeams indicates an expected call of UserListTeams.
func (mr *MockClientAPIMockRecorder) UserListTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListTeams", reflect.TypeOf((*MockClientAPI)(nil).UserListTeams), ctx)
}

// UserListTeamsExecute mocks base method.
func (m *MockClientAPI) UserListTeamsExecute(r openapi.ApiUserListTeamsRequest) ([]openapi.Team, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserListTeamsExecute", r)
	ret0, _ := ret[0].([]openapi.Team)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserListTeamsExecute indicates an expected call of UserListTeamsExecute.
func (mr *MockClientAPIMockRecorder) UserListTeamsExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserListTeamsExecute", reflect.TypeOf((*MockClientAPI)(nil).UserListTeamsExecute), r)
}

// UserSearch mocks base method.
func (m *MockClientAPI) UserSearch(ctx context.Context) openapi.ApiUserSearchRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSearch", ctx)
	ret0, _ := ret[0].(openapi.ApiUserSearchRequest)
	return ret0
}

// UserSearch indicates an expected call of UserSearch.
func (mr *MockClientAPIMockRecorder) UserSearch(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSearch", reflect.TypeOf((*MockClientAPI)(nil).UserSearch), ctx)
}

// UserSearchExecute mocks base method.
func (m *MockClientAPI) UserSearchExecute(r openapi.ApiUserSearchRequest) (openapi.InlineResponse2001, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSearchExecute", r)
	ret0, _ := ret[0].(openapi.InlineResponse2001)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserSearchExecute indicates an expected call of UserSearchExecute.
func (mr *MockClientAPIMockRecorder) UserSearchExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSearchExecute", reflect.TypeOf((*MockClientAPI)(nil).UserSearchExecute), r)
}

// UserUpdateAvatar mocks base method.
func (m *MockClientAPI) UserUpdateAvatar(ctx context.Context) openapi.ApiUserUpdateAvatarRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateAvatar", ctx)
	ret0, _ := ret[0].(openapi.ApiUserUpdateAvatarRequest)
	return ret0
}

// UserUpdateAvatar indicates an expected call of UserUpdateAvatar.
func (mr *MockClientAPIMockRecorder) UserUpdateAvatar(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateAvatar", reflect.TypeOf((*MockClientAPI)(nil).UserUpdateAvatar), ctx)
}

// UserUpdateAvatarExecute mocks base method.
func (m *MockClientAPI) UserUpdateAvatarExecute(r openapi.ApiUserUpdateAvatarRequest) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateAvatarExecute", r)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdateAvatarExecute indicates an expected call of UserUpdateAvatarExecute.
func (mr *MockClientAPIMockRecorder) UserUpdateAvatarExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateAvatarExecute", reflect.TypeOf((*MockClientAPI)(nil).UserUpdateAvatarExecute), r)
}

// UserUpdateOAuth2Application mocks base method.
func (m *MockClientAPI) UserUpdateOAuth2Application(ctx context.Context, id int64) openapi.ApiUserUpdateOAuth2ApplicationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateOAuth2Application", ctx, id)
	ret0, _ := ret[0].(openapi.ApiUserUpdateOAuth2ApplicationRequest)
	return ret0
}

// UserUpdateOAuth2Application indicates an expected call of UserUpdateOAuth2Application.
func (mr *MockClientAPIMockRecorder) UserUpdateOAuth2Application(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateOAuth2Application", reflect.TypeOf((*MockClientAPI)(nil).UserUpdateOAuth2Application), ctx, id)
}

// UserUpdateOAuth2ApplicationExecute mocks base method.
func (m *MockClientAPI) UserUpdateOAuth2ApplicationExecute(r openapi.ApiUserUpdateOAuth2ApplicationRequest) (openapi.OAuth2Application, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateOAuth2ApplicationExecute", r)
	ret0, _ := ret[0].(openapi.OAuth2Application)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserUpdateOAuth2ApplicationExecute indicates an expected call of UserUpdateOAuth2ApplicationExecute.
func (mr *MockClientAPIMockRecorder) UserUpdateOAuth2ApplicationExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateOAuth2ApplicationExecute", reflect.TypeOf((*MockClientAPI)(nil).UserUpdateOAuth2ApplicationExecute), r)
}

// UserVerifyGPGKey mocks base method.
func (m *MockClientAPI) UserVerifyGPGKey(ctx context.Context) openapi.ApiUserVerifyGPGKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserVerifyGPGKey", ctx)
	ret0, _ := ret[0].(openapi.ApiUserVerifyGPGKeyRequest)
	return ret0
}

// UserVerifyGPGKey indicates an expected call of UserVerifyGPGKey.
func (mr *MockClientAPIMockRecorder) UserVerifyGPGKey(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserVerifyGPGKey", reflect.TypeOf((*MockClientAPI)(nil).UserVerifyGPGKey), ctx)
}

// UserVerifyGPGKeyExecute mocks base method.
func (m *MockClientAPI) UserVerifyGPGKeyExecute(r openapi.ApiUserVerifyGPGKeyRequest) (openapi.GPGKey, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserVerifyGPGKeyExecute", r)
	ret0, _ := ret[0].(openapi.GPGKey)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserVerifyGPGKeyExecute indicates an expected call of UserVerifyGPGKeyExecute.
func (mr *MockClientAPIMockRecorder) UserVerifyGPGKeyExecute(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserVerifyGPGKeyExecute", reflect.TypeOf((*MockClientAPI)(nil).UserVerifyGPGKeyExecute), r)
}
