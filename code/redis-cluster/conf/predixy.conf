################################### GENERAL ####################################
## Predixy configuration file example

## Specify a name for this predixy service
## redis command INFO can get this
Name Predixy7617

## Specify listen address, support IPV4, IPV6, Unix socket
## Examples:
# Bind 127.0.0.1:7617
# Bind 0.0.0.0:7617
# Bind /tmp/predixy

## Default is 0.0.0.0:7617
Bind 0.0.0.0:7617

## Worker threads
WorkerThreads 1

## Memory limit, 0 means unlimited

## Examples:
# MaxMemory 100M
# MaxMemory 1G
# MaxMemory 0

## MaxMemory can change online by CONFIG SET MaxMemory xxx
## Default is 0
# MaxMemory 0

## Close the connection after a client is idle for N seconds (0 to disable)
## ClientTimeout can change online by CONFIG SET ClientTimeout N
## Default is 0
ClientTimeout 300


## IO buffer size
## Default is 4096
# BufSize 4096

################################### LOG ########################################
## Log file path
## Unspecify will log to stdout
## Default is Unspecified
# Log ./predixy.log

## LogRotate support

## 1d rotate log every day
## nh rotate log every n hours   1 <= n <= 24
## nm rotate log every n minutes 1 <= n <= 1440
## nG rotate log evenry nG bytes
## nM rotate log evenry nM bytes
## time rotate and size rotate can combine eg 1h 2G, means 1h or 2G roate a time

## Examples:
# LogRotate 1d 2G
# LogRotate 1d

## Default is disable LogRotate


## In multi-threads, worker thread log need lock,
## AllowMissLog can reduce lock time for improve performance
## AllowMissLog can change online by CONFIG SET AllowMissLog true|false
## Default is true
# AllowMissLog false

## LogLevelSample, output a log every N
## all level sample can change online by CONFIG SET LogXXXSample N
LogVerbSample 0
LogDebugSample 0
LogInfoSample 10000
LogNoticeSample 1
LogWarnSample 1
LogErrorSample 1


################################### AUTHORITY ##################################
Include auth.conf

################################### SERVERS ####################################
Include cluster.conf
# Include sentinel.conf
# Include try.conf


################################### DATACENTER #################################
## LocalDC specify current machine dc
# LocalDC bj

## see dc.conf
# Include dc.conf


################################### COMMAND ####################################
## Custom command define, see command.conf
Include command.conf

################################### LATENCY ####################################
## Latency monitor define, see latency.conf
#Include latency.conf

ClusterServerPool {
    MasterReadPriority 100  #这个是主节点访问权重，如果是只把备节点用作备份不去做读写分离，直接将这个配置成100只去读主节点就好了。
    Password 123456 # redis实例的访问密码
    StaticSlaveReadPriority 0  # 读写分离功能，从静态redis slave节点执行读请求的优先级，所谓静态节点，是指在本配置文件中显示列出的redis节点，不指定的话为0
    DynamicSlaveReadPriority 0 # 功能见上，所谓动态节点是指在本配置文件中没有列出，但是通过redis sentinel动态发现的节点，不指定的话为0
    RefreshInterval 1 # predixy会周期性的请求redis sentinel以获取最新的集群信息，该参数以秒为单位指定刷新周期，不指定的话为1秒
    ServerTimeout 1 # 请求在predixy中最长的处理/等待时间，如果超过该时间redis还没有响应的话，那么predixy会关闭同redis的连接，并给客户端一个错误响应，对于blpop这种阻塞式命令，该选项不起作用，为0则禁止此功能，即如果redis不返回就一直等待，不指定的话为0
    ServerFailureLimit 10 # 一个redis实例出现多少次才错误以后将其标记为失效，不指定的话为10
    ServerRetryTimeout 1 # 一个redis实例失效后多久后去检查其是否恢复正常，不指定的话为1秒
    KeepAlive 120 #predixy与redis的连接tcp keepalive时间，为0则禁止此功能，不指定的话为0
    Servers {
    ## 配置所有节点地址就好了
        + 127.0.0.1:7001
        + 127.0.0.1:7002
        + 127.0.0.1:7003
        + 127.0.0.1:7004
        + 127.0.0.1:7005
        + 127.0.0.1:7006
    }
}

Authority {
    Auth "123456" {
        Mode admin
    }
}

CustomCommand {
   bf.reserve {
       Mode write
       MinArgs 4
       MaxArgs 7
   }

   bf.add {
       Mode write
       MinArgs 3
       MaxArgs 3
   }

   bf.madd {
       Mode write
       MinArgs 3
       MaxArgs 9999
   }

   bf.insert {
       Mode write
       MinArgs 4
       MaxArgs 9999
   }

   bf.exists {
       Mode read
       MinArgs 3
       MaxArgs 3
   }

   bf.mexists {
       Mode read
       MinArgs 3
       MaxArgs 9999
   }

#    bf.scandump {
#        Mode admin
#        MinArgs 3
#        MaxArgs 3
#    }

#    bf.loadchunk {
#        Mode admin
#        MinArgs 4
#        MaxArgs 4
#    }

   bf.info {
       Mode read
   }

#    cf.reserve {
#           Mode write
#           MinArgs 3
#           MaxArgs 9
#       }

      cf.add {
          Mode write
          MinArgs 3
          MaxArgs 3
      }

      cf.addnx {
          Mode write
          MinArgs 3
          MaxArgs 3
      }

      cf.insert {
          Mode write
          MinArgs 4
          MaxArgs 9999
      }

      cf.insertnx {
          Mode write
          MinArgs 4
          MaxArgs 9999
      }

      cf.exists {
          Mode read
          MinArgs 3
          MaxArgs 3
      }

      cf.del {
          Mode read
          MinArgs 3
          MaxArgs 3
      }

      cf.count {
          Mode read
          MinArgs 3
          MaxArgs 3
      }

    #   cf.scandump {
    #       Mode admin
    #       MinArgs 3
    #       MaxArgs 3
    #   }

    #   cf.loadchunk {
    #       Mode admin
    #       MinArgs 4
    #       MaxArgs 4
    #   }

      cf.info {
          Mode read
      }

}
